
/Users/eo/Desktop/CART461/CART461-I2C-SENSORS/STEMMA/STEMMA-CAPACITIVE-TOUCH/target/5.9.0/argon/STEMMA-CAPACITIVE-TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001df8  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5e14  000b5e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e630  000b5e38  0000e630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000160  2003e69c  2003e69c  0001e69c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5ea4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5ea8  000b5ea8  00015ea8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b5eae  000b5eae  00015eae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5ed2  000b5ed2  00015ed2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00155e59  00000000  00000000  00015ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015c08  00000000  00000000  0016bd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00039b85  00000000  00000000  00181937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae0  00000000  00000000  001bb4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a488  00000000  00000000  001bdf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004135a  00000000  00000000  001c8424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004b477  00000000  00000000  0020977e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015a24b  00000000  00000000  00254bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007800  00000000  00000000  003aee40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fcdb 	bl	b59f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 fce3 	bl	b5a14 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e630 	.word	0x2003e630
   b4058:	000b5e38 	.word	0x000b5e38
   b405c:	2003e69c 	.word	0x2003e69c
   b4060:	2003e69c 	.word	0x2003e69c
   b4064:	2003e7fc 	.word	0x2003e7fc

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 fbb3 	bl	b57d8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b5dec 	.word	0x000b5dec
   b408c:	000b5e14 	.word	0x000b5e14

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b816 	b.w	b40c0 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f85d 	bl	b4154 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 bb53 	b.w	b5748 <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f000 be73 	b.w	b4d8c <malloc>

000b40a6 <_Znaj>:
   b40a6:	f000 be71 	b.w	b4d8c <malloc>

000b40aa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40aa:	f000 be77 	b.w	b4d9c <free>

000b40ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40ae:	7800      	ldrb	r0, [r0, #0]
   b40b0:	fab0 f080 	clz	r0, r0
   b40b4:	0940      	lsrs	r0, r0, #5
   b40b6:	4770      	bx	lr

000b40b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b8:	2301      	movs	r3, #1
   b40ba:	7003      	strb	r3, [r0, #0]
   b40bc:	4770      	bx	lr
	...

000b40c0 <setup>:
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

// setup() runs once, when the device is first turned on.
void setup() {
   b40c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(115200);
   b40c2:	f001 fabb 	bl	b563c <_Z16_fetch_usbserialv>
   b40c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40ca:	f001 faa7 	bl	b561c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40ce:	2000      	movs	r0, #0
   b40d0:	f000 fc68 	bl	b49a4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b40d4:	f241 3588 	movw	r5, #5000	; 0x1388
        return hal_timer_millis(nullptr);
   b40d8:	4604      	mov	r4, r0
   b40da:	2000      	movs	r0, #0
   b40dc:	f000 fc62 	bl	b49a4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b40e0:	1b00      	subs	r0, r0, r4
   b40e2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b40e6:	42a8      	cmp	r0, r5
   b40e8:	f171 0300 	sbcs.w	r3, r1, #0
   b40ec:	d207      	bcs.n	b40fe <setup+0x3e>
  waitFor(Serial.isConnected, 5000);
   b40ee:	f001 faa5 	bl	b563c <_Z16_fetch_usbserialv>
   b40f2:	f001 fa97 	bl	b5624 <_ZN9USBSerial11isConnectedEv>
   b40f6:	b910      	cbnz	r0, b40fe <setup+0x3e>
            spark_process();
   b40f8:	f000 fdc8 	bl	b4c8c <spark_process>
        while (_while() && !_condition()) {
   b40fc:	e7ed      	b.n	b40da <setup+0x1a>
   b40fe:	f001 fa9d 	bl	b563c <_Z16_fetch_usbserialv>
   b4102:	f001 fa8f 	bl	b5624 <_ZN9USBSerial11isConnectedEv>
  
  Serial.println("Adafruit MPR121 Capacitive Touch sensor test"); 
   b4106:	f001 fa99 	bl	b563c <_Z16_fetch_usbserialv>
   b410a:	490e      	ldr	r1, [pc, #56]	; (b4144 <setup+0x84>)
   b410c:	f001 f8c1 	bl	b5292 <_ZN5Print7printlnEPKc>
  
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
   b4110:	f001 fc06 	bl	b5920 <_Z19__fetch_global_Wirev>
   b4114:	2306      	movs	r3, #6
   b4116:	4602      	mov	r2, r0
   b4118:	9300      	str	r3, [sp, #0]
   b411a:	480b      	ldr	r0, [pc, #44]	; (b4148 <setup+0x88>)
   b411c:	230c      	movs	r3, #12
   b411e:	215a      	movs	r1, #90	; 0x5a
   b4120:	f000 fb9b 	bl	b485a <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh>
   b4124:	b928      	cbnz	r0, b4132 <setup+0x72>
    Serial.println("MPR121 not found, check wiring?");
   b4126:	f001 fa89 	bl	b563c <_Z16_fetch_usbserialv>
   b412a:	4908      	ldr	r1, [pc, #32]	; (b414c <setup+0x8c>)
   b412c:	f001 f8b1 	bl	b5292 <_ZN5Print7printlnEPKc>
    while (1);
   b4130:	e7fe      	b.n	b4130 <setup+0x70>
  }
  Serial.println("MPR121 found!");
   b4132:	f001 fa83 	bl	b563c <_Z16_fetch_usbserialv>
   b4136:	4906      	ldr	r1, [pc, #24]	; (b4150 <setup+0x90>)
}
   b4138:	b003      	add	sp, #12
   b413a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println("MPR121 found!");
   b413e:	f001 b8a8 	b.w	b5292 <_ZN5Print7printlnEPKc>
   b4142:	bf00      	nop
   b4144:	000b5b60 	.word	0x000b5b60
   b4148:	2003e6a8 	.word	0x2003e6a8
   b414c:	000b5b8d 	.word	0x000b5b8d
   b4150:	000b5bad 	.word	0x000b5bad

000b4154 <loop>:

void loop() {
   b4154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Get the currently touched pads
  currtouched = cap.touched();
   b4158:	481b      	ldr	r0, [pc, #108]	; (b41c8 <loop+0x74>)
   b415a:	4d1c      	ldr	r5, [pc, #112]	; (b41cc <loop+0x78>)
   b415c:	4e1c      	ldr	r6, [pc, #112]	; (b41d0 <loop+0x7c>)
  
  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
      Serial.print(i); Serial.println(" touched");
   b415e:	4f1d      	ldr	r7, [pc, #116]	; (b41d4 <loop+0x80>)
    }
    // if it *was* touched and now *isnt*, alert!
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
      Serial.print(i); Serial.println(" released");
   b4160:	f8df 8074 	ldr.w	r8, [pc, #116]	; b41d8 <loop+0x84>
  currtouched = cap.touched();
   b4164:	f000 fb24 	bl	b47b0 <_ZN15Adafruit_MPR1217touchedEv>
   b4168:	2400      	movs	r4, #0
   b416a:	8028      	strh	r0, [r5, #0]
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
   b416c:	882b      	ldrh	r3, [r5, #0]
   b416e:	40e3      	lsrs	r3, r4
   b4170:	07d8      	lsls	r0, r3, #31
   b4172:	d40f      	bmi.n	b4194 <loop+0x40>
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
   b4174:	8833      	ldrh	r3, [r6, #0]
   b4176:	40e3      	lsrs	r3, r4
   b4178:	07d9      	lsls	r1, r3, #31
   b417a:	d51e      	bpl.n	b41ba <loop+0x66>
      Serial.print(i); Serial.println(" released");
   b417c:	f001 fa5e 	bl	b563c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4180:	4621      	mov	r1, r4
   b4182:	220a      	movs	r2, #10
   b4184:	f001 f88f 	bl	b52a6 <_ZN5Print11printNumberEmh>
   b4188:	f001 fa58 	bl	b563c <_Z16_fetch_usbserialv>
   b418c:	4641      	mov	r1, r8
   b418e:	f001 f880 	bl	b5292 <_ZN5Print7printlnEPKc>
   b4192:	e012      	b.n	b41ba <loop+0x66>
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
   b4194:	8833      	ldrh	r3, [r6, #0]
   b4196:	40e3      	lsrs	r3, r4
   b4198:	07da      	lsls	r2, r3, #31
   b419a:	d40e      	bmi.n	b41ba <loop+0x66>
      Serial.print(i); Serial.println(" touched");
   b419c:	f001 fa4e 	bl	b563c <_Z16_fetch_usbserialv>
   b41a0:	220a      	movs	r2, #10
   b41a2:	4621      	mov	r1, r4
   b41a4:	f001 f87f 	bl	b52a6 <_ZN5Print11printNumberEmh>
   b41a8:	f001 fa48 	bl	b563c <_Z16_fetch_usbserialv>
   b41ac:	4639      	mov	r1, r7
   b41ae:	f001 f870 	bl	b5292 <_ZN5Print7printlnEPKc>
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
   b41b2:	882b      	ldrh	r3, [r5, #0]
   b41b4:	40e3      	lsrs	r3, r4
   b41b6:	07db      	lsls	r3, r3, #31
   b41b8:	d5dc      	bpl.n	b4174 <loop+0x20>
  for (uint8_t i=0; i<12; i++) {
   b41ba:	3401      	adds	r4, #1
   b41bc:	2c0c      	cmp	r4, #12
   b41be:	d1d5      	bne.n	b416c <loop+0x18>
    }
  }

  // reset our state
  lasttouched = currtouched;
   b41c0:	882b      	ldrh	r3, [r5, #0]
   b41c2:	8033      	strh	r3, [r6, #0]
  }
  Serial.println();
  
  // put a delay so it isn't overwhelming
  delay(100);
   b41c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b41c8:	2003e6a8 	.word	0x2003e6a8
   b41cc:	2003e6ac 	.word	0x2003e6ac
   b41d0:	2003e6ae 	.word	0x2003e6ae
   b41d4:	000b5bbb 	.word	0x000b5bbb
   b41d8:	000b5bc4 	.word	0x000b5bc4

000b41dc <_GLOBAL__sub_I_SystemMode>:
   b41dc:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   b41de:	2100      	movs	r1, #0
   b41e0:	2001      	movs	r0, #1
   b41e2:	f000 fd37 	bl	b4c54 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b41e6:	4b07      	ldr	r3, [pc, #28]	; (b4204 <_GLOBAL__sub_I_SystemMode+0x28>)
   b41e8:	2200      	movs	r2, #0
   b41ea:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b41ee:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b41f2:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b41f4:	2003      	movs	r0, #3
   b41f6:	f000 fd1d 	bl	b4c34 <set_system_mode>
   b41fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_MPR121 cap = Adafruit_MPR121();
   b41fe:	4802      	ldr	r0, [pc, #8]	; (b4208 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4200:	f000 baae 	b.w	b4760 <_ZN15Adafruit_MPR121C1Ev>
   b4204:	2003e69c 	.word	0x2003e69c
   b4208:	2003e6a8 	.word	0x2003e6a8

000b420c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b420c:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b420e:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = nullptr;
   b4210:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b4214:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b4216:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b421a:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b421e:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b4220:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b4222:	7382      	strb	r2, [r0, #14]
  _width = width;
   b4224:	7303      	strb	r3, [r0, #12]
}
   b4226:	bd30      	pop	{r4, r5, pc}

000b4228 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4228:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b422a:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b422c:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b422e:	b085      	sub	sp, #20
   b4230:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b4232:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b4234:	f88d 400c 	strb.w	r4, [sp, #12]
   b4238:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b423a:	460e      	mov	r6, r1
   b423c:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b423e:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b4242:	b140      	cbz	r0, b4256 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4244:	7b5b      	ldrb	r3, [r3, #13]
   b4246:	9301      	str	r3, [sp, #4]
   b4248:	ab03      	add	r3, sp, #12
   b424a:	9300      	str	r3, [sp, #0]
   b424c:	2301      	movs	r3, #1
   b424e:	f000 f8df 	bl	b4410 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b4252:	b005      	add	sp, #20
   b4254:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b4256:	6858      	ldr	r0, [r3, #4]
   b4258:	2800      	cmp	r0, #0
   b425a:	d0fa      	beq.n	b4252 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b425c:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4260:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4264:	f1be 0f03 	cmp.w	lr, #3
   b4268:	d10c      	bne.n	b4284 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b426a:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b426e:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4272:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b4274:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4278:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b427c:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b427e:	f000 fa29 	bl	b46d4 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
   b4282:	e7e6      	b.n	b4252 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4284:	f1be 0f00 	cmp.w	lr, #0
   b4288:	d109      	bne.n	b429e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b428a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b428e:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4292:	f8cd c000 	str.w	ip, [sp]
   b4296:	ab03      	add	r3, sp, #12
   b4298:	463a      	mov	r2, r7
   b429a:	4631      	mov	r1, r6
   b429c:	e7ef      	b.n	b427e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b429e:	f1be 0f02 	cmp.w	lr, #2
   b42a2:	d102      	bne.n	b42aa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b42a4:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b42a8:	e7f1      	b.n	b428e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b42aa:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b42ae:	bf01      	itttt	eq
   b42b0:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b42b4:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b42b8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b42bc:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b42c0:	e7e7      	b.n	b4292 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b42c2 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b42c2:	b4f0      	push	{r4, r5, r6, r7}
   b42c4:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b42c6:	b902      	cbnz	r2, b42ca <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b42c8:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b42ca:	2a04      	cmp	r2, #4
   b42cc:	d814      	bhi.n	b42f8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b42ce:	f100 050f 	add.w	r5, r0, #15
   b42d2:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b42d4:	1884      	adds	r4, r0, r2
   b42d6:	4629      	mov	r1, r5
   b42d8:	4284      	cmp	r4, r0
   b42da:	d009      	beq.n	b42f0 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b42dc:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b42de:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b42e0:	b927      	cbnz	r7, b42ec <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b42e2:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b42e4:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b42e6:	3501      	adds	r5, #1
   b42e8:	3c01      	subs	r4, #1
   b42ea:	e7f5      	b.n	b42d8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b42ec:	73a6      	strb	r6, [r4, #14]
   b42ee:	e7f9      	b.n	b42e4 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b42f0:	4620      	mov	r0, r4
}
   b42f2:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b42f4:	f7ff bf98 	b.w	b4228 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b42f8:	2000      	movs	r0, #0
   b42fa:	bcf0      	pop	{r4, r5, r6, r7}
   b42fc:	4770      	bx	lr

000b42fe <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b42fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b4300:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b4302:	7a85      	ldrb	r5, [r0, #10]
   b4304:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4308:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b430a:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b430c:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b430e:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b4310:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b4314:	b140      	cbz	r0, b4328 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4316:	2100      	movs	r1, #0
   b4318:	e9cd 2100 	strd	r2, r1, [sp]
   b431c:	a903      	add	r1, sp, #12
   b431e:	7b62      	ldrb	r2, [r4, #13]
   b4320:	f000 f8e4 	bl	b44ec <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b4324:	b004      	add	sp, #16
   b4326:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b4328:	6860      	ldr	r0, [r4, #4]
   b432a:	2800      	cmp	r0, #0
   b432c:	d0fa      	beq.n	b4324 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b432e:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4330:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4332:	2903      	cmp	r1, #3
   b4334:	d10d      	bne.n	b4352 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b4336:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b433a:	21ff      	movs	r1, #255	; 0xff
   b433c:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b4340:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4344:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b4348:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b434a:	a903      	add	r1, sp, #12
   b434c:	f000 f9e4 	bl	b4718 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>
   b4350:	e7e8      	b.n	b4324 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4352:	b941      	cbnz	r1, b4366 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b4354:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b4358:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b435c:	21ff      	movs	r1, #255	; 0xff
   b435e:	e9cd 2100 	strd	r2, r1, [sp]
   b4362:	4622      	mov	r2, r4
   b4364:	e7f1      	b.n	b434a <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4366:	2902      	cmp	r1, #2
   b4368:	d102      	bne.n	b4370 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b436a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b436e:	e7f3      	b.n	b4358 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4370:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b4372:	bf02      	ittt	eq
   b4374:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b4378:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b437c:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b4380:	e7ec      	b.n	b435c <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b4382 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b4382:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b4384:	f100 050f 	add.w	r5, r0, #15
   b4388:	7b02      	ldrb	r2, [r0, #12]
   b438a:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b438c:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b438e:	f7ff ffb6 	bl	b42fe <_ZN23Adafruit_BusIO_Register4readEPhh>
   b4392:	b178      	cbz	r0, b43b4 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b4394:	7b22      	ldrb	r2, [r4, #12]
   b4396:	4629      	mov	r1, r5
   b4398:	4422      	add	r2, r4
  uint32_t value = 0;
   b439a:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b439c:	42a2      	cmp	r2, r4
   b439e:	d00b      	beq.n	b43b8 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b43a0:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b43a2:	7ba0      	ldrb	r0, [r4, #14]
   b43a4:	b920      	cbnz	r0, b43b0 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b43a6:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b43a8:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b43aa:	3a01      	subs	r2, #1
   b43ac:	3101      	adds	r1, #1
   b43ae:	e7f5      	b.n	b439c <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b43b0:	7808      	ldrb	r0, [r1, #0]
   b43b2:	e7f9      	b.n	b43a8 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b43b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b43b8:	bd38      	pop	{r3, r4, r5, pc}

000b43ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b43ba:	6042      	str	r2, [r0, #4]
  _begun = false;
   b43bc:	2200      	movs	r2, #0
   b43be:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
   b43c0:	2220      	movs	r2, #32
  _addr = addr;
   b43c2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b43c4:	60c2      	str	r2, [r0, #12]
#endif
}
   b43c6:	4770      	bx	lr

000b43c8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b43c8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b43ca:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b43cc:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b43ce:	b153      	cbz	r3, b43e6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b43d0:	7821      	ldrb	r1, [r4, #0]
   b43d2:	6860      	ldr	r0, [r4, #4]
   b43d4:	f000 fdc1 	bl	b4f5a <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.print(F("Address 0x"));
  DEBUG_SERIAL.print(_addr);
#endif
  if (_wire->endTransmission() == 0) {
   b43d8:	6860      	ldr	r0, [r4, #4]
   b43da:	f000 fdc6 	bl	b4f6a <_ZN7TwoWire15endTransmissionEv>
   b43de:	fab0 f080 	clz	r0, r0
   b43e2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
   b43e4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b43e6:	2101      	movs	r1, #1
   b43e8:	f000 f803 	bl	b43f2 <_ZN18Adafruit_I2CDevice5beginEb>
   b43ec:	2800      	cmp	r0, #0
   b43ee:	d1ef      	bne.n	b43d0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b43f0:	e7f8      	b.n	b43e4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b43f2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b43f2:	b538      	push	{r3, r4, r5, lr}
   b43f4:	4604      	mov	r4, r0
  _wire->begin();
   b43f6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b43f8:	460d      	mov	r5, r1
  _wire->begin();
   b43fa:	f000 fd7b 	bl	b4ef4 <_ZN7TwoWire5beginEv>
  _begun = true;
   b43fe:	2001      	movs	r0, #1
   b4400:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b4402:	b125      	cbz	r5, b440e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b4404:	4620      	mov	r0, r4
}
   b4406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b440a:	f7ff bfdd 	b.w	b43c8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b440e:	bd38      	pop	{r3, r4, r5, pc}

000b4410 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b4410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4414:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b4418:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b441a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b441c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b441e:	4432      	add	r2, r6
   b4420:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b4422:	4604      	mov	r4, r0
   b4424:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b4426:	d902      	bls.n	b442e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b4428:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b442e:	7801      	ldrb	r1, [r0, #0]
   b4430:	6840      	ldr	r0, [r0, #4]
   b4432:	f000 fd92 	bl	b4f5a <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b4436:	b97e      	cbnz	r6, b4458 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b4438:	6860      	ldr	r0, [r4, #4]
   b443a:	6803      	ldr	r3, [r0, #0]
   b443c:	462a      	mov	r2, r5
   b443e:	68db      	ldr	r3, [r3, #12]
   b4440:	4641      	mov	r1, r8
   b4442:	4798      	blx	r3
   b4444:	4285      	cmp	r5, r0
   b4446:	d1ef      	bne.n	b4428 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b4448:	6860      	ldr	r0, [r4, #4]
   b444a:	4639      	mov	r1, r7
   b444c:	f000 fd89 	bl	b4f62 <_ZN7TwoWire15endTransmissionEh>
   b4450:	fab0 f080 	clz	r0, r0
   b4454:	0940      	lsrs	r0, r0, #5
   b4456:	e7e8      	b.n	b442a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b4458:	f1b9 0f00 	cmp.w	r9, #0
   b445c:	d0ec      	beq.n	b4438 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b445e:	6860      	ldr	r0, [r4, #4]
   b4460:	6803      	ldr	r3, [r0, #0]
   b4462:	4632      	mov	r2, r6
   b4464:	68db      	ldr	r3, [r3, #12]
   b4466:	4649      	mov	r1, r9
   b4468:	4798      	blx	r3
   b446a:	4286      	cmp	r6, r0
   b446c:	d1dc      	bne.n	b4428 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b446e:	e7e3      	b.n	b4438 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b4470 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b4470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4474:	4615      	mov	r5, r2
   b4476:	4604      	mov	r4, r0
   b4478:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b447a:	b2d2      	uxtb	r2, r2
   b447c:	7801      	ldrb	r1, [r0, #0]
   b447e:	6840      	ldr	r0, [r0, #4]
   b4480:	f000 fd57 	bl	b4f32 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b4484:	4285      	cmp	r5, r0
   b4486:	d10d      	bne.n	b44a4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b4488:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b448a:	fa1f f887 	uxth.w	r8, r7
   b448e:	45a8      	cmp	r8, r5
   b4490:	f107 0701 	add.w	r7, r7, #1
   b4494:	d209      	bcs.n	b44aa <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b4496:	6860      	ldr	r0, [r4, #4]
   b4498:	6803      	ldr	r3, [r0, #0]
   b449a:	695b      	ldr	r3, [r3, #20]
   b449c:	4798      	blx	r3
   b449e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b44a2:	e7f2      	b.n	b448a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b44a4:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b44a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b44aa:	2001      	movs	r0, #1
   b44ac:	e7fb      	b.n	b44a6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b44ae <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b44ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b44b2:	4607      	mov	r7, r0
   b44b4:	4688      	mov	r8, r1
   b44b6:	4616      	mov	r6, r2
   b44b8:	4699      	mov	r9, r3
  size_t pos = 0;
   b44ba:	2500      	movs	r5, #0
  while (pos < len) {
   b44bc:	42b5      	cmp	r5, r6
   b44be:	d212      	bcs.n	b44e6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b44c0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b44c2:	1b74      	subs	r4, r6, r5
   b44c4:	4294      	cmp	r4, r2
   b44c6:	bf28      	it	cs
   b44c8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b44ca:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b44cc:	42ab      	cmp	r3, r5
   b44ce:	bf94      	ite	ls
   b44d0:	464b      	movls	r3, r9
   b44d2:	2300      	movhi	r3, #0
   b44d4:	4622      	mov	r2, r4
   b44d6:	eb08 0105 	add.w	r1, r8, r5
   b44da:	4638      	mov	r0, r7
   b44dc:	f7ff ffc8 	bl	b4470 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b44e0:	b110      	cbz	r0, b44e8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b44e2:	4425      	add	r5, r4
  while (pos < len) {
   b44e4:	e7ea      	b.n	b44bc <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b44e6:	2001      	movs	r0, #1
}
   b44e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b44ec <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b44ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b44ee:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b44f0:	2300      	movs	r3, #0
   b44f2:	e9cd 3300 	strd	r3, r3, [sp]
   b44f6:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b44fa:	9e06      	ldr	r6, [sp, #24]
   b44fc:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b44fe:	f7ff ff87 	bl	b4410 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b4502:	b140      	cbz	r0, b4516 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b4504:	2301      	movs	r3, #1
   b4506:	4632      	mov	r2, r6
   b4508:	4629      	mov	r1, r5
   b450a:	4620      	mov	r0, r4
}
   b450c:	b002      	add	sp, #8
   b450e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b4512:	f7ff bfcc 	b.w	b44ae <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b4516:	b002      	add	sp, #8
   b4518:	bd70      	pop	{r4, r5, r6, pc}
	...

000b451c <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4520:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
   b4522:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4524:	b085      	sub	sp, #20
   b4526:	460d      	mov	r5, r1
  if (_spi) {
   b4528:	b140      	cbz	r0, b453c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
   b452a:	2300      	movs	r3, #0
   b452c:	9300      	str	r3, [sp, #0]
   b452e:	4613      	mov	r3, r2
   b4530:	460a      	mov	r2, r1
   b4532:	f000 ff75 	bl	b5420 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b4536:	b005      	add	sp, #20
   b4538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b453c:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b453e:	68a0      	ldr	r0, [r4, #8]
   b4540:	4f48      	ldr	r7, [pc, #288]	; (b4664 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b4542:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b4546:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4548:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b454a:	bf0c      	ite	eq
   b454c:	f04f 0b01 	moveq.w	fp, #1
   b4550:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4554:	ea1b 0f03 	tst.w	fp, r3
   b4558:	eb01 0302 	add.w	r3, r1, r2
   b455c:	bf0c      	ite	eq
   b455e:	f04f 0901 	moveq.w	r9, #1
   b4562:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4566:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b4568:	9303      	str	r3, [sp, #12]
   b456a:	9b03      	ldr	r3, [sp, #12]
   b456c:	42ab      	cmp	r3, r5
   b456e:	d0e2      	beq.n	b4536 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b4570:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b4574:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b4576:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b457a:	b117      	cbz	r7, b4582 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b457c:	4638      	mov	r0, r7
   b457e:	f000 fa01 	bl	b4984 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b4582:	7b63      	ldrb	r3, [r4, #13]
   b4584:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b4588:	d141      	bne.n	b460e <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b458a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b458e:	1c5a      	adds	r2, r3, #1
   b4590:	d00f      	beq.n	b45b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b4592:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4596:	bf14      	ite	ne
   b4598:	2301      	movne	r3, #1
   b459a:	2300      	moveq	r3, #0
   b459c:	454b      	cmp	r3, r9
   b459e:	d008      	beq.n	b45b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort = *mosiPort | mosiPinMask;
   b45a0:	6963      	ldr	r3, [r4, #20]
   b45a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b45a4:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b45a6:	2900      	cmp	r1, #0
   b45a8:	d02c      	beq.n	b4604 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort = *mosiPort | mosiPinMask;
   b45aa:	4302      	orrs	r2, r0
   b45ac:	601a      	str	r2, [r3, #0]
   b45ae:	f04f 0901 	mov.w	r9, #1
        *clkPort = *clkPort | clkPinMask; // Clock high
   b45b2:	69a1      	ldr	r1, [r4, #24]
   b45b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b45b6:	680a      	ldr	r2, [r1, #0]
   b45b8:	4313      	orrs	r3, r2
   b45ba:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b45bc:	b117      	cbz	r7, b45c4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b45be:	4638      	mov	r0, r7
   b45c0:	f000 f9e0 	bl	b4984 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b45c4:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b45c8:	3301      	adds	r3, #1
   b45ca:	d006      	beq.n	b45da <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b45cc:	69e3      	ldr	r3, [r4, #28]
   b45ce:	681a      	ldr	r2, [r3, #0]
   b45d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b45d2:	421a      	tst	r2, r3
            reply |= b;
   b45d4:	bf18      	it	ne
   b45d6:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort = *clkPort & ~clkPinMask; // Clock low
   b45da:	69a1      	ldr	r1, [r4, #24]
   b45dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b45de:	680a      	ldr	r2, [r1, #0]
   b45e0:	ea22 0303 	bic.w	r3, r2, r3
   b45e4:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b45e6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b45ea:	3301      	adds	r3, #1
        buffer[i] = reply;
   b45ec:	bf18      	it	ne
   b45ee:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b45f2:	7b23      	ldrb	r3, [r4, #12]
   b45f4:	2b00      	cmp	r3, #0
   b45f6:	d132      	bne.n	b465e <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b45f8:	0076      	lsls	r6, r6, #1
   b45fa:	b2f6      	uxtb	r6, r6
   b45fc:	2e00      	cmp	r6, #0
   b45fe:	d1bc      	bne.n	b457a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b4600:	3501      	adds	r5, #1
   b4602:	e7b2      	b.n	b456a <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort = *mosiPort & ~mosiPinMask;
   b4604:	ea22 0200 	bic.w	r2, r2, r0
   b4608:	601a      	str	r2, [r3, #0]
   b460a:	4689      	mov	r9, r1
   b460c:	e7d1      	b.n	b45b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort = *clkPort | clkPinMask; // Clock high
   b460e:	69a1      	ldr	r1, [r4, #24]
   b4610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4612:	680a      	ldr	r2, [r1, #0]
   b4614:	4313      	orrs	r3, r2
   b4616:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4618:	b117      	cbz	r7, b4620 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b461a:	4638      	mov	r0, r7
   b461c:	f000 f9b2 	bl	b4984 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b4620:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4624:	3301      	adds	r3, #1
   b4626:	d008      	beq.n	b463a <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort = *mosiPort | mosiPinMask;
   b4628:	6963      	ldr	r3, [r4, #20]
   b462a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b462c:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b462e:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort = *mosiPort | mosiPinMask;
   b4632:	bf14      	ite	ne
   b4634:	430a      	orrne	r2, r1
            *mosiPort = *mosiPort & ~mosiPinMask;
   b4636:	438a      	biceq	r2, r1
   b4638:	601a      	str	r2, [r3, #0]
        *clkPort = *clkPort & ~clkPinMask; // Clock low
   b463a:	69a1      	ldr	r1, [r4, #24]
   b463c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b463e:	680a      	ldr	r2, [r1, #0]
   b4640:	ea22 0303 	bic.w	r3, r2, r3
   b4644:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b4646:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b464a:	3301      	adds	r3, #1
   b464c:	d0cb      	beq.n	b45e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b464e:	69e3      	ldr	r3, [r4, #28]
   b4650:	681a      	ldr	r2, [r3, #0]
   b4652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4654:	421a      	tst	r2, r3
            reply |= b;
   b4656:	bf18      	it	ne
   b4658:	ea46 0808 	orrne.w	r8, r6, r8
   b465c:	e7c3      	b.n	b45e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b465e:	0876      	lsrs	r6, r6, #1
   b4660:	e7cc      	b.n	b45fc <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b4662:	bf00      	nop
   b4664:	0007a120 	.word	0x0007a120

000b4668 <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b4668:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b466a:	2201      	movs	r2, #1
  uint8_t data = send;
   b466c:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b4670:	f10d 0107 	add.w	r1, sp, #7
   b4674:	f7ff ff52 	bl	b451c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b4678:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b467c:	b003      	add	sp, #12
   b467e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4682 <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
   b4682:	6803      	ldr	r3, [r0, #0]
   b4684:	b11b      	cbz	r3, b468e <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
   b4686:	6841      	ldr	r1, [r0, #4]
   b4688:	4618      	mov	r0, r3
   b468a:	f000 be5b 	b.w	b5344 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
   b468e:	4770      	bx	lr

000b4690 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
   b4690:	6800      	ldr	r0, [r0, #0]
   b4692:	b108      	cbz	r0, b4698 <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
   b4694:	f000 be3c 	b.w	b5310 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
   b4698:	4770      	bx	lr

000b469a <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
   b469a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b469e:	1c43      	adds	r3, r0, #1
   b46a0:	d003      	beq.n	b46aa <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
   b46a2:	b2c9      	uxtb	r1, r1
   b46a4:	b280      	uxth	r0, r0
   b46a6:	f001 b907 	b.w	b58b8 <digitalWrite>
  }
}
   b46aa:	4770      	bx	lr

000b46ac <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
   b46ac:	b510      	push	{r4, lr}
   b46ae:	4604      	mov	r4, r0
  beginTransaction();
   b46b0:	f7ff ffe7 	bl	b4682 <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
   b46b4:	4620      	mov	r0, r4
   b46b6:	2100      	movs	r1, #0
}
   b46b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
   b46bc:	f7ff bfed 	b.w	b469a <_ZN18Adafruit_SPIDevice13setChipSelectEi>

000b46c0 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b46c0:	b510      	push	{r4, lr}
  setChipSelect(HIGH);
   b46c2:	2101      	movs	r1, #1
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b46c4:	4604      	mov	r4, r0
  setChipSelect(HIGH);
   b46c6:	f7ff ffe8 	bl	b469a <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
   b46ca:	4620      	mov	r0, r4
}
   b46cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
   b46d0:	f7ff bfde 	b.w	b4690 <_ZN18Adafruit_SPIDevice14endTransactionEv>

000b46d4 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b46d8:	461c      	mov	r4, r3
   b46da:	4606      	mov	r6, r0
   b46dc:	460d      	mov	r5, r1
   b46de:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
   b46e0:	f7ff ffe4 	bl	b46ac <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
   b46e4:	9b06      	ldr	r3, [sp, #24]
   b46e6:	eb04 0803 	add.w	r8, r4, r3
   b46ea:	4544      	cmp	r4, r8
   b46ec:	d108      	bne.n	b4700 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
   b46ee:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
   b46f0:	42bd      	cmp	r5, r7
   b46f2:	d00b      	beq.n	b470c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
   b46f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b46f8:	4630      	mov	r0, r6
   b46fa:	f7ff ffb5 	bl	b4668 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
   b46fe:	e7f7      	b.n	b46f0 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
   b4700:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4704:	4630      	mov	r0, r6
   b4706:	f7ff ffaf 	bl	b4668 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
   b470a:	e7ee      	b.n	b46ea <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
   b470c:	4630      	mov	r0, r6
   b470e:	f7ff ffd7 	bl	b46c0 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b4712:	2001      	movs	r0, #1
   b4714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4718 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b4718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b471c:	460d      	mov	r5, r1
   b471e:	4617      	mov	r7, r2
   b4720:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b4724:	4606      	mov	r6, r0
   b4726:	461c      	mov	r4, r3
  beginTransactionWithAssertingCS();
   b4728:	f7ff ffc0 	bl	b46ac <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
   b472c:	442f      	add	r7, r5
   b472e:	42bd      	cmp	r5, r7
   b4730:	d10a      	bne.n	b4748 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x30>
   b4732:	9b06      	ldr	r3, [sp, #24]
   b4734:	18e5      	adds	r5, r4, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b4736:	42ac      	cmp	r4, r5
   b4738:	d00c      	beq.n	b4754 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x3c>
    read_buffer[i] = transfer(sendvalue);
   b473a:	4641      	mov	r1, r8
   b473c:	4630      	mov	r0, r6
   b473e:	f7ff ff93 	bl	b4668 <_ZN18Adafruit_SPIDevice8transferEh>
   b4742:	f804 0b01 	strb.w	r0, [r4], #1
  for (size_t i = 0; i < read_len; i++) {
   b4746:	e7f6      	b.n	b4736 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x1e>
      transfer(write_buffer[i]);
   b4748:	f815 1b01 	ldrb.w	r1, [r5], #1
   b474c:	4630      	mov	r0, r6
   b474e:	f7ff ff8b 	bl	b4668 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < write_len; i++) {
   b4752:	e7ec      	b.n	b472e <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x16>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
   b4754:	4630      	mov	r0, r6
   b4756:	f7ff ffb3 	bl	b46c0 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>

  return true;
}
   b475a:	2001      	movs	r0, #1
   b475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4760 <_ZN15Adafruit_MPR121C1Ev>:
//#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

/*!
 *  @brief      Default constructor
 */
Adafruit_MPR121::Adafruit_MPR121() {}
   b4760:	2200      	movs	r2, #0
   b4762:	6002      	str	r2, [r0, #0]
   b4764:	4770      	bx	lr

000b4766 <_ZN15Adafruit_MPR12113readRegister8Eh>:
/*!
 *  @brief      Read the contents of an 8 bit device register.
 *  @param      reg the register address to read from
 *  @returns    the 8 bit value that was read.
 */
uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
   b4766:	b500      	push	{lr}
   b4768:	460a      	mov	r2, r1
   b476a:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register thereg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
   b476c:	2301      	movs	r3, #1
   b476e:	2100      	movs	r1, #0
   b4770:	e9cd 1300 	strd	r1, r3, [sp]
   b4774:	6801      	ldr	r1, [r0, #0]
   b4776:	a802      	add	r0, sp, #8
   b4778:	f7ff fd48 	bl	b420c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  return (thereg.read());
   b477c:	a802      	add	r0, sp, #8
   b477e:	f7ff fe00 	bl	b4382 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b4782:	b2c0      	uxtb	r0, r0
   b4784:	b009      	add	sp, #36	; 0x24
   b4786:	f85d fb04 	ldr.w	pc, [sp], #4

000b478a <_ZN15Adafruit_MPR12114readRegister16Eh>:
/*!
 *  @brief      Read the contents of a 16 bit device register.
 *  @param      reg the register address to read from
 *  @returns    the 16 bit value that was read.
 */
uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
   b478a:	b500      	push	{lr}
   b478c:	460a      	mov	r2, r1
   b478e:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register thereg =
      Adafruit_BusIO_Register(i2c_dev, reg, 2, LSBFIRST);
   b4790:	2300      	movs	r3, #0
   b4792:	2101      	movs	r1, #1
   b4794:	e9cd 3100 	strd	r3, r1, [sp]
   b4798:	2302      	movs	r3, #2
   b479a:	6801      	ldr	r1, [r0, #0]
   b479c:	a802      	add	r0, sp, #8
   b479e:	f7ff fd35 	bl	b420c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  return (thereg.read());
   b47a2:	a802      	add	r0, sp, #8
   b47a4:	f7ff fded 	bl	b4382 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b47a8:	b280      	uxth	r0, r0
   b47aa:	b009      	add	sp, #36	; 0x24
   b47ac:	f85d fb04 	ldr.w	pc, [sp], #4

000b47b0 <_ZN15Adafruit_MPR1217touchedEv>:
uint16_t Adafruit_MPR121::touched(void) {
   b47b0:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
   b47b2:	2100      	movs	r1, #0
   b47b4:	f7ff ffe9 	bl	b478a <_ZN15Adafruit_MPR12114readRegister16Eh>
}
   b47b8:	f3c0 000b 	ubfx	r0, r0, #0, #12
   b47bc:	bd08      	pop	{r3, pc}

000b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/*!
    @brief  Writes 8-bits to the specified destination register
    @param  reg the register address to write to
    @param  value the value to write
*/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b47be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // MPR121 must be put in Stop Mode to write to most registers
  bool stop_required = true;

  // first get the current set value of the MPR121_ECR register
  Adafruit_BusIO_Register ecr_reg =
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b47c2:	f04f 0801 	mov.w	r8, #1
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b47c6:	b08f      	sub	sp, #60	; 0x3c
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b47c8:	2400      	movs	r4, #0
   b47ca:	e9cd 4800 	strd	r4, r8, [sp]
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b47ce:	460d      	mov	r5, r1
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b47d0:	4643      	mov	r3, r8
   b47d2:	6801      	ldr	r1, [r0, #0]
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b47d4:	4606      	mov	r6, r0
   b47d6:	4691      	mov	r9, r2
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b47d8:	a802      	add	r0, sp, #8
   b47da:	225e      	movs	r2, #94	; 0x5e
   b47dc:	f7ff fd16 	bl	b420c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  uint8_t ecr_backup = ecr_reg.read();
   b47e0:	a802      	add	r0, sp, #8
   b47e2:	f7ff fdce 	bl	b4382 <_ZN23Adafruit_BusIO_Register4readEv>
  if ((reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A))) {
   b47e6:	2d5e      	cmp	r5, #94	; 0x5e
  uint8_t ecr_backup = ecr_reg.read();
   b47e8:	4607      	mov	r7, r0
  if ((reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A))) {
   b47ea:	d009      	beq.n	b4800 <_ZN15Adafruit_MPR12113writeRegisterEhh+0x42>
   b47ec:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
   b47f0:	2b07      	cmp	r3, #7
   b47f2:	d905      	bls.n	b4800 <_ZN15Adafruit_MPR12113writeRegisterEhh+0x42>
    stop_required = false;
  }

  if (stop_required) {
    // clear this register to set stop mode
    ecr_reg.write(0x00);
   b47f4:	4622      	mov	r2, r4
   b47f6:	4621      	mov	r1, r4
   b47f8:	a802      	add	r0, sp, #8
   b47fa:	f7ff fd62 	bl	b42c2 <_ZN23Adafruit_BusIO_Register5writeEmh>
  bool stop_required = true;
   b47fe:	4644      	mov	r4, r8
  }

  Adafruit_BusIO_Register the_reg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
   b4800:	f04f 0800 	mov.w	r8, #0
   b4804:	2301      	movs	r3, #1
   b4806:	6831      	ldr	r1, [r6, #0]
   b4808:	462a      	mov	r2, r5
   b480a:	e9cd 8300 	strd	r8, r3, [sp]
   b480e:	a808      	add	r0, sp, #32
   b4810:	f7ff fcfc 	bl	b420c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  the_reg.write(value);
   b4814:	4642      	mov	r2, r8
   b4816:	4649      	mov	r1, r9
   b4818:	a808      	add	r0, sp, #32
   b481a:	f7ff fd52 	bl	b42c2 <_ZN23Adafruit_BusIO_Register5writeEmh>

  if (stop_required) {
   b481e:	b124      	cbz	r4, b482a <_ZN15Adafruit_MPR12113writeRegisterEhh+0x6c>
    // write back the previous set ECR settings
    ecr_reg.write(ecr_backup);
   b4820:	4642      	mov	r2, r8
   b4822:	b2f9      	uxtb	r1, r7
   b4824:	a802      	add	r0, sp, #8
   b4826:	f7ff fd4c 	bl	b42c2 <_ZN23Adafruit_BusIO_Register5writeEmh>
  }
}
   b482a:	b00f      	add	sp, #60	; 0x3c
   b482c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4830 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
   b4830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4832:	4605      	mov	r5, r0
   b4834:	460f      	mov	r7, r1
   b4836:	4616      	mov	r6, r2
   b4838:	2441      	movs	r4, #65	; 0x41
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
   b483a:	4621      	mov	r1, r4
   b483c:	463a      	mov	r2, r7
   b483e:	4628      	mov	r0, r5
   b4840:	f7ff ffbd 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
   b4844:	1c61      	adds	r1, r4, #1
  for (uint8_t i = 0; i < 12; i++) {
   b4846:	3402      	adds	r4, #2
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
   b4848:	4632      	mov	r2, r6
   b484a:	b2c9      	uxtb	r1, r1
   b484c:	4628      	mov	r0, r5
  for (uint8_t i = 0; i < 12; i++) {
   b484e:	b2e4      	uxtb	r4, r4
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
   b4850:	f7ff ffb5 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  for (uint8_t i = 0; i < 12; i++) {
   b4854:	2c59      	cmp	r4, #89	; 0x59
   b4856:	d1f0      	bne.n	b483a <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
}
   b4858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b485a <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh>:
                            uint8_t touchThreshold, uint8_t releaseThreshold) {
   b485a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b485e:	4604      	mov	r4, r0
  if (i2c_dev) {
   b4860:	6800      	ldr	r0, [r0, #0]
                            uint8_t touchThreshold, uint8_t releaseThreshold) {
   b4862:	460f      	mov	r7, r1
   b4864:	4690      	mov	r8, r2
   b4866:	461e      	mov	r6, r3
  if (i2c_dev) {
   b4868:	b110      	cbz	r0, b4870 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x16>
    delete i2c_dev;
   b486a:	2110      	movs	r1, #16
   b486c:	f7ff fc1d 	bl	b40aa <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, theWire);
   b4870:	2010      	movs	r0, #16
   b4872:	f7ff fc16 	bl	b40a2 <_Znwj>
   b4876:	4605      	mov	r5, r0
   b4878:	b118      	cbz	r0, b4882 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x28>
   b487a:	4642      	mov	r2, r8
   b487c:	4639      	mov	r1, r7
   b487e:	f7ff fd9c 	bl	b43ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4882:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   b4884:	4628      	mov	r0, r5
   b4886:	2101      	movs	r1, #1
   b4888:	f7ff fdb3 	bl	b43f2 <_ZN18Adafruit_I2CDevice5beginEb>
   b488c:	4605      	mov	r5, r0
   b488e:	b918      	cbnz	r0, b4898 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x3e>
    return false;
   b4890:	2500      	movs	r5, #0
}
   b4892:	4628      	mov	r0, r5
   b4894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeRegister(MPR121_SOFTRESET, 0x63);
   b4898:	2263      	movs	r2, #99	; 0x63
   b489a:	2180      	movs	r1, #128	; 0x80
   b489c:	4620      	mov	r0, r4
   b489e:	f7ff ff8e 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
   b48a2:	2001      	movs	r0, #1
   b48a4:	f000 fa92 	bl	b4dcc <delay>
  writeRegister(MPR121_ECR, 0x0);
   b48a8:	2200      	movs	r2, #0
   b48aa:	215e      	movs	r1, #94	; 0x5e
   b48ac:	4620      	mov	r0, r4
   b48ae:	f7ff ff86 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  uint8_t c = readRegister8(MPR121_CONFIG2);
   b48b2:	215d      	movs	r1, #93	; 0x5d
   b48b4:	4620      	mov	r0, r4
   b48b6:	f7ff ff56 	bl	b4766 <_ZN15Adafruit_MPR12113readRegister8Eh>
  if (c != 0x24)
   b48ba:	2824      	cmp	r0, #36	; 0x24
   b48bc:	d1e8      	bne.n	b4890 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x36>
  setThresholds(touchThreshold, releaseThreshold);
   b48be:	f89d 2018 	ldrb.w	r2, [sp, #24]
   b48c2:	4631      	mov	r1, r6
   b48c4:	4620      	mov	r0, r4
   b48c6:	f7ff ffb3 	bl	b4830 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  writeRegister(MPR121_MHDR, 0x01);
   b48ca:	4620      	mov	r0, r4
   b48cc:	2201      	movs	r2, #1
   b48ce:	212b      	movs	r1, #43	; 0x2b
   b48d0:	f7ff ff75 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
   b48d4:	4620      	mov	r0, r4
   b48d6:	2201      	movs	r2, #1
   b48d8:	212c      	movs	r1, #44	; 0x2c
   b48da:	f7ff ff70 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
   b48de:	4620      	mov	r0, r4
   b48e0:	220e      	movs	r2, #14
   b48e2:	212d      	movs	r1, #45	; 0x2d
   b48e4:	f7ff ff6b 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
   b48e8:	4620      	mov	r0, r4
   b48ea:	2200      	movs	r2, #0
   b48ec:	212e      	movs	r1, #46	; 0x2e
   b48ee:	f7ff ff66 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_MHDF, 0x01);
   b48f2:	4620      	mov	r0, r4
   b48f4:	2201      	movs	r2, #1
   b48f6:	212f      	movs	r1, #47	; 0x2f
   b48f8:	f7ff ff61 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
   b48fc:	4620      	mov	r0, r4
   b48fe:	2205      	movs	r2, #5
   b4900:	2130      	movs	r1, #48	; 0x30
   b4902:	f7ff ff5c 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
   b4906:	4620      	mov	r0, r4
   b4908:	2201      	movs	r2, #1
   b490a:	2131      	movs	r1, #49	; 0x31
   b490c:	f7ff ff57 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
   b4910:	4620      	mov	r0, r4
   b4912:	2200      	movs	r2, #0
   b4914:	2132      	movs	r1, #50	; 0x32
   b4916:	f7ff ff52 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDT, 0x00);
   b491a:	4620      	mov	r0, r4
   b491c:	2200      	movs	r2, #0
   b491e:	2133      	movs	r1, #51	; 0x33
   b4920:	f7ff ff4d 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
   b4924:	4620      	mov	r0, r4
   b4926:	2200      	movs	r2, #0
   b4928:	2134      	movs	r1, #52	; 0x34
   b492a:	f7ff ff48 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
   b492e:	4620      	mov	r0, r4
   b4930:	2200      	movs	r2, #0
   b4932:	2135      	movs	r1, #53	; 0x35
   b4934:	f7ff ff43 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_DEBOUNCE, 0);
   b4938:	4620      	mov	r0, r4
   b493a:	2200      	movs	r2, #0
   b493c:	215b      	movs	r1, #91	; 0x5b
   b493e:	f7ff ff3e 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
   b4942:	4620      	mov	r0, r4
   b4944:	2210      	movs	r2, #16
   b4946:	215c      	movs	r1, #92	; 0x5c
   b4948:	f7ff ff39 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
   b494c:	4620      	mov	r0, r4
   b494e:	2220      	movs	r2, #32
   b4950:	215d      	movs	r1, #93	; 0x5d
   b4952:	f7ff ff34 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
   b4956:	228c      	movs	r2, #140	; 0x8c
   b4958:	215e      	movs	r1, #94	; 0x5e
   b495a:	4620      	mov	r0, r4
   b495c:	f7ff ff2f 	bl	b47be <_ZN15Adafruit_MPR12113writeRegisterEhh>
  return true;
   b4960:	e797      	b.n	b4892 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x38>
	...

000b4964 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <os_mutex_recursive_create+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030248 	.word	0x00030248

000b4974 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <HAL_RNG_GetRandomNumber+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	685b      	ldr	r3, [r3, #4]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030218 	.word	0x00030218

000b4984 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <HAL_Delay_Microseconds+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	68db      	ldr	r3, [r3, #12]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030218 	.word	0x00030218

000b4994 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	695b      	ldr	r3, [r3, #20]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030218 	.word	0x00030218

000b49a4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <hal_timer_millis+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030218 	.word	0x00030218

000b49b4 <hal_gpio_get_mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <hal_gpio_get_mode+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	68db      	ldr	r3, [r3, #12]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	0003022c 	.word	0x0003022c

000b49c4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <hal_gpio_write+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	691b      	ldr	r3, [r3, #16]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	0003022c 	.word	0x0003022c

000b49d4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <hal_i2c_begin+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	68db      	ldr	r3, [r3, #12]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030228 	.word	0x00030228

000b49e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <hal_i2c_begin_transmission+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	699b      	ldr	r3, [r3, #24]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030228 	.word	0x00030228

000b49f4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <hal_i2c_end_transmission+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	69db      	ldr	r3, [r3, #28]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030228 	.word	0x00030228

000b4a04 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <hal_i2c_write+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	6a1b      	ldr	r3, [r3, #32]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030228 	.word	0x00030228

000b4a14 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <hal_i2c_available+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030228 	.word	0x00030228

000b4a24 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <hal_i2c_read+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030228 	.word	0x00030228

000b4a34 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <hal_i2c_peek+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030228 	.word	0x00030228

000b4a44 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <hal_i2c_flush+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	00030228 	.word	0x00030228

000b4a54 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <hal_i2c_is_enabled+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030228 	.word	0x00030228

000b4a64 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <hal_i2c_init+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030228 	.word	0x00030228

000b4a74 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <hal_i2c_request_ex+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030228 	.word	0x00030228

000b4a84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <inet_inet_ntop+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	695b      	ldr	r3, [r3, #20]
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	00030264 	.word	0x00030264

000b4a94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <netdb_freeaddrinfo+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	689b      	ldr	r3, [r3, #8]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	00030268 	.word	0x00030268

000b4aa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <netdb_getaddrinfo+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	68db      	ldr	r3, [r3, #12]
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	00030268 	.word	0x00030268

000b4ab4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <hal_spi_init+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	69db      	ldr	r3, [r3, #28]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	00030230 	.word	0x00030230

000b4ac4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <hal_spi_is_enabled+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	6a1b      	ldr	r3, [r3, #32]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	00030230 	.word	0x00030230

000b4ad4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <hal_spi_info+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	00030230 	.word	0x00030230

000b4ae4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <hal_spi_transfer_dma+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	00030230 	.word	0x00030230

000b4af4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <hal_spi_transfer_dma_status+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	00030230 	.word	0x00030230

000b4b04 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <hal_spi_set_settings+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030230 	.word	0x00030230

000b4b14 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <hal_spi_acquire+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	00030230 	.word	0x00030230

000b4b24 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <hal_spi_release+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	00030230 	.word	0x00030230

000b4b34 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <hal_usart_write+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	68db      	ldr	r3, [r3, #12]
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	0003023c 	.word	0x0003023c

000b4b44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <hal_usart_available+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	691b      	ldr	r3, [r3, #16]
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	0003023c 	.word	0x0003023c

000b4b54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <hal_usart_read+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	695b      	ldr	r3, [r3, #20]
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	0003023c 	.word	0x0003023c

000b4b64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <hal_usart_peek+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	699b      	ldr	r3, [r3, #24]
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	0003023c 	.word	0x0003023c

000b4b74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <hal_usart_flush+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	69db      	ldr	r3, [r3, #28]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	0003023c 	.word	0x0003023c

000b4b84 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <hal_usart_is_enabled+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	6a1b      	ldr	r3, [r3, #32]
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	0003023c 	.word	0x0003023c

000b4b94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <hal_usart_available_data_for_write+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	0003023c 	.word	0x0003023c

000b4ba4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <hal_usart_init_ex+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	0003023c 	.word	0x0003023c

000b4bb4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <HAL_USB_USART_Init+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	681b      	ldr	r3, [r3, #0]
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	0003024c 	.word	0x0003024c

000b4bc4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <HAL_USB_USART_Begin+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	685b      	ldr	r3, [r3, #4]
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	0003024c 	.word	0x0003024c

000b4bd4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <HAL_USB_USART_Available_Data+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	691b      	ldr	r3, [r3, #16]
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	0003024c 	.word	0x0003024c

000b4be4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	695b      	ldr	r3, [r3, #20]
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	0003024c 	.word	0x0003024c

000b4bf4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <HAL_USB_USART_Receive_Data+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	699b      	ldr	r3, [r3, #24]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	0003024c 	.word	0x0003024c

000b4c04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <HAL_USB_USART_Send_Data+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	69db      	ldr	r3, [r3, #28]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	0003024c 	.word	0x0003024c

000b4c14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <HAL_USB_USART_Flush_Data+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	6a1b      	ldr	r3, [r3, #32]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	0003024c 	.word	0x0003024c

000b4c24 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <HAL_USB_USART_Is_Connected+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	0003024c 	.word	0x0003024c

000b4c34 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <set_system_mode+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	685b      	ldr	r3, [r3, #4]
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	00030220 	.word	0x00030220

000b4c44 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <system_delay_ms+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	695b      	ldr	r3, [r3, #20]
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	00030220 	.word	0x00030220

000b4c54 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <system_thread_set_state+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030220 	.word	0x00030220

000b4c64 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b03      	ldr	r3, [pc, #12]	; (b4c74 <system_ctrl_set_app_request_handler+0x10>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c6e:	9301      	str	r3, [sp, #4]
   b4c70:	bd08      	pop	{r3, pc}
   b4c72:	0000      	.short	0x0000
   b4c74:	00030220 	.word	0x00030220

000b4c78 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b03      	ldr	r3, [pc, #12]	; (b4c88 <system_ctrl_set_result+0x10>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c82:	9301      	str	r3, [sp, #4]
   b4c84:	bd08      	pop	{r3, pc}
   b4c86:	0000      	.short	0x0000
   b4c88:	00030220 	.word	0x00030220

000b4c8c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <spark_process+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	689b      	ldr	r3, [r3, #8]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030244 	.word	0x00030244

000b4c9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030244 	.word	0x00030244

000b4cac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <network_connect+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	685b      	ldr	r3, [r3, #4]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030240 	.word	0x00030240

000b4cbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <network_connecting+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	689b      	ldr	r3, [r3, #8]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030240 	.word	0x00030240

000b4ccc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <network_disconnect+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	68db      	ldr	r3, [r3, #12]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030240 	.word	0x00030240

000b4cdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <network_ready+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	691b      	ldr	r3, [r3, #16]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030240 	.word	0x00030240

000b4cec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <network_on+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	695b      	ldr	r3, [r3, #20]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030240 	.word	0x00030240

000b4cfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <network_off+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	699b      	ldr	r3, [r3, #24]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030240 	.word	0x00030240

000b4d0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <network_listen+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	69db      	ldr	r3, [r3, #28]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030240 	.word	0x00030240

000b4d1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <network_listening+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6a1b      	ldr	r3, [r3, #32]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030240 	.word	0x00030240

000b4d2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <network_set_listen_timeout+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030240 	.word	0x00030240

000b4d3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <network_get_listen_timeout+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030240 	.word	0x00030240

000b4d4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <network_is_on+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030240 	.word	0x00030240

000b4d5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <network_is_off+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030240 	.word	0x00030240

000b4d6c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <network_prefer+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030240 	.word	0x00030240

000b4d7c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <network_is_preferred+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030240 	.word	0x00030240

000b4d8c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <malloc+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	681b      	ldr	r3, [r3, #0]
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	0003021c 	.word	0x0003021c

000b4d9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <free+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	685b      	ldr	r3, [r3, #4]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	0003021c 	.word	0x0003021c

000b4dac <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <__assert_func+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	0003021c 	.word	0x0003021c

000b4dbc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <newlib_impure_ptr_callback+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	0003021c 	.word	0x0003021c

000b4dcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4dcc:	2100      	movs	r1, #0
   b4dce:	f7ff bf39 	b.w	b4c44 <system_delay_ms>
	...

000b4dd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4dd4:	4802      	ldr	r0, [pc, #8]	; (b4de0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4dd6:	2300      	movs	r3, #0
   b4dd8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4dda:	f7ff bdc3 	b.w	b4964 <os_mutex_recursive_create>
   b4dde:	bf00      	nop
   b4de0:	2003e6b0 	.word	0x2003e6b0

000b4de4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4de4:	2200      	movs	r2, #0
   b4de6:	6840      	ldr	r0, [r0, #4]
   b4de8:	4611      	mov	r1, r2
   b4dea:	f7ff bf97 	b.w	b4d1c <network_listening>

000b4dee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dee:	2200      	movs	r2, #0
   b4df0:	6840      	ldr	r0, [r0, #4]
   b4df2:	4611      	mov	r1, r2
   b4df4:	f7ff bfa2 	b.w	b4d3c <network_get_listen_timeout>

000b4df8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4df8:	6840      	ldr	r0, [r0, #4]
   b4dfa:	2200      	movs	r2, #0
   b4dfc:	f7ff bf96 	b.w	b4d2c <network_set_listen_timeout>

000b4e00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e00:	6840      	ldr	r0, [r0, #4]
   b4e02:	2200      	movs	r2, #0
   b4e04:	f081 0101 	eor.w	r1, r1, #1
   b4e08:	f7ff bf80 	b.w	b4d0c <network_listen>

000b4e0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e0c:	2300      	movs	r3, #0
   b4e0e:	6840      	ldr	r0, [r0, #4]
   b4e10:	461a      	mov	r2, r3
   b4e12:	4619      	mov	r1, r3
   b4e14:	f7ff bf72 	b.w	b4cfc <network_off>

000b4e18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e18:	2300      	movs	r3, #0
   b4e1a:	6840      	ldr	r0, [r0, #4]
   b4e1c:	461a      	mov	r2, r3
   b4e1e:	4619      	mov	r1, r3
   b4e20:	f7ff bf64 	b.w	b4cec <network_on>

000b4e24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e24:	2200      	movs	r2, #0
   b4e26:	6840      	ldr	r0, [r0, #4]
   b4e28:	4611      	mov	r1, r2
   b4e2a:	f7ff bf57 	b.w	b4cdc <network_ready>

000b4e2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e2e:	2200      	movs	r2, #0
   b4e30:	6840      	ldr	r0, [r0, #4]
   b4e32:	4611      	mov	r1, r2
   b4e34:	f7ff bf42 	b.w	b4cbc <network_connecting>

000b4e38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e38:	6840      	ldr	r0, [r0, #4]
   b4e3a:	2200      	movs	r2, #0
   b4e3c:	2102      	movs	r1, #2
   b4e3e:	f7ff bf45 	b.w	b4ccc <network_disconnect>

000b4e42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e42:	2300      	movs	r3, #0
   b4e44:	6840      	ldr	r0, [r0, #4]
   b4e46:	461a      	mov	r2, r3
   b4e48:	f7ff bf30 	b.w	b4cac <network_connect>

000b4e4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e4c:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e4e:	2203      	movs	r2, #3
   b4e50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e52:	4a02      	ldr	r2, [pc, #8]	; (b4e5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e56:	4770      	bx	lr
   b4e58:	2003e6b4 	.word	0x2003e6b4
   b4e5c:	000b5bd8 	.word	0x000b5bd8

000b4e60 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4e60:	4770      	bx	lr

000b4e62 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e64:	4606      	mov	r6, r0
   b4e66:	4615      	mov	r5, r2
   b4e68:	460c      	mov	r4, r1
   b4e6a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4e6c:	42bc      	cmp	r4, r7
   b4e6e:	d006      	beq.n	b4e7e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4e70:	6833      	ldr	r3, [r6, #0]
   b4e72:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4e76:	689b      	ldr	r3, [r3, #8]
   b4e78:	4630      	mov	r0, r6
   b4e7a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4e7c:	e7f6      	b.n	b4e6c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4e7e:	4628      	mov	r0, r5
   b4e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e82 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4e82:	7c00      	ldrb	r0, [r0, #16]
   b4e84:	2200      	movs	r2, #0
   b4e86:	f7ff bdbd 	b.w	b4a04 <hal_i2c_write>

000b4e8a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4e8a:	7c00      	ldrb	r0, [r0, #16]
   b4e8c:	2100      	movs	r1, #0
   b4e8e:	f7ff bdc1 	b.w	b4a14 <hal_i2c_available>

000b4e92 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4e92:	7c00      	ldrb	r0, [r0, #16]
   b4e94:	2100      	movs	r1, #0
   b4e96:	f7ff bdc5 	b.w	b4a24 <hal_i2c_read>

000b4e9a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4e9a:	7c00      	ldrb	r0, [r0, #16]
   b4e9c:	2100      	movs	r1, #0
   b4e9e:	f7ff bdc9 	b.w	b4a34 <hal_i2c_peek>

000b4ea2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4ea2:	7c00      	ldrb	r0, [r0, #16]
   b4ea4:	2100      	movs	r1, #0
   b4ea6:	f7ff bdcd 	b.w	b4a44 <hal_i2c_flush>

000b4eaa <_ZN7TwoWireD0Ev>:
   b4eaa:	b510      	push	{r4, lr}
   b4eac:	2114      	movs	r1, #20
   b4eae:	4604      	mov	r4, r0
   b4eb0:	f7ff f8fb 	bl	b40aa <_ZdlPvj>
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	bd10      	pop	{r4, pc}

000b4eb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4eb8:	b538      	push	{r3, r4, r5, lr}
   b4eba:	4604      	mov	r4, r0
   b4ebc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ec2:	2200      	movs	r2, #0
   b4ec4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4ec8:	4b09      	ldr	r3, [pc, #36]	; (b4ef0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4eca:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ecc:	4608      	mov	r0, r1
   b4ece:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4ed0:	4629      	mov	r1, r5
   b4ed2:	f7ff fdc7 	bl	b4a64 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4ed6:	30bf      	adds	r0, #191	; 0xbf
   b4ed8:	d108      	bne.n	b4eec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4eda:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4edc:	07db      	lsls	r3, r3, #31
   b4ede:	d505      	bpl.n	b4eec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4ee0:	6868      	ldr	r0, [r5, #4]
   b4ee2:	f7ff ff5b 	bl	b4d9c <free>
    free(conf.tx_buffer);
   b4ee6:	68e8      	ldr	r0, [r5, #12]
   b4ee8:	f7ff ff58 	bl	b4d9c <free>
}
   b4eec:	4620      	mov	r0, r4
   b4eee:	bd38      	pop	{r3, r4, r5, pc}
   b4ef0:	000b5c1c 	.word	0x000b5c1c

000b4ef4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4ef4:	2300      	movs	r3, #0
   b4ef6:	7c00      	ldrb	r0, [r0, #16]
   b4ef8:	461a      	mov	r2, r3
   b4efa:	4619      	mov	r1, r3
   b4efc:	f7ff bd6a 	b.w	b49d4 <hal_i2c_begin>

000b4f00 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4f02:	2200      	movs	r2, #0
   b4f04:	2318      	movs	r3, #24
   b4f06:	e9cd 2200 	strd	r2, r2, [sp]
   b4f0a:	f8ad 3000 	strh.w	r3, [sp]
    };
   b4f0e:	780b      	ldrb	r3, [r1, #0]
   b4f10:	f88d 3004 	strb.w	r3, [sp, #4]
   b4f14:	684b      	ldr	r3, [r1, #4]
   b4f16:	9302      	str	r3, [sp, #8]
   b4f18:	68cb      	ldr	r3, [r1, #12]
   b4f1a:	9303      	str	r3, [sp, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
   b4f1c:	7a0b      	ldrb	r3, [r1, #8]
   b4f1e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b4f20:	7c00      	ldrb	r0, [r0, #16]
    };
   b4f22:	690b      	ldr	r3, [r1, #16]
   b4f24:	9305      	str	r3, [sp, #20]
   b4f26:	4669      	mov	r1, sp
   b4f28:	f7ff fda4 	bl	b4a74 <hal_i2c_request_ex>
}
   b4f2c:	b007      	add	sp, #28
   b4f2e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f32 <_ZN7TwoWire11requestFromEhjh>:
{
   b4f32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
   b4f34:	f88d 1004 	strb.w	r1, [sp, #4]
   b4f38:	2100      	movs	r1, #0
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b4f3a:	1a5b      	subs	r3, r3, r1
   b4f3c:	f04f 0c64 	mov.w	ip, #100	; 0x64
   b4f40:	e9cd c104 	strd	ip, r1, [sp, #16]
   b4f44:	bf18      	it	ne
   b4f46:	2301      	movne	r3, #1
   b4f48:	a901      	add	r1, sp, #4
    size_ = size;
   b4f4a:	9202      	str	r2, [sp, #8]
   b4f4c:	f88d 300c 	strb.w	r3, [sp, #12]
   b4f50:	f7ff ffd6 	bl	b4f00 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4f54:	b007      	add	sp, #28
   b4f56:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f5a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4f5a:	7c00      	ldrb	r0, [r0, #16]
   b4f5c:	2200      	movs	r2, #0
   b4f5e:	f7ff bd41 	b.w	b49e4 <hal_i2c_begin_transmission>

000b4f62 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4f62:	7c00      	ldrb	r0, [r0, #16]
   b4f64:	2200      	movs	r2, #0
   b4f66:	f7ff bd45 	b.w	b49f4 <hal_i2c_end_transmission>

000b4f6a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4f6a:	2101      	movs	r1, #1
   b4f6c:	f7ff bff9 	b.w	b4f62 <_ZN7TwoWire15endTransmissionEh>

000b4f70 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
      : address_{address},
   b4f70:	4b05      	ldr	r3, [pc, #20]	; (b4f88 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
   b4f72:	21ff      	movs	r1, #255	; 0xff
   b4f74:	2200      	movs	r2, #0
   b4f76:	e9c3 1200 	strd	r1, r2, [r3]
   b4f7a:	2001      	movs	r0, #1
   b4f7c:	2164      	movs	r1, #100	; 0x64
   b4f7e:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b4f82:	611a      	str	r2, [r3, #16]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
   b4f84:	4770      	bx	lr
   b4f86:	bf00      	nop
   b4f88:	2003e6bc 	.word	0x2003e6bc

000b4f8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4f8c:	4770      	bx	lr

000b4f8e <_ZN9IPAddressD0Ev>:
   b4f8e:	b510      	push	{r4, lr}
   b4f90:	2118      	movs	r1, #24
   b4f92:	4604      	mov	r4, r0
   b4f94:	f7ff f889 	bl	b40aa <_ZdlPvj>
   b4f98:	4620      	mov	r0, r4
   b4f9a:	bd10      	pop	{r4, pc}

000b4f9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4f9e:	7d03      	ldrb	r3, [r0, #20]
   b4fa0:	2b06      	cmp	r3, #6
{
   b4fa2:	b08d      	sub	sp, #52	; 0x34
   b4fa4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fa6:	f100 0704 	add.w	r7, r0, #4
   b4faa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4fae:	d012      	beq.n	b4fd6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4fb0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4fb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4fb8:	220a      	movs	r2, #10
   b4fba:	4630      	mov	r0, r6
   b4fbc:	f000 f973 	bl	b52a6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4fc0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4fc2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4fc4:	d019      	beq.n	b4ffa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4fc6:	2c00      	cmp	r4, #0
   b4fc8:	d0f4      	beq.n	b4fb4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4fca:	212e      	movs	r1, #46	; 0x2e
   b4fcc:	4630      	mov	r0, r6
   b4fce:	f000 f951 	bl	b5274 <_ZN5Print5printEc>
   b4fd2:	4404      	add	r4, r0
   b4fd4:	e7ee      	b.n	b4fb4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fd6:	232f      	movs	r3, #47	; 0x2f
   b4fd8:	466a      	mov	r2, sp
   b4fda:	4639      	mov	r1, r7
   b4fdc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4fde:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fe2:	f7ff fd4f 	bl	b4a84 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4fe6:	4668      	mov	r0, sp
   b4fe8:	f7ff f818 	bl	b401c <strlen>
   b4fec:	6833      	ldr	r3, [r6, #0]
   b4fee:	4602      	mov	r2, r0
   b4ff0:	68db      	ldr	r3, [r3, #12]
   b4ff2:	4669      	mov	r1, sp
   b4ff4:	4630      	mov	r0, r6
   b4ff6:	4798      	blx	r3
   b4ff8:	4604      	mov	r4, r0
    }
    return n;
}
   b4ffa:	4620      	mov	r0, r4
   b4ffc:	b00d      	add	sp, #52	; 0x34
   b4ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5000 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5000:	b510      	push	{r4, lr}
   b5002:	4b05      	ldr	r3, [pc, #20]	; (b5018 <_ZN9IPAddressC1Ev+0x18>)
   b5004:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5006:	2211      	movs	r2, #17
   b5008:	f840 3b04 	str.w	r3, [r0], #4
   b500c:	2100      	movs	r1, #0
   b500e:	f000 fd01 	bl	b5a14 <memset>
}
   b5012:	4620      	mov	r0, r4
   b5014:	bd10      	pop	{r4, pc}
   b5016:	bf00      	nop
   b5018:	000b5c48 	.word	0x000b5c48

000b501c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b501c:	4603      	mov	r3, r0
   b501e:	4a07      	ldr	r2, [pc, #28]	; (b503c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5020:	b510      	push	{r4, lr}
   b5022:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5026:	f101 0210 	add.w	r2, r1, #16
   b502a:	f851 4b04 	ldr.w	r4, [r1], #4
   b502e:	f843 4b04 	str.w	r4, [r3], #4
   b5032:	4291      	cmp	r1, r2
   b5034:	d1f9      	bne.n	b502a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5036:	780a      	ldrb	r2, [r1, #0]
   b5038:	701a      	strb	r2, [r3, #0]
}
   b503a:	bd10      	pop	{r4, pc}
   b503c:	000b5c48 	.word	0x000b5c48

000b5040 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5040:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5042:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5046:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b504a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b504e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5052:	2304      	movs	r3, #4
   b5054:	6041      	str	r1, [r0, #4]
   b5056:	7503      	strb	r3, [r0, #20]
}
   b5058:	bd10      	pop	{r4, pc}
	...

000b505c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b505c:	b507      	push	{r0, r1, r2, lr}
   b505e:	4b06      	ldr	r3, [pc, #24]	; (b5078 <_ZN9IPAddressC1EPKh+0x1c>)
   b5060:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5062:	78cb      	ldrb	r3, [r1, #3]
   b5064:	9300      	str	r3, [sp, #0]
   b5066:	788b      	ldrb	r3, [r1, #2]
   b5068:	784a      	ldrb	r2, [r1, #1]
   b506a:	7809      	ldrb	r1, [r1, #0]
   b506c:	f7ff ffe8 	bl	b5040 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5070:	b003      	add	sp, #12
   b5072:	f85d fb04 	ldr.w	pc, [sp], #4
   b5076:	bf00      	nop
   b5078:	000b5c48 	.word	0x000b5c48

000b507c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b507c:	4b01      	ldr	r3, [pc, #4]	; (b5084 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b507e:	4a02      	ldr	r2, [pc, #8]	; (b5088 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5080:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5082:	4770      	bx	lr
   b5084:	2003e6d0 	.word	0x2003e6d0
   b5088:	000b5c54 	.word	0x000b5c54

000b508c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b508c:	2300      	movs	r3, #0
   b508e:	6840      	ldr	r0, [r0, #4]
   b5090:	461a      	mov	r2, r3
   b5092:	f7ff be0b 	b.w	b4cac <network_connect>

000b5096 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5096:	6840      	ldr	r0, [r0, #4]
   b5098:	2200      	movs	r2, #0
   b509a:	2102      	movs	r1, #2
   b509c:	f7ff be16 	b.w	b4ccc <network_disconnect>

000b50a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b50a0:	2200      	movs	r2, #0
   b50a2:	6840      	ldr	r0, [r0, #4]
   b50a4:	4611      	mov	r1, r2
   b50a6:	f7ff be09 	b.w	b4cbc <network_connecting>

000b50aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b50aa:	2200      	movs	r2, #0
   b50ac:	6840      	ldr	r0, [r0, #4]
   b50ae:	4611      	mov	r1, r2
   b50b0:	f7ff be14 	b.w	b4cdc <network_ready>

000b50b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b50b4:	2300      	movs	r3, #0
   b50b6:	6840      	ldr	r0, [r0, #4]
   b50b8:	461a      	mov	r2, r3
   b50ba:	4619      	mov	r1, r3
   b50bc:	f7ff be16 	b.w	b4cec <network_on>

000b50c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b50c0:	2300      	movs	r3, #0
   b50c2:	6840      	ldr	r0, [r0, #4]
   b50c4:	461a      	mov	r2, r3
   b50c6:	4619      	mov	r1, r3
   b50c8:	f7ff be18 	b.w	b4cfc <network_off>

000b50cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b50cc:	6840      	ldr	r0, [r0, #4]
   b50ce:	2100      	movs	r1, #0
   b50d0:	f7ff be3c 	b.w	b4d4c <network_is_on>

000b50d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b50d4:	6840      	ldr	r0, [r0, #4]
   b50d6:	2100      	movs	r1, #0
   b50d8:	f7ff be40 	b.w	b4d5c <network_is_off>

000b50dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b50dc:	6840      	ldr	r0, [r0, #4]
   b50de:	2200      	movs	r2, #0
   b50e0:	f081 0101 	eor.w	r1, r1, #1
   b50e4:	f7ff be12 	b.w	b4d0c <network_listen>

000b50e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	2200      	movs	r2, #0
   b50ec:	f7ff be1e 	b.w	b4d2c <network_set_listen_timeout>

000b50f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b50f0:	2200      	movs	r2, #0
   b50f2:	6840      	ldr	r0, [r0, #4]
   b50f4:	4611      	mov	r1, r2
   b50f6:	f7ff be21 	b.w	b4d3c <network_get_listen_timeout>

000b50fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b50fa:	2200      	movs	r2, #0
   b50fc:	6840      	ldr	r0, [r0, #4]
   b50fe:	4611      	mov	r1, r2
   b5100:	f7ff be0c 	b.w	b4d1c <network_listening>

000b5104 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5104:	6840      	ldr	r0, [r0, #4]
   b5106:	2100      	movs	r1, #0
   b5108:	f7ff be38 	b.w	b4d7c <network_is_preferred>

000b510c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b510c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5110:	b095      	sub	sp, #84	; 0x54
   b5112:	4614      	mov	r4, r2
   b5114:	460d      	mov	r5, r1
   b5116:	4607      	mov	r7, r0
    IPAddress addr;
   b5118:	f7ff ff72 	bl	b5000 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b511c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b511e:	221c      	movs	r2, #28
   b5120:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5122:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5124:	f000 fc76 	bl	b5a14 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5128:	2340      	movs	r3, #64	; 0x40
   b512a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b512c:	4620      	mov	r0, r4
   b512e:	466b      	mov	r3, sp
   b5130:	aa0c      	add	r2, sp, #48	; 0x30
   b5132:	2100      	movs	r1, #0
   b5134:	f7ff fcb6 	bl	b4aa4 <netdb_getaddrinfo>
    if (!r) {
   b5138:	4604      	mov	r4, r0
   b513a:	2800      	cmp	r0, #0
   b513c:	d14b      	bne.n	b51d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b513e:	4602      	mov	r2, r0
   b5140:	2101      	movs	r1, #1
   b5142:	6868      	ldr	r0, [r5, #4]
   b5144:	f7ff fdca 	bl	b4cdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5148:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b514a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b514c:	4622      	mov	r2, r4
   b514e:	6868      	ldr	r0, [r5, #4]
   b5150:	f7ff fdc4 	bl	b4cdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5154:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5156:	4681      	mov	r9, r0
        bool ok = false;
   b5158:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b515a:	2e00      	cmp	r6, #0
   b515c:	d03b      	beq.n	b51d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b515e:	2900      	cmp	r1, #0
   b5160:	d139      	bne.n	b51d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5162:	6873      	ldr	r3, [r6, #4]
   b5164:	2b02      	cmp	r3, #2
   b5166:	d003      	beq.n	b5170 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5168:	2b0a      	cmp	r3, #10
   b516a:	d011      	beq.n	b5190 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b516c:	69f6      	ldr	r6, [r6, #28]
   b516e:	e7f4      	b.n	b515a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5170:	f1b8 0f00 	cmp.w	r8, #0
   b5174:	d0fa      	beq.n	b516c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5176:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5178:	a806      	add	r0, sp, #24
   b517a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b517c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b517e:	f7ff ff6d 	bl	b505c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5184:	1d3c      	adds	r4, r7, #4
   b5186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5188:	682b      	ldr	r3, [r5, #0]
   b518a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b518c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b518e:	e7ed      	b.n	b516c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5190:	f1b9 0f00 	cmp.w	r9, #0
   b5194:	d0ea      	beq.n	b516c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5196:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5198:	2210      	movs	r2, #16
   b519a:	a801      	add	r0, sp, #4
   b519c:	f000 fc3a 	bl	b5a14 <memset>
                    a.v = 6;
   b51a0:	2306      	movs	r3, #6
   b51a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51a6:	ad01      	add	r5, sp, #4
   b51a8:	f104 0308 	add.w	r3, r4, #8
   b51ac:	3418      	adds	r4, #24
   b51ae:	6818      	ldr	r0, [r3, #0]
   b51b0:	6859      	ldr	r1, [r3, #4]
   b51b2:	462a      	mov	r2, r5
   b51b4:	c203      	stmia	r2!, {r0, r1}
   b51b6:	3308      	adds	r3, #8
   b51b8:	42a3      	cmp	r3, r4
   b51ba:	4615      	mov	r5, r2
   b51bc:	d1f7      	bne.n	b51ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b51be:	a901      	add	r1, sp, #4
   b51c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b51c2:	ad07      	add	r5, sp, #28
   b51c4:	f7ff ff2a 	bl	b501c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b51c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51ca:	1d3c      	adds	r4, r7, #4
   b51cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51ce:	682b      	ldr	r3, [r5, #0]
   b51d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51d2:	4649      	mov	r1, r9
   b51d4:	e7ca      	b.n	b516c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b51d6:	9800      	ldr	r0, [sp, #0]
   b51d8:	f7ff fc5c 	bl	b4a94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b51dc:	4638      	mov	r0, r7
   b51de:	b015      	add	sp, #84	; 0x54
   b51e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b51e4 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b51e4:	3803      	subs	r0, #3
   b51e6:	2802      	cmp	r0, #2
   b51e8:	bf9a      	itte	ls
   b51ea:	4b02      	ldrls	r3, [pc, #8]	; (b51f4 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b51ec:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b51f0:	4801      	ldrhi	r0, [pc, #4]	; (b51f8 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b51f2:	4770      	bx	lr
   b51f4:	000b5c58 	.word	0x000b5c58
   b51f8:	2003e6d4 	.word	0x2003e6d4

000b51fc <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b51fc:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b51fe:	2200      	movs	r2, #0
   b5200:	6840      	ldr	r0, [r0, #4]
   b5202:	f7ff fdb3 	bl	b4d6c <network_prefer>
}
   b5206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b520a:	f7ff bfeb 	b.w	b51e4 <_ZN5spark12NetworkClass4fromEm>
	...

000b5210 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5210:	4b02      	ldr	r3, [pc, #8]	; (b521c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5212:	4a03      	ldr	r2, [pc, #12]	; (b5220 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5214:	601a      	str	r2, [r3, #0]
   b5216:	2200      	movs	r2, #0
   b5218:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b521a:	4770      	bx	lr
   b521c:	2003e6d4 	.word	0x2003e6d4
   b5220:	000b5c6c 	.word	0x000b5c6c

000b5224 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5226:	4606      	mov	r6, r0
   b5228:	460d      	mov	r5, r1
  size_t n = 0;
   b522a:	188f      	adds	r7, r1, r2
   b522c:	2400      	movs	r4, #0
  while (size--) {
   b522e:	42bd      	cmp	r5, r7
   b5230:	d00c      	beq.n	b524c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5232:	6833      	ldr	r3, [r6, #0]
   b5234:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5238:	689b      	ldr	r3, [r3, #8]
   b523a:	4630      	mov	r0, r6
   b523c:	4798      	blx	r3
     if (chunk>=0)
   b523e:	1e03      	subs	r3, r0, #0
   b5240:	db01      	blt.n	b5246 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5242:	441c      	add	r4, r3
  while (size--) {
   b5244:	e7f3      	b.n	b522e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5246:	2c00      	cmp	r4, #0
   b5248:	bf08      	it	eq
   b524a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b524c:	4620      	mov	r0, r4
   b524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5250 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5250:	b513      	push	{r0, r1, r4, lr}
   b5252:	4604      	mov	r4, r0
    }
   b5254:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5256:	b159      	cbz	r1, b5270 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5258:	9101      	str	r1, [sp, #4]
   b525a:	f7fe fedf 	bl	b401c <strlen>
   b525e:	6823      	ldr	r3, [r4, #0]
   b5260:	9901      	ldr	r1, [sp, #4]
   b5262:	68db      	ldr	r3, [r3, #12]
   b5264:	4602      	mov	r2, r0
   b5266:	4620      	mov	r0, r4
    }
   b5268:	b002      	add	sp, #8
   b526a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b526e:	4718      	bx	r3
    }
   b5270:	b002      	add	sp, #8
   b5272:	bd10      	pop	{r4, pc}

000b5274 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5274:	6803      	ldr	r3, [r0, #0]
   b5276:	689b      	ldr	r3, [r3, #8]
   b5278:	4718      	bx	r3

000b527a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b527a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b527c:	210d      	movs	r1, #13
{
   b527e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5280:	f7ff fff8 	bl	b5274 <_ZN5Print5printEc>
  n += print('\n');
   b5284:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5286:	4604      	mov	r4, r0
  n += print('\n');
   b5288:	4628      	mov	r0, r5
   b528a:	f7ff fff3 	bl	b5274 <_ZN5Print5printEc>
  return n;
}
   b528e:	4420      	add	r0, r4
   b5290:	bd38      	pop	{r3, r4, r5, pc}

000b5292 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5292:	b538      	push	{r3, r4, r5, lr}
   b5294:	4605      	mov	r5, r0
  return write(str);
   b5296:	f7ff ffdb 	bl	b5250 <_ZN5Print5writeEPKc>
   b529a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b529c:	4628      	mov	r0, r5
   b529e:	f7ff ffec 	bl	b527a <_ZN5Print7printlnEv>
  return n;
}
   b52a2:	4420      	add	r0, r4
   b52a4:	bd38      	pop	{r3, r4, r5, pc}

000b52a6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b52a6:	b530      	push	{r4, r5, lr}
   b52a8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b52aa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b52ac:	2a01      	cmp	r2, #1
  *str = '\0';
   b52ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b52b2:	bf98      	it	ls
   b52b4:	220a      	movls	r2, #10
   b52b6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b52b8:	460d      	mov	r5, r1
   b52ba:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b52be:	fb01 5312 	mls	r3, r1, r2, r5
   b52c2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b52c6:	2b09      	cmp	r3, #9
   b52c8:	bf94      	ite	ls
   b52ca:	3330      	addls	r3, #48	; 0x30
   b52cc:	3337      	addhi	r3, #55	; 0x37
   b52ce:	b2db      	uxtb	r3, r3
  } while(n);
   b52d0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b52d2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b52d6:	d9ef      	bls.n	b52b8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b52d8:	4621      	mov	r1, r4
   b52da:	f7ff ffb9 	bl	b5250 <_ZN5Print5writeEPKc>
}
   b52de:	b00b      	add	sp, #44	; 0x2c
   b52e0:	bd30      	pop	{r4, r5, pc}
	...

000b52e4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b52e4:	4b01      	ldr	r3, [pc, #4]	; (b52ec <_GLOBAL__sub_I_RGB+0x8>)
   b52e6:	2200      	movs	r2, #0
   b52e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b52ea:	4770      	bx	lr
   b52ec:	2003e6dc 	.word	0x2003e6dc

000b52f0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b52f0:	2100      	movs	r1, #0
   b52f2:	f7ff bc17 	b.w	b4b24 <hal_spi_release>

000b52f6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b52f6:	2100      	movs	r1, #0
   b52f8:	f7ff bc0c 	b.w	b4b14 <hal_spi_acquire>

000b52fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b52fc:	b510      	push	{r4, lr}
   b52fe:	4604      	mov	r4, r0
   b5300:	4608      	mov	r0, r1
{
    _spi = spi;
   b5302:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5304:	f7ff fbd6 	bl	b4ab4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5308:	2300      	movs	r3, #0
   b530a:	6063      	str	r3, [r4, #4]
}
   b530c:	4620      	mov	r0, r4
   b530e:	bd10      	pop	{r4, pc}

000b5310 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5310:	7800      	ldrb	r0, [r0, #0]
   b5312:	f7ff bfed 	b.w	b52f0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5318 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5318:	0840      	lsrs	r0, r0, #1
{
   b531a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b531c:	6018      	str	r0, [r3, #0]
   b531e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5320:	6818      	ldr	r0, [r3, #0]
   b5322:	4288      	cmp	r0, r1
   b5324:	b2e5      	uxtb	r5, r4
   b5326:	d906      	bls.n	b5336 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5328:	3401      	adds	r4, #1
   b532a:	2c08      	cmp	r4, #8
   b532c:	d002      	beq.n	b5334 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b532e:	0840      	lsrs	r0, r0, #1
   b5330:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5332:	e7f5      	b.n	b5320 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5334:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5338:	5d5b      	ldrb	r3, [r3, r5]
   b533a:	7013      	strb	r3, [r2, #0]
}
   b533c:	bd30      	pop	{r4, r5, pc}
   b533e:	bf00      	nop
   b5340:	000b5ca8 	.word	0x000b5ca8

000b5344 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5348:	4606      	mov	r6, r0
   b534a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b534c:	7800      	ldrb	r0, [r0, #0]
{
   b534e:	460c      	mov	r4, r1
    CHECK(lock());
   b5350:	f7ff ffd1 	bl	b52f6 <_ZN8SPIClass4lockEv.isra.0>
   b5354:	2800      	cmp	r0, #0
   b5356:	db1b      	blt.n	b5390 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5358:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b535a:	2214      	movs	r2, #20
   b535c:	2100      	movs	r1, #0
   b535e:	a809      	add	r0, sp, #36	; 0x24
   b5360:	f000 fb58 	bl	b5a14 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5364:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5366:	2200      	movs	r2, #0
   b5368:	a909      	add	r1, sp, #36	; 0x24
   b536a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b536c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5370:	f7ff fbb0 	bl	b4ad4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5374:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5378:	b113      	cbz	r3, b5380 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b537a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b537e:	b155      	cbz	r5, b5396 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5380:	2700      	movs	r7, #0
   b5382:	46b9      	mov	r9, r7
   b5384:	46b8      	mov	r8, r7
   b5386:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5388:	7923      	ldrb	r3, [r4, #4]
   b538a:	b15d      	cbz	r5, b53a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b538c:	b1c3      	cbz	r3, b53c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b538e:	2000      	movs	r0, #0
}
   b5390:	b00f      	add	sp, #60	; 0x3c
   b5392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5396:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b539a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b539e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b53a2:	e7f1      	b.n	b5388 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b53a4:	2b00      	cmp	r3, #0
   b53a6:	d135      	bne.n	b5414 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b53a8:	68a3      	ldr	r3, [r4, #8]
   b53aa:	4543      	cmp	r3, r8
   b53ac:	d108      	bne.n	b53c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b53ae:	f88d 9020 	strb.w	r9, [sp, #32]
   b53b2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b53b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b53ba:	89a3      	ldrh	r3, [r4, #12]
   b53bc:	429a      	cmp	r2, r3
   b53be:	d0e6      	beq.n	b538e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b53c0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b53c2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b53c4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b53c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b53ca:	ab04      	add	r3, sp, #16
   b53cc:	f10d 020f 	add.w	r2, sp, #15
   b53d0:	f7ff ffa2 	bl	b5318 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b53d4:	7921      	ldrb	r1, [r4, #4]
   b53d6:	b985      	cbnz	r5, b53fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b53d8:	b989      	cbnz	r1, b53fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b53da:	68a3      	ldr	r3, [r4, #8]
   b53dc:	4543      	cmp	r3, r8
   b53de:	d30e      	bcc.n	b53fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b53e0:	f88d 9020 	strb.w	r9, [sp, #32]
   b53e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b53e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b53ec:	89a3      	ldrh	r3, [r4, #12]
   b53ee:	429a      	cmp	r2, r3
   b53f0:	d105      	bne.n	b53fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b53f2:	9b04      	ldr	r3, [sp, #16]
   b53f4:	4543      	cmp	r3, r8
   b53f6:	d102      	bne.n	b53fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b53f8:	e7c9      	b.n	b538e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b53fa:	2900      	cmp	r1, #0
   b53fc:	d1f9      	bne.n	b53f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b53fe:	2300      	movs	r3, #0
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	7b63      	ldrb	r3, [r4, #13]
   b5404:	9300      	str	r3, [sp, #0]
   b5406:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b540a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b540c:	7830      	ldrb	r0, [r6, #0]
   b540e:	f7ff fb79 	bl	b4b04 <hal_spi_set_settings>
   b5412:	e7bc      	b.n	b538e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5414:	e9cd 5500 	strd	r5, r5, [sp]
   b5418:	462b      	mov	r3, r5
   b541a:	462a      	mov	r2, r5
   b541c:	2101      	movs	r1, #1
   b541e:	e7f5      	b.n	b540c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5420 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b5420:	b530      	push	{r4, r5, lr}
   b5422:	b087      	sub	sp, #28
   b5424:	4604      	mov	r4, r0
   b5426:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b5428:	9500      	str	r5, [sp, #0]
   b542a:	7800      	ldrb	r0, [r0, #0]
   b542c:	f7ff fb5a 	bl	b4ae4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b5430:	b93d      	cbnz	r5, b5442 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b5432:	7820      	ldrb	r0, [r4, #0]
   b5434:	a902      	add	r1, sp, #8
   b5436:	f7ff fb5d 	bl	b4af4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b543a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b543e:	07db      	lsls	r3, r3, #31
   b5440:	d4f7      	bmi.n	b5432 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b5442:	b007      	add	sp, #28
   b5444:	bd30      	pop	{r4, r5, pc}

000b5446 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5446:	b510      	push	{r4, lr}
   b5448:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b544a:	f7ff faa3 	bl	b4994 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b544e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5450:	6823      	ldr	r3, [r4, #0]
   b5452:	4620      	mov	r0, r4
   b5454:	695b      	ldr	r3, [r3, #20]
   b5456:	4798      	blx	r3
    if (c >= 0) return c;
   b5458:	2800      	cmp	r0, #0
   b545a:	da08      	bge.n	b546e <_ZN6Stream9timedReadEv+0x28>
   b545c:	f7ff fa9a 	bl	b4994 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5460:	68e3      	ldr	r3, [r4, #12]
   b5462:	1ac0      	subs	r0, r0, r3
   b5464:	68a3      	ldr	r3, [r4, #8]
   b5466:	4298      	cmp	r0, r3
   b5468:	d3f2      	bcc.n	b5450 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b546a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b546e:	bd10      	pop	{r4, pc}

000b5470 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5474:	4607      	mov	r7, r0
   b5476:	460c      	mov	r4, r1
   b5478:	188e      	adds	r6, r1, r2
   b547a:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b547c:	42b5      	cmp	r5, r6
   b547e:	eba5 0804 	sub.w	r8, r5, r4
   b5482:	d007      	beq.n	b5494 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b5484:	4638      	mov	r0, r7
   b5486:	f7ff ffde 	bl	b5446 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b548a:	1e03      	subs	r3, r0, #0
   b548c:	db02      	blt.n	b5494 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b548e:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b5492:	e7f3      	b.n	b547c <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b5494:	4640      	mov	r0, r8
   b5496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b549c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b549c:	4b05      	ldr	r3, [pc, #20]	; (b54b4 <_GLOBAL__sub_I_System+0x18>)
   b549e:	2202      	movs	r2, #2
   b54a0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b54a2:	4b05      	ldr	r3, [pc, #20]	; (b54b8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b54a4:	4a05      	ldr	r2, [pc, #20]	; (b54bc <_GLOBAL__sub_I_System+0x20>)
   b54a6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b54a8:	2000      	movs	r0, #0
   b54aa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b54ae:	f7ff bbc1 	b.w	b4c34 <set_system_mode>
   b54b2:	bf00      	nop
   b54b4:	2003e6f8 	.word	0x2003e6f8
   b54b8:	2003e6ec 	.word	0x2003e6ec
   b54bc:	ffff0000 	.word	0xffff0000

000b54c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b54c0:	4b02      	ldr	r3, [pc, #8]	; (b54cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b54c2:	681a      	ldr	r2, [r3, #0]
   b54c4:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b54c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b54c8:	4770      	bx	lr
   b54ca:	bf00      	nop
   b54cc:	2003e630 	.word	0x2003e630
   b54d0:	2003e6fc 	.word	0x2003e6fc

000b54d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b54d4:	4770      	bx	lr

000b54d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54d6:	7441      	strb	r1, [r0, #17]
}
   b54d8:	4770      	bx	lr

000b54da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b54da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b54dc:	7c00      	ldrb	r0, [r0, #16]
   b54de:	f7ff fb59 	bl	b4b94 <hal_usart_available_data_for_write>
}
   b54e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54e6:	bd08      	pop	{r3, pc}

000b54e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b54e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b54ea:	7c00      	ldrb	r0, [r0, #16]
   b54ec:	f7ff fb2a 	bl	b4b44 <hal_usart_available>
}
   b54f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54f4:	bd08      	pop	{r3, pc}

000b54f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b54f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b54f8:	7c00      	ldrb	r0, [r0, #16]
   b54fa:	f7ff fb33 	bl	b4b64 <hal_usart_peek>
}
   b54fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5502:	bd08      	pop	{r3, pc}

000b5504 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5504:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5506:	7c00      	ldrb	r0, [r0, #16]
   b5508:	f7ff fb24 	bl	b4b54 <hal_usart_read>
}
   b550c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5510:	bd08      	pop	{r3, pc}

000b5512 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5512:	7c00      	ldrb	r0, [r0, #16]
   b5514:	f7ff bb2e 	b.w	b4b74 <hal_usart_flush>

000b5518 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5518:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b551a:	7c45      	ldrb	r5, [r0, #17]
{
   b551c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b551e:	b12d      	cbz	r5, b552c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5520:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5522:	b003      	add	sp, #12
   b5524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5528:	f7ff bb04 	b.w	b4b34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b552c:	7c00      	ldrb	r0, [r0, #16]
   b552e:	9101      	str	r1, [sp, #4]
   b5530:	f7ff fb30 	bl	b4b94 <hal_usart_available_data_for_write>
   b5534:	2800      	cmp	r0, #0
   b5536:	9901      	ldr	r1, [sp, #4]
   b5538:	dcf2      	bgt.n	b5520 <_ZN11USARTSerial5writeEh+0x8>
}
   b553a:	4628      	mov	r0, r5
   b553c:	b003      	add	sp, #12
   b553e:	bd30      	pop	{r4, r5, pc}

000b5540 <_ZN11USARTSerialD0Ev>:
   b5540:	b510      	push	{r4, lr}
   b5542:	2114      	movs	r1, #20
   b5544:	4604      	mov	r4, r0
   b5546:	f7fe fdb0 	bl	b40aa <_ZdlPvj>
   b554a:	4620      	mov	r0, r4
   b554c:	bd10      	pop	{r4, pc}
	...

000b5550 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5550:	b510      	push	{r4, lr}
   b5552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5556:	4604      	mov	r4, r0
   b5558:	4608      	mov	r0, r1
   b555a:	4611      	mov	r1, r2
   b555c:	2200      	movs	r2, #0
   b555e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5562:	4b04      	ldr	r3, [pc, #16]	; (b5574 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5564:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5566:	2301      	movs	r3, #1
  _serial = serial;
   b5568:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b556a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b556c:	f7ff fb1a 	bl	b4ba4 <hal_usart_init_ex>
}
   b5570:	4620      	mov	r0, r4
   b5572:	bd10      	pop	{r4, pc}
   b5574:	000b5cd4 	.word	0x000b5cd4

000b5578 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5578:	7441      	strb	r1, [r0, #17]
}
   b557a:	4770      	bx	lr

000b557c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b557c:	4770      	bx	lr

000b557e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b557e:	4770      	bx	lr

000b5580 <_ZN9USBSerial4readEv>:
{
   b5580:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5582:	2100      	movs	r1, #0
   b5584:	7c00      	ldrb	r0, [r0, #16]
   b5586:	f7ff fb35 	bl	b4bf4 <HAL_USB_USART_Receive_Data>
}
   b558a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b558e:	bd08      	pop	{r3, pc}

000b5590 <_ZN9USBSerial4peekEv>:
{
   b5590:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5592:	2101      	movs	r1, #1
   b5594:	7c00      	ldrb	r0, [r0, #16]
   b5596:	f7ff fb2d 	bl	b4bf4 <HAL_USB_USART_Receive_Data>
}
   b559a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b559e:	bd08      	pop	{r3, pc}

000b55a0 <_ZN9USBSerial17availableForWriteEv>:
{
   b55a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b55a2:	7c00      	ldrb	r0, [r0, #16]
   b55a4:	f7ff fb1e 	bl	b4be4 <HAL_USB_USART_Available_Data_For_Write>
}
   b55a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55ac:	bd08      	pop	{r3, pc}

000b55ae <_ZN9USBSerial9availableEv>:
{
   b55ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b55b0:	7c00      	ldrb	r0, [r0, #16]
   b55b2:	f7ff fb0f 	bl	b4bd4 <HAL_USB_USART_Available_Data>
}
   b55b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55ba:	bd08      	pop	{r3, pc}

000b55bc <_ZN9USBSerial5writeEh>:
{
   b55bc:	b513      	push	{r0, r1, r4, lr}
   b55be:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b55c0:	7c00      	ldrb	r0, [r0, #16]
{
   b55c2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b55c4:	f7ff fb0e 	bl	b4be4 <HAL_USB_USART_Available_Data_For_Write>
   b55c8:	2800      	cmp	r0, #0
   b55ca:	9901      	ldr	r1, [sp, #4]
   b55cc:	dc01      	bgt.n	b55d2 <_ZN9USBSerial5writeEh+0x16>
   b55ce:	7c60      	ldrb	r0, [r4, #17]
   b55d0:	b120      	cbz	r0, b55dc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b55d2:	7c20      	ldrb	r0, [r4, #16]
   b55d4:	f7ff fb16 	bl	b4c04 <HAL_USB_USART_Send_Data>
   b55d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b55dc:	b002      	add	sp, #8
   b55de:	bd10      	pop	{r4, pc}

000b55e0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b55e0:	7c00      	ldrb	r0, [r0, #16]
   b55e2:	f7ff bb17 	b.w	b4c14 <HAL_USB_USART_Flush_Data>

000b55e6 <_ZN9USBSerialD0Ev>:
   b55e6:	b510      	push	{r4, lr}
   b55e8:	2114      	movs	r1, #20
   b55ea:	4604      	mov	r4, r0
   b55ec:	f7fe fd5d 	bl	b40aa <_ZdlPvj>
   b55f0:	4620      	mov	r0, r4
   b55f2:	bd10      	pop	{r4, pc}

000b55f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b55f4:	b510      	push	{r4, lr}
   b55f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b55fa:	4604      	mov	r4, r0
   b55fc:	4608      	mov	r0, r1
   b55fe:	2100      	movs	r1, #0
   b5600:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5604:	4b04      	ldr	r3, [pc, #16]	; (b5618 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5606:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5608:	2301      	movs	r3, #1
  _serial = serial;
   b560a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b560c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b560e:	4611      	mov	r1, r2
   b5610:	f7ff fad0 	bl	b4bb4 <HAL_USB_USART_Init>
}
   b5614:	4620      	mov	r0, r4
   b5616:	bd10      	pop	{r4, pc}
   b5618:	000b5d08 	.word	0x000b5d08

000b561c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b561c:	7c00      	ldrb	r0, [r0, #16]
   b561e:	2200      	movs	r2, #0
   b5620:	f7ff bad0 	b.w	b4bc4 <HAL_USB_USART_Begin>

000b5624 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5624:	7c00      	ldrb	r0, [r0, #16]
   b5626:	f7ff bafd 	b.w	b4c24 <HAL_USB_USART_Is_Connected>

000b562a <_Z19acquireSerialBufferv>:
{
   b562a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b562c:	2214      	movs	r2, #20
{
   b562e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5630:	2100      	movs	r1, #0
   b5632:	f000 f9ef 	bl	b5a14 <memset>
}
   b5636:	4620      	mov	r0, r4
   b5638:	bd10      	pop	{r4, pc}
	...

000b563c <_Z16_fetch_usbserialv>:
{
   b563c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b563e:	4c0f      	ldr	r4, [pc, #60]	; (b567c <_Z16_fetch_usbserialv+0x40>)
{
   b5640:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5642:	a803      	add	r0, sp, #12
   b5644:	f7ff fff1 	bl	b562a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5648:	7821      	ldrb	r1, [r4, #0]
   b564a:	f3bf 8f5b 	dmb	ish
   b564e:	f011 0101 	ands.w	r1, r1, #1
   b5652:	d10f      	bne.n	b5674 <_Z16_fetch_usbserialv+0x38>
   b5654:	4620      	mov	r0, r4
   b5656:	9101      	str	r1, [sp, #4]
   b5658:	f7fe fd29 	bl	b40ae <__cxa_guard_acquire>
   b565c:	9901      	ldr	r1, [sp, #4]
   b565e:	b148      	cbz	r0, b5674 <_Z16_fetch_usbserialv+0x38>
   b5660:	aa03      	add	r2, sp, #12
   b5662:	4807      	ldr	r0, [pc, #28]	; (b5680 <_Z16_fetch_usbserialv+0x44>)
   b5664:	f7ff ffc6 	bl	b55f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5668:	4620      	mov	r0, r4
   b566a:	f7fe fd25 	bl	b40b8 <__cxa_guard_release>
   b566e:	4805      	ldr	r0, [pc, #20]	; (b5684 <_Z16_fetch_usbserialv+0x48>)
   b5670:	f000 f9bc 	bl	b59ec <atexit>
	return _usbserial;
}
   b5674:	4802      	ldr	r0, [pc, #8]	; (b5680 <_Z16_fetch_usbserialv+0x44>)
   b5676:	b008      	add	sp, #32
   b5678:	bd10      	pop	{r4, pc}
   b567a:	bf00      	nop
   b567c:	2003e700 	.word	0x2003e700
   b5680:	2003e704 	.word	0x2003e704
   b5684:	000b557d 	.word	0x000b557d

000b5688 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5688:	2200      	movs	r2, #0
   b568a:	6840      	ldr	r0, [r0, #4]
   b568c:	4611      	mov	r1, r2
   b568e:	f7ff bb25 	b.w	b4cdc <network_ready>

000b5692 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5692:	2200      	movs	r2, #0
   b5694:	6840      	ldr	r0, [r0, #4]
   b5696:	4611      	mov	r1, r2
   b5698:	f7ff bb40 	b.w	b4d1c <network_listening>

000b569c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b569c:	2200      	movs	r2, #0
   b569e:	6840      	ldr	r0, [r0, #4]
   b56a0:	4611      	mov	r1, r2
   b56a2:	f7ff bb4b 	b.w	b4d3c <network_get_listen_timeout>

000b56a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b56a6:	6840      	ldr	r0, [r0, #4]
   b56a8:	2200      	movs	r2, #0
   b56aa:	f7ff bb3f 	b.w	b4d2c <network_set_listen_timeout>

000b56ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b56ae:	6840      	ldr	r0, [r0, #4]
   b56b0:	2200      	movs	r2, #0
   b56b2:	f081 0101 	eor.w	r1, r1, #1
   b56b6:	f7ff bb29 	b.w	b4d0c <network_listen>

000b56ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b56ba:	2300      	movs	r3, #0
   b56bc:	6840      	ldr	r0, [r0, #4]
   b56be:	461a      	mov	r2, r3
   b56c0:	4619      	mov	r1, r3
   b56c2:	f7ff bb1b 	b.w	b4cfc <network_off>

000b56c6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b56c6:	2300      	movs	r3, #0
   b56c8:	6840      	ldr	r0, [r0, #4]
   b56ca:	461a      	mov	r2, r3
   b56cc:	4619      	mov	r1, r3
   b56ce:	f7ff bb0d 	b.w	b4cec <network_on>

000b56d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b56d2:	2200      	movs	r2, #0
   b56d4:	6840      	ldr	r0, [r0, #4]
   b56d6:	4611      	mov	r1, r2
   b56d8:	f7ff baf0 	b.w	b4cbc <network_connecting>

000b56dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b56dc:	6840      	ldr	r0, [r0, #4]
   b56de:	2200      	movs	r2, #0
   b56e0:	2102      	movs	r1, #2
   b56e2:	f7ff baf3 	b.w	b4ccc <network_disconnect>

000b56e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b56e6:	2300      	movs	r3, #0
   b56e8:	6840      	ldr	r0, [r0, #4]
   b56ea:	461a      	mov	r2, r3
   b56ec:	f7ff bade 	b.w	b4cac <network_connect>

000b56f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b56f0:	4b02      	ldr	r3, [pc, #8]	; (b56fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b56f2:	2204      	movs	r2, #4
   b56f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b56f6:	4a02      	ldr	r2, [pc, #8]	; (b5700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b56f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b56fa:	4770      	bx	lr
   b56fc:	2003e718 	.word	0x2003e718
   b5700:	000b5d3c 	.word	0x000b5d3c

000b5704 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5704:	4b01      	ldr	r3, [pc, #4]	; (b570c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5706:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5708:	4770      	bx	lr
   b570a:	bf00      	nop
   b570c:	2003e634 	.word	0x2003e634

000b5710 <serialEventRun>:
{
   b5710:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5712:	4b0b      	ldr	r3, [pc, #44]	; (b5740 <serialEventRun+0x30>)
   b5714:	b143      	cbz	r3, b5728 <serialEventRun+0x18>
   b5716:	f7ff ff91 	bl	b563c <_Z16_fetch_usbserialv>
   b571a:	6803      	ldr	r3, [r0, #0]
   b571c:	691b      	ldr	r3, [r3, #16]
   b571e:	4798      	blx	r3
   b5720:	2800      	cmp	r0, #0
   b5722:	dd01      	ble.n	b5728 <serialEventRun+0x18>
        serialEvent();
   b5724:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5728:	4b06      	ldr	r3, [pc, #24]	; (b5744 <serialEventRun+0x34>)
   b572a:	b143      	cbz	r3, b573e <serialEventRun+0x2e>
   b572c:	f000 f938 	bl	b59a0 <_Z22__fetch_global_Serial1v>
   b5730:	6803      	ldr	r3, [r0, #0]
   b5732:	691b      	ldr	r3, [r3, #16]
   b5734:	4798      	blx	r3
   b5736:	2800      	cmp	r0, #0
   b5738:	dd01      	ble.n	b573e <serialEventRun+0x2e>
        serialEvent1();
   b573a:	f3af 8000 	nop.w
}
   b573e:	bd08      	pop	{r3, pc}
	...

000b5748 <_post_loop>:
{
   b5748:	b508      	push	{r3, lr}
	serialEventRun();
   b574a:	f7ff ffe1 	bl	b5710 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b574e:	f7ff f921 	bl	b4994 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5752:	4b01      	ldr	r3, [pc, #4]	; (b5758 <_post_loop+0x10>)
   b5754:	6018      	str	r0, [r3, #0]
}
   b5756:	bd08      	pop	{r3, pc}
   b5758:	2003e734 	.word	0x2003e734

000b575c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b575c:	4805      	ldr	r0, [pc, #20]	; (b5774 <_Z33system_initialize_user_backup_ramv+0x18>)
   b575e:	4a06      	ldr	r2, [pc, #24]	; (b5778 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5760:	4906      	ldr	r1, [pc, #24]	; (b577c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5762:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5764:	1a12      	subs	r2, r2, r0
   b5766:	f000 f947 	bl	b59f8 <memcpy>
    __backup_sram_signature = signature;
   b576a:	4b05      	ldr	r3, [pc, #20]	; (b5780 <_Z33system_initialize_user_backup_ramv+0x24>)
   b576c:	4a05      	ldr	r2, [pc, #20]	; (b5784 <_Z33system_initialize_user_backup_ramv+0x28>)
   b576e:	601a      	str	r2, [r3, #0]
}
   b5770:	bd08      	pop	{r3, pc}
   b5772:	bf00      	nop
   b5774:	2003f400 	.word	0x2003f400
   b5778:	2003f404 	.word	0x2003f404
   b577c:	000b5ea4 	.word	0x000b5ea4
   b5780:	2003f400 	.word	0x2003f400
   b5784:	9a271c1e 	.word	0x9a271c1e

000b5788 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5788:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b578a:	2300      	movs	r3, #0
   b578c:	9300      	str	r3, [sp, #0]
   b578e:	461a      	mov	r2, r3
   b5790:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5794:	f7ff fa70 	bl	b4c78 <system_ctrl_set_result>
}
   b5798:	b003      	add	sp, #12
   b579a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b57a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b57a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b57a2:	8843      	ldrh	r3, [r0, #2]
   b57a4:	2b0a      	cmp	r3, #10
   b57a6:	d008      	beq.n	b57ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b57a8:	2b50      	cmp	r3, #80	; 0x50
   b57aa:	d10b      	bne.n	b57c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b57ac:	4b09      	ldr	r3, [pc, #36]	; (b57d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b57ae:	681b      	ldr	r3, [r3, #0]
   b57b0:	b14b      	cbz	r3, b57c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b57b2:	b003      	add	sp, #12
   b57b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b57b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b57ba:	f7ff ffe5 	bl	b5788 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b57be:	b003      	add	sp, #12
   b57c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b57c4:	2300      	movs	r3, #0
   b57c6:	9300      	str	r3, [sp, #0]
   b57c8:	461a      	mov	r2, r3
   b57ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b57ce:	f7ff fa53 	bl	b4c78 <system_ctrl_set_result>
}
   b57d2:	e7f4      	b.n	b57be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b57d4:	2003e724 	.word	0x2003e724

000b57d8 <module_user_init_hook>:
{
   b57d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b57da:	4812      	ldr	r0, [pc, #72]	; (b5824 <module_user_init_hook+0x4c>)
   b57dc:	2100      	movs	r1, #0
   b57de:	f7ff faed 	bl	b4dbc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b57e2:	4b11      	ldr	r3, [pc, #68]	; (b5828 <module_user_init_hook+0x50>)
   b57e4:	681a      	ldr	r2, [r3, #0]
   b57e6:	4b11      	ldr	r3, [pc, #68]	; (b582c <module_user_init_hook+0x54>)
   b57e8:	429a      	cmp	r2, r3
   b57ea:	4b11      	ldr	r3, [pc, #68]	; (b5830 <module_user_init_hook+0x58>)
   b57ec:	bf0c      	ite	eq
   b57ee:	2201      	moveq	r2, #1
   b57f0:	2200      	movne	r2, #0
   b57f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b57f4:	d001      	beq.n	b57fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b57f6:	f7ff ffb1 	bl	b575c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b57fa:	f7ff f8bb 	bl	b4974 <HAL_RNG_GetRandomNumber>
   b57fe:	4604      	mov	r4, r0
    srand(seed);
   b5800:	f000 f910 	bl	b5a24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5804:	4b0b      	ldr	r3, [pc, #44]	; (b5834 <module_user_init_hook+0x5c>)
   b5806:	b113      	cbz	r3, b580e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5808:	4620      	mov	r0, r4
   b580a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b580e:	2100      	movs	r1, #0
   b5810:	4808      	ldr	r0, [pc, #32]	; (b5834 <module_user_init_hook+0x5c>)
   b5812:	f7ff fa43 	bl	b4c9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b581a:	4807      	ldr	r0, [pc, #28]	; (b5838 <module_user_init_hook+0x60>)
   b581c:	2100      	movs	r1, #0
   b581e:	f7ff ba21 	b.w	b4c64 <system_ctrl_set_app_request_handler>
   b5822:	bf00      	nop
   b5824:	000b5705 	.word	0x000b5705
   b5828:	2003f400 	.word	0x2003f400
   b582c:	9a271c1e 	.word	0x9a271c1e
   b5830:	2003e720 	.word	0x2003e720
   b5834:	00000000 	.word	0x00000000
   b5838:	000b57a1 	.word	0x000b57a1

000b583c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b583c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b583e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5840:	d902      	bls.n	b5848 <pinAvailable+0xc>
    return false;
   b5842:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5844:	b002      	add	sp, #8
   b5846:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5848:	f1a0 030b 	sub.w	r3, r0, #11
   b584c:	2b02      	cmp	r3, #2
   b584e:	d81a      	bhi.n	b5886 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5850:	4c17      	ldr	r4, [pc, #92]	; (b58b0 <pinAvailable+0x74>)
   b5852:	7821      	ldrb	r1, [r4, #0]
   b5854:	f3bf 8f5b 	dmb	ish
   b5858:	f011 0101 	ands.w	r1, r1, #1
   b585c:	d10b      	bne.n	b5876 <pinAvailable+0x3a>
   b585e:	4620      	mov	r0, r4
   b5860:	9101      	str	r1, [sp, #4]
   b5862:	f7fe fc24 	bl	b40ae <__cxa_guard_acquire>
   b5866:	9901      	ldr	r1, [sp, #4]
   b5868:	b128      	cbz	r0, b5876 <pinAvailable+0x3a>
   b586a:	4812      	ldr	r0, [pc, #72]	; (b58b4 <pinAvailable+0x78>)
   b586c:	f7ff fd46 	bl	b52fc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5870:	4620      	mov	r0, r4
   b5872:	f7fe fc21 	bl	b40b8 <__cxa_guard_release>
   b5876:	4b0f      	ldr	r3, [pc, #60]	; (b58b4 <pinAvailable+0x78>)
   b5878:	7818      	ldrb	r0, [r3, #0]
   b587a:	f7ff f923 	bl	b4ac4 <hal_spi_is_enabled>
   b587e:	2800      	cmp	r0, #0
   b5880:	d1df      	bne.n	b5842 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5882:	2001      	movs	r0, #1
   b5884:	e7de      	b.n	b5844 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5886:	2801      	cmp	r0, #1
   b5888:	d809      	bhi.n	b589e <pinAvailable+0x62>
   b588a:	f000 f849 	bl	b5920 <_Z19__fetch_global_Wirev>
   b588e:	2100      	movs	r1, #0
   b5890:	7c00      	ldrb	r0, [r0, #16]
   b5892:	f7ff f8df 	bl	b4a54 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5896:	f080 0001 	eor.w	r0, r0, #1
   b589a:	b2c0      	uxtb	r0, r0
   b589c:	e7d2      	b.n	b5844 <pinAvailable+0x8>
   b589e:	3809      	subs	r0, #9
   b58a0:	2801      	cmp	r0, #1
   b58a2:	d8ee      	bhi.n	b5882 <pinAvailable+0x46>
   b58a4:	f000 f87c 	bl	b59a0 <_Z22__fetch_global_Serial1v>
   b58a8:	7c00      	ldrb	r0, [r0, #16]
   b58aa:	f7ff f96b 	bl	b4b84 <hal_usart_is_enabled>
   b58ae:	e7f2      	b.n	b5896 <pinAvailable+0x5a>
   b58b0:	2003e728 	.word	0x2003e728
   b58b4:	2003e72c 	.word	0x2003e72c

000b58b8 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b58b8:	b538      	push	{r3, r4, r5, lr}
   b58ba:	4604      	mov	r4, r0
   b58bc:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b58be:	f7ff f879 	bl	b49b4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b58c2:	28ff      	cmp	r0, #255	; 0xff
   b58c4:	d010      	beq.n	b58e8 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b58c6:	2806      	cmp	r0, #6
   b58c8:	d804      	bhi.n	b58d4 <digitalWrite+0x1c>
   b58ca:	234d      	movs	r3, #77	; 0x4d
   b58cc:	fa23 f000 	lsr.w	r0, r3, r0
   b58d0:	07c3      	lsls	r3, r0, #31
   b58d2:	d409      	bmi.n	b58e8 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b58d4:	4620      	mov	r0, r4
   b58d6:	f7ff ffb1 	bl	b583c <pinAvailable>
   b58da:	b128      	cbz	r0, b58e8 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b58dc:	4629      	mov	r1, r5
   b58de:	4620      	mov	r0, r4
}
   b58e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b58e4:	f7ff b86e 	b.w	b49c4 <hal_gpio_write>
}
   b58e8:	bd38      	pop	{r3, r4, r5, pc}

000b58ea <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b58ea:	4770      	bx	lr

000b58ec <_Z17acquireWireBufferv>:
{
   b58ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b58ee:	4b0a      	ldr	r3, [pc, #40]	; (b5918 <_Z17acquireWireBufferv+0x2c>)
   b58f0:	6003      	str	r3, [r0, #0]
   b58f2:	2301      	movs	r3, #1
{
   b58f4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b58f6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b58f8:	4908      	ldr	r1, [pc, #32]	; (b591c <_Z17acquireWireBufferv+0x30>)
   b58fa:	2020      	movs	r0, #32
   b58fc:	f000 f874 	bl	b59e8 <_ZnajRKSt9nothrow_t>
	};
   b5900:	2520      	movs	r5, #32
   b5902:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5904:	4905      	ldr	r1, [pc, #20]	; (b591c <_Z17acquireWireBufferv+0x30>)
	};
   b5906:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5908:	4628      	mov	r0, r5
   b590a:	f000 f86d 	bl	b59e8 <_ZnajRKSt9nothrow_t>
	};
   b590e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5912:	4620      	mov	r0, r4
   b5914:	bd38      	pop	{r3, r4, r5, pc}
   b5916:	bf00      	nop
   b5918:	00010018 	.word	0x00010018
   b591c:	000b5d78 	.word	0x000b5d78

000b5920 <_Z19__fetch_global_Wirev>:
{
   b5920:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5922:	4d0e      	ldr	r5, [pc, #56]	; (b595c <_Z19__fetch_global_Wirev+0x3c>)
   b5924:	7829      	ldrb	r1, [r5, #0]
   b5926:	f3bf 8f5b 	dmb	ish
   b592a:	f011 0401 	ands.w	r4, r1, #1
{
   b592e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5930:	d111      	bne.n	b5956 <_Z19__fetch_global_Wirev+0x36>
   b5932:	4628      	mov	r0, r5
   b5934:	f7fe fbbb 	bl	b40ae <__cxa_guard_acquire>
   b5938:	b168      	cbz	r0, b5956 <_Z19__fetch_global_Wirev+0x36>
   b593a:	4668      	mov	r0, sp
   b593c:	f7ff ffd6 	bl	b58ec <_Z17acquireWireBufferv>
   b5940:	466a      	mov	r2, sp
   b5942:	4621      	mov	r1, r4
   b5944:	4806      	ldr	r0, [pc, #24]	; (b5960 <_Z19__fetch_global_Wirev+0x40>)
   b5946:	f7ff fab7 	bl	b4eb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b594a:	4628      	mov	r0, r5
   b594c:	f7fe fbb4 	bl	b40b8 <__cxa_guard_release>
   b5950:	4804      	ldr	r0, [pc, #16]	; (b5964 <_Z19__fetch_global_Wirev+0x44>)
   b5952:	f000 f84b 	bl	b59ec <atexit>
	return wire;
}
   b5956:	4802      	ldr	r0, [pc, #8]	; (b5960 <_Z19__fetch_global_Wirev+0x40>)
   b5958:	b007      	add	sp, #28
   b595a:	bd30      	pop	{r4, r5, pc}
   b595c:	2003e738 	.word	0x2003e738
   b5960:	2003e73c 	.word	0x2003e73c
   b5964:	000b58eb 	.word	0x000b58eb

000b5968 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5968:	4770      	bx	lr
	...

000b596c <_Z20acquireSerial1Bufferv>:
{
   b596c:	b538      	push	{r3, r4, r5, lr}
   b596e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5970:	2514      	movs	r5, #20
   b5972:	462a      	mov	r2, r5
   b5974:	2100      	movs	r1, #0
   b5976:	f000 f84d 	bl	b5a14 <memset>
   b597a:	8025      	strh	r5, [r4, #0]
   b597c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b597e:	4907      	ldr	r1, [pc, #28]	; (b599c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5980:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5982:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5984:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5986:	f000 f82f 	bl	b59e8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b598a:	4904      	ldr	r1, [pc, #16]	; (b599c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b598c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b598e:	4628      	mov	r0, r5
   b5990:	f000 f82a 	bl	b59e8 <_ZnajRKSt9nothrow_t>
    };
   b5994:	60e0      	str	r0, [r4, #12]
}
   b5996:	4620      	mov	r0, r4
   b5998:	bd38      	pop	{r3, r4, r5, pc}
   b599a:	bf00      	nop
   b599c:	000b5d78 	.word	0x000b5d78

000b59a0 <_Z22__fetch_global_Serial1v>:
{
   b59a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b59a2:	4d0e      	ldr	r5, [pc, #56]	; (b59dc <_Z22__fetch_global_Serial1v+0x3c>)
   b59a4:	7829      	ldrb	r1, [r5, #0]
   b59a6:	f3bf 8f5b 	dmb	ish
   b59aa:	f011 0401 	ands.w	r4, r1, #1
{
   b59ae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b59b0:	d111      	bne.n	b59d6 <_Z22__fetch_global_Serial1v+0x36>
   b59b2:	4628      	mov	r0, r5
   b59b4:	f7fe fb7b 	bl	b40ae <__cxa_guard_acquire>
   b59b8:	b168      	cbz	r0, b59d6 <_Z22__fetch_global_Serial1v+0x36>
   b59ba:	a801      	add	r0, sp, #4
   b59bc:	f7ff ffd6 	bl	b596c <_Z20acquireSerial1Bufferv>
   b59c0:	aa01      	add	r2, sp, #4
   b59c2:	4621      	mov	r1, r4
   b59c4:	4806      	ldr	r0, [pc, #24]	; (b59e0 <_Z22__fetch_global_Serial1v+0x40>)
   b59c6:	f7ff fdc3 	bl	b5550 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b59ca:	4628      	mov	r0, r5
   b59cc:	f7fe fb74 	bl	b40b8 <__cxa_guard_release>
   b59d0:	4804      	ldr	r0, [pc, #16]	; (b59e4 <_Z22__fetch_global_Serial1v+0x44>)
   b59d2:	f000 f80b 	bl	b59ec <atexit>
    return serial1;
}
   b59d6:	4802      	ldr	r0, [pc, #8]	; (b59e0 <_Z22__fetch_global_Serial1v+0x40>)
   b59d8:	b007      	add	sp, #28
   b59da:	bd30      	pop	{r4, r5, pc}
   b59dc:	2003e750 	.word	0x2003e750
   b59e0:	2003e754 	.word	0x2003e754
   b59e4:	000b5969 	.word	0x000b5969

000b59e8 <_ZnajRKSt9nothrow_t>:
   b59e8:	f7fe bb5d 	b.w	b40a6 <_Znaj>

000b59ec <atexit>:
   b59ec:	2300      	movs	r3, #0
   b59ee:	4601      	mov	r1, r0
   b59f0:	461a      	mov	r2, r3
   b59f2:	4618      	mov	r0, r3
   b59f4:	f000 b844 	b.w	b5a80 <__register_exitproc>

000b59f8 <memcpy>:
   b59f8:	440a      	add	r2, r1
   b59fa:	4291      	cmp	r1, r2
   b59fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5a00:	d100      	bne.n	b5a04 <memcpy+0xc>
   b5a02:	4770      	bx	lr
   b5a04:	b510      	push	{r4, lr}
   b5a06:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5a0e:	4291      	cmp	r1, r2
   b5a10:	d1f9      	bne.n	b5a06 <memcpy+0xe>
   b5a12:	bd10      	pop	{r4, pc}

000b5a14 <memset>:
   b5a14:	4402      	add	r2, r0
   b5a16:	4603      	mov	r3, r0
   b5a18:	4293      	cmp	r3, r2
   b5a1a:	d100      	bne.n	b5a1e <memset+0xa>
   b5a1c:	4770      	bx	lr
   b5a1e:	f803 1b01 	strb.w	r1, [r3], #1
   b5a22:	e7f9      	b.n	b5a18 <memset+0x4>

000b5a24 <srand>:
   b5a24:	b538      	push	{r3, r4, r5, lr}
   b5a26:	4b10      	ldr	r3, [pc, #64]	; (b5a68 <srand+0x44>)
   b5a28:	681d      	ldr	r5, [r3, #0]
   b5a2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5a2c:	4604      	mov	r4, r0
   b5a2e:	b9b3      	cbnz	r3, b5a5e <srand+0x3a>
   b5a30:	2018      	movs	r0, #24
   b5a32:	f7ff f9ab 	bl	b4d8c <malloc>
   b5a36:	4602      	mov	r2, r0
   b5a38:	63a8      	str	r0, [r5, #56]	; 0x38
   b5a3a:	b920      	cbnz	r0, b5a46 <srand+0x22>
   b5a3c:	4b0b      	ldr	r3, [pc, #44]	; (b5a6c <srand+0x48>)
   b5a3e:	480c      	ldr	r0, [pc, #48]	; (b5a70 <srand+0x4c>)
   b5a40:	2142      	movs	r1, #66	; 0x42
   b5a42:	f7ff f9b3 	bl	b4dac <__assert_func>
   b5a46:	490b      	ldr	r1, [pc, #44]	; (b5a74 <srand+0x50>)
   b5a48:	4b0b      	ldr	r3, [pc, #44]	; (b5a78 <srand+0x54>)
   b5a4a:	e9c0 1300 	strd	r1, r3, [r0]
   b5a4e:	4b0b      	ldr	r3, [pc, #44]	; (b5a7c <srand+0x58>)
   b5a50:	6083      	str	r3, [r0, #8]
   b5a52:	230b      	movs	r3, #11
   b5a54:	8183      	strh	r3, [r0, #12]
   b5a56:	2100      	movs	r1, #0
   b5a58:	2001      	movs	r0, #1
   b5a5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5a5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5a60:	2200      	movs	r2, #0
   b5a62:	611c      	str	r4, [r3, #16]
   b5a64:	615a      	str	r2, [r3, #20]
   b5a66:	bd38      	pop	{r3, r4, r5, pc}
   b5a68:	2003e634 	.word	0x2003e634
   b5a6c:	000b5d79 	.word	0x000b5d79
   b5a70:	000b5d90 	.word	0x000b5d90
   b5a74:	abcd330e 	.word	0xabcd330e
   b5a78:	e66d1234 	.word	0xe66d1234
   b5a7c:	0005deec 	.word	0x0005deec

000b5a80 <__register_exitproc>:
   b5a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a84:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5b40 <__register_exitproc+0xc0>
   b5a88:	4606      	mov	r6, r0
   b5a8a:	f8d8 0000 	ldr.w	r0, [r8]
   b5a8e:	461f      	mov	r7, r3
   b5a90:	460d      	mov	r5, r1
   b5a92:	4691      	mov	r9, r2
   b5a94:	f000 f856 	bl	b5b44 <__retarget_lock_acquire_recursive>
   b5a98:	4b25      	ldr	r3, [pc, #148]	; (b5b30 <__register_exitproc+0xb0>)
   b5a9a:	681c      	ldr	r4, [r3, #0]
   b5a9c:	b934      	cbnz	r4, b5aac <__register_exitproc+0x2c>
   b5a9e:	4c25      	ldr	r4, [pc, #148]	; (b5b34 <__register_exitproc+0xb4>)
   b5aa0:	601c      	str	r4, [r3, #0]
   b5aa2:	4b25      	ldr	r3, [pc, #148]	; (b5b38 <__register_exitproc+0xb8>)
   b5aa4:	b113      	cbz	r3, b5aac <__register_exitproc+0x2c>
   b5aa6:	681b      	ldr	r3, [r3, #0]
   b5aa8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5aac:	6863      	ldr	r3, [r4, #4]
   b5aae:	2b1f      	cmp	r3, #31
   b5ab0:	dd07      	ble.n	b5ac2 <__register_exitproc+0x42>
   b5ab2:	f8d8 0000 	ldr.w	r0, [r8]
   b5ab6:	f000 f847 	bl	b5b48 <__retarget_lock_release_recursive>
   b5aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5ac2:	b34e      	cbz	r6, b5b18 <__register_exitproc+0x98>
   b5ac4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5ac8:	b988      	cbnz	r0, b5aee <__register_exitproc+0x6e>
   b5aca:	4b1c      	ldr	r3, [pc, #112]	; (b5b3c <__register_exitproc+0xbc>)
   b5acc:	b923      	cbnz	r3, b5ad8 <__register_exitproc+0x58>
   b5ace:	f8d8 0000 	ldr.w	r0, [r8]
   b5ad2:	f000 f838 	bl	b5b46 <__retarget_lock_release>
   b5ad6:	e7f0      	b.n	b5aba <__register_exitproc+0x3a>
   b5ad8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5adc:	f7ff f956 	bl	b4d8c <malloc>
   b5ae0:	2800      	cmp	r0, #0
   b5ae2:	d0f4      	beq.n	b5ace <__register_exitproc+0x4e>
   b5ae4:	2300      	movs	r3, #0
   b5ae6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5aea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5aee:	6863      	ldr	r3, [r4, #4]
   b5af0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5af4:	2201      	movs	r2, #1
   b5af6:	409a      	lsls	r2, r3
   b5af8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5afc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5b00:	4313      	orrs	r3, r2
   b5b02:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5b06:	2e02      	cmp	r6, #2
   b5b08:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5b0c:	bf02      	ittt	eq
   b5b0e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5b12:	4313      	orreq	r3, r2
   b5b14:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5b18:	6863      	ldr	r3, [r4, #4]
   b5b1a:	f8d8 0000 	ldr.w	r0, [r8]
   b5b1e:	1c5a      	adds	r2, r3, #1
   b5b20:	3302      	adds	r3, #2
   b5b22:	6062      	str	r2, [r4, #4]
   b5b24:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5b28:	f000 f80e 	bl	b5b48 <__retarget_lock_release_recursive>
   b5b2c:	2000      	movs	r0, #0
   b5b2e:	e7c6      	b.n	b5abe <__register_exitproc+0x3e>
   b5b30:	2003e7f4 	.word	0x2003e7f4
   b5b34:	2003e768 	.word	0x2003e768
   b5b38:	00000000 	.word	0x00000000
   b5b3c:	000b4d8d 	.word	0x000b4d8d
   b5b40:	2003e698 	.word	0x2003e698

000b5b44 <__retarget_lock_acquire_recursive>:
   b5b44:	4770      	bx	lr

000b5b46 <__retarget_lock_release>:
   b5b46:	4770      	bx	lr

000b5b48 <__retarget_lock_release_recursive>:
   b5b48:	4770      	bx	lr

000b5b4a <link_code_end>:
	...

000b5b4c <dynalib_user>:
   b5b4c:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b5b5c:	0000 0000 6441 6661 7572 7469 4d20 5250     ....Adafruit MPR
   b5b6c:	3231 2031 6143 6170 6963 6974 6576 5420     121 Capacitive T
   b5b7c:	756f 6863 7320 6e65 6f73 2072 6574 7473     ouch sensor test
   b5b8c:	4d00 5250 3231 2031 6f6e 2074 6f66 6e75     .MPR121 not foun
   b5b9c:	2c64 6320 6568 6b63 7720 7269 6e69 3f67     d, check wiring?
   b5bac:	4d00 5250 3231 2031 6f66 6e75 2164 2000     .MPR121 found!. 
   b5bbc:	6f74 6375 6568 0064 7220 6c65 6165 6573     touched. release
   b5bcc:	0064 0000                                   d...

000b5bd0 <_ZTVN5spark13EthernetClassE>:
	...
   b5bd8:	4e43 000b 4e39 000b 4e2f 000b 4e25 000b     CN..9N../N..%N..
   b5be8:	4e19 000b 4e0d 000b 50cd 000b 50d5 000b     .N...N...P...P..
   b5bf8:	4e01 000b 4df9 000b 4def 000b 4de5 000b     .N...M...M...M..
   b5c08:	51fd 000b 5105 000b 510d 000b               .Q...Q...Q..

000b5c14 <_ZTV7TwoWire>:
	...
   b5c1c:	4e61 000b 4eab 000b 4e83 000b 4e63 000b     aN...N...N..cN..
   b5c2c:	4e8b 000b 4e93 000b 4e9b 000b 4ea3 000b     .N...N...N...N..
   b5c3c:	5471 000b                                   qT..

000b5c40 <_ZTV9IPAddress>:
	...
   b5c48:	4f9d 000b 4f8d 000b 4f8f 000b 7061 0070     .O...O...O..app.

000b5c58 <CSWTCH.109>:
   b5c58:	e6b4 2003 e718 2003 e6d4 2003               ... ... ... 

000b5c64 <_ZTVN5spark12NetworkClassE>:
	...
   b5c6c:	508d 000b 5097 000b 50a1 000b 50ab 000b     .P...P...P...P..
   b5c7c:	50b5 000b 50c1 000b 50cd 000b 50d5 000b     .P...P...P...P..
   b5c8c:	50dd 000b 50e9 000b 50f1 000b 50fb 000b     .P...P...P...P..
   b5c9c:	51fd 000b 5105 000b 510d 000b               .Q...Q...Q..

000b5ca8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b5ca8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b5cb8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5cc8:	6d69 0065                                   ime.

000b5ccc <_ZTV11USARTSerial>:
	...
   b5cd4:	54d5 000b 5541 000b 5519 000b 5225 000b     .T..AU...U..%R..
   b5ce4:	54e9 000b 5505 000b 54f7 000b 5513 000b     .T...U...T...U..
   b5cf4:	5471 000b 54d7 000b 54db 000b               qT...T...T..

000b5d00 <_ZTV9USBSerial>:
	...
   b5d08:	557f 000b 55e7 000b 55bd 000b 5225 000b     .U...U...U..%R..
   b5d18:	55af 000b 5581 000b 5591 000b 55e1 000b     .U...U...U...U..
   b5d28:	5471 000b 55a1 000b 5579 000b               qT...U..yU..

000b5d34 <_ZTVN5spark9WiFiClassE>:
	...
   b5d3c:	56e7 000b 56dd 000b 56d3 000b 5689 000b     .V...V...V...V..
   b5d4c:	56c7 000b 56bb 000b 50cd 000b 50d5 000b     .V...V...P...P..
   b5d5c:	56af 000b 56a7 000b 569d 000b 5693 000b     .V...V...V...V..
   b5d6c:	51fd 000b 5105 000b 510d 000b               .Q...Q...Q..

000b5d78 <_ZSt7nothrow>:
   b5d78:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5d88:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5d98:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5da8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5db8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5dc8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5dd8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5de9 <link_const_data_end>:
   b5de9:	00          	.byte	0x00
	...

000b5dec <link_constructors_location>:
   b5dec:	000b41dd 	.word	0x000b41dd
   b5df0:	000b4dd5 	.word	0x000b4dd5
   b5df4:	000b4e4d 	.word	0x000b4e4d
   b5df8:	000b4f71 	.word	0x000b4f71
   b5dfc:	000b507d 	.word	0x000b507d
   b5e00:	000b5211 	.word	0x000b5211
   b5e04:	000b52e5 	.word	0x000b52e5
   b5e08:	000b549d 	.word	0x000b549d
   b5e0c:	000b54c1 	.word	0x000b54c1
   b5e10:	000b56f1 	.word	0x000b56f1
