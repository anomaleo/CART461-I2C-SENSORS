
/Users/eo/Desktop/CART461/CART461-I2C-SENSORS/PUBLISH-SUBSCRIBE/PUBLISH/target/6.1.1/argon/PUBLISH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b61d0  000b61d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e648  000b61f4  0000e648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000148  2003e6b4  2003e6b4  0001e6b4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6260  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6264  000b6264  00016264  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b626a  000b626a  0001626a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b628e  000b628e  0001628e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001635a1  00000000  00000000  00016292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001516d  00000000  00000000  00179833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003f356  00000000  00000000  0018e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b18  00000000  00000000  001cdcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b8d0  00000000  00000000  001d080e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bdbe  00000000  00000000  001dc0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045d24  00000000  00000000  00217e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c063  00000000  00000000  0025dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008e3c  00000000  00000000  003c9c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fd84 	bl	b5b4a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 fd8c 	bl	b5b66 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e648 	.word	0x2003e648
   b4058:	000b61f4 	.word	0x000b61f4
   b405c:	2003e6b4 	.word	0x2003e6b4
   b4060:	2003e6b4 	.word	0x2003e6b4
   b4064:	2003e7fc 	.word	0x2003e7fc

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 fb3d 	bl	b56ec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b61ac 	.word	0x000b61ac
   b408c:	000b61d0 	.word	0x000b61d0

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b836 	b.w	b4100 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f8b5 	bl	b4204 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 badd 	b.w	b565c <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f000 bbff 	b.w	b48a4 <malloc>

000b40a6 <_Znaj>:
   b40a6:	f000 bbfd 	b.w	b48a4 <malloc>

000b40aa <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b40aa:	f000 bc03 	b.w	b48b4 <free>

000b40ae <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40ae:	f000 bc01 	b.w	b48b4 <free>

000b40b2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b2:	7800      	ldrb	r0, [r0, #0]
   b40b4:	fab0 f080 	clz	r0, r0
   b40b8:	0940      	lsrs	r0, r0, #5
   b40ba:	4770      	bx	lr

000b40bc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40bc:	2301      	movs	r3, #1
   b40be:	7003      	strb	r3, [r0, #0]
   b40c0:	4770      	bx	lr

000b40c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
   b40c2:	b570      	push	{r4, r5, r6, lr}
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b40c4:	b1b0      	cbz	r0, b40f4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0+0x32>
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
   b40c6:	460b      	mov	r3, r1

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b40c8:	f100 0208 	add.w	r2, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b40cc:	6002      	str	r2, [r0, #0]
      { return _M_dataplus._M_p; }
   b40ce:	f853 4b08 	ldr.w	r4, [r3], #8
       *  @a __str is a valid, but unspecified string.
       **/
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
	if (__str._M_is_local())
   b40d2:	429c      	cmp	r4, r3
   b40d4:	d10f      	bne.n	b40f6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0+0x34>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b40d6:	461c      	mov	r4, r3
   b40d8:	f101 0518 	add.w	r5, r1, #24
   b40dc:	f854 6b04 	ldr.w	r6, [r4], #4
   b40e0:	f842 6b04 	str.w	r6, [r2], #4
   b40e4:	42ac      	cmp	r4, r5
   b40e6:	d1f9      	bne.n	b40dc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0+0x1a>
      { _M_string_length = __length; }
   b40e8:	684a      	ldr	r2, [r1, #4]
      { _M_dataplus._M_p = __p; }
   b40ea:	600b      	str	r3, [r1, #0]
      { _M_string_length = __length; }
   b40ec:	2300      	movs	r3, #0
   b40ee:	6042      	str	r2, [r0, #4]
   b40f0:	604b      	str	r3, [r1, #4]
      { __c1 = __c2; }
   b40f2:	720b      	strb	r3, [r1, #8]
   b40f4:	bd70      	pop	{r4, r5, r6, pc}
      { _M_allocated_capacity = __capacity; }
   b40f6:	688a      	ldr	r2, [r1, #8]
      { _M_dataplus._M_p = __p; }
   b40f8:	6004      	str	r4, [r0, #0]
      { _M_allocated_capacity = __capacity; }
   b40fa:	6082      	str	r2, [r0, #8]
   b40fc:	e7f4      	b.n	b40e8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0+0x26>
	...

000b4100 <setup>:
#define G_LED     D5 // GREEN LED
#define B_LED     D4 // BLUE LED
#define LDR       A0 // ANALOG_IN = ( 0 ... 4095 ) => 2^12 bits.
#define B_TN      D0 // MOMENTARY BUTTON

void setup() {
   b4100:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4102:	2300      	movs	r3, #0
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4104:	2400      	movs	r4, #0
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4106:	4929      	ldr	r1, [pc, #164]	; (b41ac <setup+0xac>)
   b4108:	4829      	ldr	r0, [pc, #164]	; (b41b0 <setup+0xb0>)
   b410a:	2204      	movs	r2, #4
   b410c:	f000 fb2a 	bl	b4764 <spark_variable>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4110:	4622      	mov	r2, r4
   b4112:	2301      	movs	r3, #1
   b4114:	4927      	ldr	r1, [pc, #156]	; (b41b4 <setup+0xb4>)
   b4116:	4828      	ldr	r0, [pc, #160]	; (b41b8 <setup+0xb8>)
   b4118:	e9cd 4400 	strd	r4, r4, [sp]
   b411c:	f000 fb42 	bl	b47a4 <spark_subscribe>
    SIMPLY SUBSCRIBE TO A KNOWN DATA SOURCE OR PUBLISH DATA AS SOURCE
    THE ONLY CAVEAT - ONE (1) MSG PER SECOND OVER THE CLOUD 
  */
  Particle.subscribe("refertome", backtome);

  Serial.begin(57600);
   b4120:	f001 fa16 	bl	b5550 <_Z16_fetch_usbserialv>
   b4124:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   b4128:	f001 fa02 	bl	b5530 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b412c:	4620      	mov	r0, r4
   b412e:	f000 f9d5 	bl	b44dc <hal_timer_millis>
        while (_while() && !_condition()) {
   b4132:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4136:	4604      	mov	r4, r0
   b4138:	2000      	movs	r0, #0
   b413a:	f000 f9cf 	bl	b44dc <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b413e:	1b00      	subs	r0, r0, r4
   b4140:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4144:	42a8      	cmp	r0, r5
   b4146:	f171 0300 	sbcs.w	r3, r1, #0
   b414a:	d207      	bcs.n	b415c <setup+0x5c>
  //while( !Serial.isConnected() ) // wait for Host to open serial port
  waitFor(Serial.isConnected, 15000); 
   b414c:	f001 fa00 	bl	b5550 <_Z16_fetch_usbserialv>
   b4150:	f001 f9f2 	bl	b5538 <_ZN9USBSerial11isConnectedEv>
   b4154:	b910      	cbnz	r0, b415c <setup+0x5c>
            spark_process();
   b4156:	f000 fb0d 	bl	b4774 <spark_process>
        while (_while() && !_condition()) {
   b415a:	e7ed      	b.n	b4138 <setup+0x38>
   b415c:	f001 f9f8 	bl	b5550 <_Z16_fetch_usbserialv>
   b4160:	f001 f9ea 	bl	b5538 <_ZN9USBSerial11isConnectedEv>

  /* BLUE DEBUG LED */
  pinMode(DEBUG_LED, OUTPUT);
   b4164:	2101      	movs	r1, #1
   b4166:	2007      	movs	r0, #7
   b4168:	f001 fb30 	bl	b57cc <pinMode>
  /* WHITE LED ? DIGITAL : PWM */
  pinMode(WHITE_LED, OUTPUT);
   b416c:	2101      	movs	r1, #1
   b416e:	2002      	movs	r0, #2
   b4170:	f001 fb2c 	bl	b57cc <pinMode>

  /* RGB LED */
  pinMode(R_LED, OUTPUT);
   b4174:	2101      	movs	r1, #1
   b4176:	2006      	movs	r0, #6
   b4178:	f001 fb28 	bl	b57cc <pinMode>
  pinMode(G_LED, OUTPUT);
   b417c:	2101      	movs	r1, #1
   b417e:	2005      	movs	r0, #5
   b4180:	f001 fb24 	bl	b57cc <pinMode>
  pinMode(B_LED, OUTPUT);
   b4184:	2101      	movs	r1, #1
   b4186:	2004      	movs	r0, #4
   b4188:	f001 fb20 	bl	b57cc <pinMode>

  /* INPUT: PUSH BUTTON */
  pinMode(B_TN, INPUT_PULLUP); // REQUIRE PULLUP OR PULLDOWN RESISTOR
   b418c:	2102      	movs	r1, #2
   b418e:	2000      	movs	r0, #0
   b4190:	f001 fb1c 	bl	b57cc <pinMode>

  delay(5); // Force Serial.println in void setup()
   b4194:	2005      	movs	r0, #5
   b4196:	f000 fbb5 	bl	b4904 <delay>
  Serial.println("Completed void setup");
   b419a:	f001 f9d9 	bl	b5550 <_Z16_fetch_usbserialv>
   b419e:	4907      	ldr	r1, [pc, #28]	; (b41bc <setup+0xbc>)
}
   b41a0:	b003      	add	sp, #12
   b41a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println("Completed void setup");
   b41a6:	f001 b8a0 	b.w	b52ea <_ZN5Print7printlnEPKc>
   b41aa:	bf00      	nop
   b41ac:	000b5db8 	.word	0x000b5db8
   b41b0:	000b5dc1 	.word	0x000b5dc1
   b41b4:	000b4355 	.word	0x000b4355
   b41b8:	000b5dca 	.word	0x000b5dca
   b41bc:	000b5dd4 	.word	0x000b5dd4

000b41c0 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
   b41c0:	b570      	push	{r4, r5, r6, lr}
   b41c2:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b41c4:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
   b41c6:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
   b41c8:	f000 faa8 	bl	b471c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b41cc:	b120      	cbz	r0, b41d8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x18>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b41ce:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b41d0:	b913      	cbnz	r3, b41d8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x18>
        spark_process();
   b41d2:	f000 facf 	bl	b4774 <spark_process>
    }
   b41d6:	e7fa      	b.n	b41ce <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0xe>
   b41d8:	7863      	ldrb	r3, [r4, #1]
   b41da:	f3bf 8f5b 	dmb	ish
   b41de:	1c66      	adds	r6, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b41e0:	b90b      	cbnz	r3, b41e6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>
        return std::move(defaultValue);
   b41e2:	4628      	mov	r0, r5
    }
   b41e4:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
   b41e6:	2000      	movs	r0, #0
   b41e8:	f000 fa98 	bl	b471c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b41ec:	b120      	cbz	r0, b41f8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x38>
   b41ee:	7833      	ldrb	r3, [r6, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b41f0:	b913      	cbnz	r3, b41f8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x38>
        spark_process();
   b41f2:	f000 fabf 	bl	b4774 <spark_process>
    }
   b41f6:	e7fa      	b.n	b41ee <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x2e>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b41f8:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b41fa:	2b01      	cmp	r3, #1
   b41fc:	d1f1      	bne.n	b41e2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x22>
            return result_;
   b41fe:	7b20      	ldrb	r0, [r4, #12]
   b4200:	e7f0      	b.n	b41e4 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
	...

000b4204 <loop>:

void loop() {
   b4204:	b530      	push	{r4, r5, lr}

    if( digitalRead(B_TN) == LOW ) {
   b4206:	2000      	movs	r0, #0
void loop() {
   b4208:	b085      	sub	sp, #20
    if( digitalRead(B_TN) == LOW ) {
   b420a:	f001 fb09 	bl	b5820 <digitalRead>
   b420e:	4604      	mov	r4, r0
   b4210:	2800      	cmp	r0, #0
   b4212:	d135      	bne.n	b4280 <loop+0x7c>
        /* EVENTS CAN ONLY BE PUBLISHED ONCE PER SECOND */
        digitalWrite(DEBUG_LED, HIGH); 
   b4214:	2101      	movs	r1, #1
   b4216:	2007      	movs	r0, #7
   b4218:	f001 fae9 	bl	b57ee <digitalWrite>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b421c:	4b19      	ldr	r3, [pc, #100]	; (b4284 <loop+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b421e:	4a1a      	ldr	r2, [pc, #104]	; (b4288 <loop+0x84>)
   b4220:	781b      	ldrb	r3, [r3, #0]
   b4222:	491a      	ldr	r1, [pc, #104]	; (b428c <loop+0x88>)
   b4224:	f88d 3000 	strb.w	r3, [sp]
   b4228:	a802      	add	r0, sp, #8
   b422a:	233c      	movs	r3, #60	; 0x3c
   b422c:	f000 fce6 	bl	b4bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
   b4230:	4621      	mov	r1, r4
   b4232:	9802      	ldr	r0, [sp, #8]
   b4234:	f7ff ffc4 	bl	b41c0 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4238:	9c03      	ldr	r4, [sp, #12]
   b423a:	4605      	mov	r5, r0
   b423c:	b17c      	cbz	r4, b425e <loop+0x5a>
      if (--_M_use_count == 0)
   b423e:	6863      	ldr	r3, [r4, #4]
   b4240:	3b01      	subs	r3, #1
   b4242:	6063      	str	r3, [r4, #4]
   b4244:	b95b      	cbnz	r3, b425e <loop+0x5a>
          _M_dispose();
   b4246:	6823      	ldr	r3, [r4, #0]
   b4248:	4620      	mov	r0, r4
   b424a:	689b      	ldr	r3, [r3, #8]
   b424c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b424e:	68a3      	ldr	r3, [r4, #8]
   b4250:	3b01      	subs	r3, #1
   b4252:	60a3      	str	r3, [r4, #8]
   b4254:	b91b      	cbnz	r3, b425e <loop+0x5a>
            _M_destroy();
   b4256:	6823      	ldr	r3, [r4, #0]
   b4258:	4620      	mov	r0, r4
   b425a:	68db      	ldr	r3, [r3, #12]
   b425c:	4798      	blx	r3

        // https://docs.particle.io/reference/device-os/api/cloud-functions/particle-publish/
        if( Particle.publish("refertome", "45.4786288,-73.617024,45.4953688,-73.57799640000002") ) Serial.println ("published");
   b425e:	b125      	cbz	r5, b426a <loop+0x66>
   b4260:	f001 f976 	bl	b5550 <_Z16_fetch_usbserialv>
   b4264:	490a      	ldr	r1, [pc, #40]	; (b4290 <loop+0x8c>)
   b4266:	f001 f840 	bl	b52ea <_ZN5Print7printlnEPKc>
        delay(1001); // PUBLISH ONCE PER SECOND
   b426a:	f240 30e9 	movw	r0, #1001	; 0x3e9
   b426e:	f000 fb49 	bl	b4904 <delay>

        digitalWrite(DEBUG_LED, LOW);
   b4272:	2100      	movs	r1, #0
   b4274:	2007      	movs	r0, #7
    }
}
   b4276:	b005      	add	sp, #20
   b4278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(DEBUG_LED, LOW);
   b427c:	f001 bab7 	b.w	b57ee <digitalWrite>
}
   b4280:	b005      	add	sp, #20
   b4282:	bd30      	pop	{r4, r5, pc}
   b4284:	2003e6c0 	.word	0x2003e6c0
   b4288:	000b5de9 	.word	0x000b5de9
   b428c:	000b5dca 	.word	0x000b5dca
   b4290:	000b5e1d 	.word	0x000b5e1d

000b4294 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4298:	e9d0 8a00 	ldrd	r8, sl, [r0]
   b429c:	4c2a      	ldr	r4, [pc, #168]	; (b4348 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xb4>)
   b429e:	ebaa 0308 	sub.w	r3, sl, r8
   b42a2:	4689      	mov	r9, r1
   b42a4:	10db      	asrs	r3, r3, #3
   b42a6:	4611      	mov	r1, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b42a8:	4a28      	ldr	r2, [pc, #160]	; (b434c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xb8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42aa:	4363      	muls	r3, r4
	if (max_size() - size() < __n)
   b42ac:	4293      	cmp	r3, r2
   b42ae:	4607      	mov	r7, r0
   b42b0:	d102      	bne.n	b42b8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b42b2:	4827      	ldr	r0, [pc, #156]	; (b4350 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xbc>)
   b42b4:	f001 fb4e 	bl	b5954 <_ZSt20__throw_length_errorPKc>
   b42b8:	2b01      	cmp	r3, #1
   b42ba:	461c      	mov	r4, r3
   b42bc:	bf38      	it	cc
   b42be:	2401      	movcc	r4, #1
   b42c0:	18e4      	adds	r4, r4, r3
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b42c2:	eba9 0508 	sub.w	r5, r9, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b42c6:	d21c      	bcs.n	b4302 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b42c8:	b1ec      	cbz	r4, b4306 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x72>
   b42ca:	4294      	cmp	r4, r2
   b42cc:	bf28      	it	cs
   b42ce:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b42d0:	2018      	movs	r0, #24
   b42d2:	4360      	muls	r0, r4
   b42d4:	9101      	str	r1, [sp, #4]
   b42d6:	f7ff fee4 	bl	b40a2 <_Znwj>
   b42da:	9901      	ldr	r1, [sp, #4]
   b42dc:	4606      	mov	r6, r0
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
   b42de:	1970      	adds	r0, r6, r5
   b42e0:	f7ff feef 	bl	b40c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42e4:	4645      	mov	r5, r8
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b42e6:	4630      	mov	r0, r6
      for (; __first != __last; ++__first, (void)++__cur)
   b42e8:	45a9      	cmp	r9, r5
   b42ea:	f100 0b18 	add.w	fp, r0, #24
   b42ee:	d00c      	beq.n	b430a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x76>
   b42f0:	4629      	mov	r1, r5
   b42f2:	f7ff fee6 	bl	b40c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   b42f6:	4628      	mov	r0, r5
   b42f8:	f001 fc08 	bl	b5b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b42fc:	3518      	adds	r5, #24
   b42fe:	4658      	mov	r0, fp
   b4300:	e7f2      	b.n	b42e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4302:	4614      	mov	r4, r2
   b4304:	e7e4      	b.n	b42d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4306:	4626      	mov	r6, r4
   b4308:	e7e9      	b.n	b42de <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4a>
   b430a:	4555      	cmp	r5, sl
   b430c:	d00a      	beq.n	b4324 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x90>
   b430e:	4629      	mov	r1, r5
   b4310:	4658      	mov	r0, fp
   b4312:	f7ff fed6 	bl	b40c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0>
   b4316:	4628      	mov	r0, r5
   b4318:	f001 fbf8 	bl	b5b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b431c:	3518      	adds	r5, #24
   b431e:	f10b 0b18 	add.w	fp, fp, #24
   b4322:	e7f2      	b.n	b430a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x76>
	if (__p)
   b4324:	f1b8 0f00 	cmp.w	r8, #0
   b4328:	d005      	beq.n	b4336 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xa2>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b432a:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b432c:	4640      	mov	r0, r8
   b432e:	eba1 0108 	sub.w	r1, r1, r8
   b4332:	f7ff febc 	bl	b40ae <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4336:	2018      	movs	r0, #24
   b4338:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b433c:	e9c7 6b00 	strd	r6, fp, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4340:	60bc      	str	r4, [r7, #8]
    }
   b4342:	b003      	add	sp, #12
   b4344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4348:	aaaaaaab 	.word	0xaaaaaaab
   b434c:	05555555 	.word	0x05555555
   b4350:	000b5e27 	.word	0x000b5e27

000b4354 <_Z8backtomePKcS0_>:

/* PARTICLE CLOUD SUBSCRIBE CALLBACK */
void backtome(const char *event, const char *data) {
   b4354:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4356:	b08d      	sub	sp, #52	; 0x34
   b4358:	af00      	add	r7, sp, #0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b435a:	2300      	movs	r3, #0

 /* EXAMPLE TOKENISER */
    //char *datas = "45.4786288,-73.617024,45.4953688,-73.57799640000002";
     vector<string> result;
      //get original length
    char copyData[strlen(data)];
   b435c:	4608      	mov	r0, r1
   b435e:	e9c7 3303 	strd	r3, r3, [r7, #12]
   b4362:	617b      	str	r3, [r7, #20]
   b4364:	6079      	str	r1, [r7, #4]
   b4366:	f7ff fe59 	bl	b401c <strlen>
   b436a:	1dc3      	adds	r3, r0, #7
   b436c:	f023 0307 	bic.w	r3, r3, #7
   b4370:	ebad 0d03 	sub.w	sp, sp, r3
    strcpy(copyData, data);
   b4374:	6879      	ldr	r1, [r7, #4]

    while (token != NULL) { 
    //add to the result array
      result.push_back(token);
      // strtok() contains a static pointer to the previous passed string
      token = strtok(NULL, ","); 
   b4376:	4d3d      	ldr	r5, [pc, #244]	; (b446c <_Z8backtomePKcS0_+0x118>)
    strcpy(copyData, data);
   b4378:	4668      	mov	r0, sp
   b437a:	f001 fc2b 	bl	b5bd4 <strcpy>
    token = strtok(copyData, ",");
   b437e:	493b      	ldr	r1, [pc, #236]	; (b446c <_Z8backtomePKcS0_+0x118>)
   b4380:	4668      	mov	r0, sp
   b4382:	f001 fc4d 	bl	b5c20 <strtok>
   b4386:	4604      	mov	r4, r0
    while (token != NULL) { 
   b4388:	2c00      	cmp	r4, #0
   b438a:	d03b      	beq.n	b4404 <_Z8backtomePKcS0_+0xb0>
	: allocator_type(__a), _M_p(__dat) { }
   b438c:	f107 0320 	add.w	r3, r7, #32
	return __builtin_strlen(__s);
   b4390:	4620      	mov	r0, r4
   b4392:	61bb      	str	r3, [r7, #24]
   b4394:	f7ff fe42 	bl	b401c <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4398:	280f      	cmp	r0, #15
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b439a:	eb04 0600 	add.w	r6, r4, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b439e:	60b8      	str	r0, [r7, #8]
	if (__dnew > size_type(_S_local_capacity))
   b43a0:	d909      	bls.n	b43b6 <_Z8backtomePKcS0_+0x62>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b43a2:	2200      	movs	r2, #0
   b43a4:	f107 0108 	add.w	r1, r7, #8
   b43a8:	f107 0018 	add.w	r0, r7, #24
   b43ac:	f001 fb8c 	bl	b5ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b43b0:	68bb      	ldr	r3, [r7, #8]
      { _M_dataplus._M_p = __p; }
   b43b2:	61b8      	str	r0, [r7, #24]
      { _M_allocated_capacity = __capacity; }
   b43b4:	623b      	str	r3, [r7, #32]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b43b6:	69b8      	ldr	r0, [r7, #24]
   b43b8:	4632      	mov	r2, r6
   b43ba:	4621      	mov	r1, r4
   b43bc:	f001 fbba 	bl	b5b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b43c0:	68bb      	ldr	r3, [r7, #8]
      { __c1 = __c2; }
   b43c2:	69ba      	ldr	r2, [r7, #24]
      { _M_string_length = __length; }
   b43c4:	61fb      	str	r3, [r7, #28]
   b43c6:	2100      	movs	r1, #0
   b43c8:	54d1      	strb	r1, [r2, r3]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b43ca:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
   b43ce:	4298      	cmp	r0, r3
   b43d0:	d010      	beq.n	b43f4 <_Z8backtomePKcS0_+0xa0>
   b43d2:	f107 0118 	add.w	r1, r7, #24
   b43d6:	f7ff fe74 	bl	b40c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_.isra.0>
	    ++this->_M_impl._M_finish;
   b43da:	693b      	ldr	r3, [r7, #16]
   b43dc:	3318      	adds	r3, #24
   b43de:	613b      	str	r3, [r7, #16]
      { _M_dispose(); }
   b43e0:	f107 0018 	add.w	r0, r7, #24
   b43e4:	f001 fb92 	bl	b5b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      token = strtok(NULL, ","); 
   b43e8:	4629      	mov	r1, r5
   b43ea:	2000      	movs	r0, #0
   b43ec:	f001 fc18 	bl	b5c20 <strtok>
   b43f0:	4604      	mov	r4, r0
    while (token != NULL) { 
   b43f2:	e7c9      	b.n	b4388 <_Z8backtomePKcS0_+0x34>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b43f4:	4601      	mov	r1, r0
   b43f6:	f107 0218 	add.w	r2, r7, #24
   b43fa:	f107 000c 	add.w	r0, r7, #12
   b43fe:	f7ff ff49 	bl	b4294 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   b4402:	e7ed      	b.n	b43e0 <_Z8backtomePKcS0_+0x8c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4404:	4d1a      	ldr	r5, [pc, #104]	; (b4470 <_Z8backtomePKcS0_+0x11c>)
      { return _M_dataplus._M_p; }
   b4406:	2618      	movs	r6, #24
   b4408:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
   b440c:	1a9b      	subs	r3, r3, r2
   b440e:	10db      	asrs	r3, r3, #3
   b4410:	436b      	muls	r3, r5
    } 

    for(int i=0; i<result.size();i++){
   b4412:	42a3      	cmp	r3, r4
   b4414:	d913      	bls.n	b443e <_Z8backtomePKcS0_+0xea>
        Serial.println( result.at(i).c_str() );
   b4416:	f001 f89b 	bl	b5550 <_Z16_fetch_usbserialv>
   b441a:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b441e:	1ad2      	subs	r2, r2, r3
   b4420:	10d2      	asrs	r2, r2, #3
   b4422:	436a      	muls	r2, r5
	if (__n >= this->size())
   b4424:	42a2      	cmp	r2, r4
   b4426:	d803      	bhi.n	b4430 <_Z8backtomePKcS0_+0xdc>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4428:	4812      	ldr	r0, [pc, #72]	; (b4474 <_Z8backtomePKcS0_+0x120>)
   b442a:	4621      	mov	r1, r4
   b442c:	f001 fa95 	bl	b595a <_ZSt24__throw_out_of_range_fmtPKcz>
   b4430:	fb06 f204 	mul.w	r2, r6, r4
    for(int i=0; i<result.size();i++){
   b4434:	3401      	adds	r4, #1
        Serial.println( result.at(i).c_str() );
   b4436:	5899      	ldr	r1, [r3, r2]
   b4438:	f000 ff57 	bl	b52ea <_ZN5Print7printlnEPKc>
    for(int i=0; i<result.size();i++){
   b443c:	e7e4      	b.n	b4408 <_Z8backtomePKcS0_+0xb4>
    }
    Serial.println("received");
   b443e:	f001 f887 	bl	b5550 <_Z16_fetch_usbserialv>
   b4442:	490d      	ldr	r1, [pc, #52]	; (b4478 <_Z8backtomePKcS0_+0x124>)
   b4444:	f000 ff51 	bl	b52ea <_ZN5Print7printlnEPKc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4448:	e9d7 4503 	ldrd	r4, r5, [r7, #12]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b444c:	42a5      	cmp	r5, r4
   b444e:	d004      	beq.n	b445a <_Z8backtomePKcS0_+0x106>
      { _M_dispose(); }
   b4450:	4620      	mov	r0, r4
   b4452:	f001 fb5b 	bl	b5b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4456:	3418      	adds	r4, #24
   b4458:	e7f8      	b.n	b444c <_Z8backtomePKcS0_+0xf8>
	_M_deallocate(_M_impl._M_start,
   b445a:	68f8      	ldr	r0, [r7, #12]
	if (__p)
   b445c:	b118      	cbz	r0, b4466 <_Z8backtomePKcS0_+0x112>
   b445e:	6979      	ldr	r1, [r7, #20]
   b4460:	1a09      	subs	r1, r1, r0
   b4462:	f7ff fe24 	bl	b40ae <_ZdlPvj>
   b4466:	3734      	adds	r7, #52	; 0x34
   b4468:	46bd      	mov	sp, r7
   b446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b446c:	000b5e41 	.word	0x000b5e41
   b4470:	aaaaaaab 	.word	0xaaaaaaab
   b4474:	000b5e43 	.word	0x000b5e43
   b4478:	000b5e8d 	.word	0x000b5e8d

000b447c <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
   b447c:	4b08      	ldr	r3, [pc, #32]	; (b44a0 <_GLOBAL__sub_I_SystemMode+0x24>)
   b447e:	b510      	push	{r4, lr}
   b4480:	2400      	movs	r4, #0
   b4482:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b4484:	4621      	mov	r1, r4
   b4486:	2001      	movs	r0, #1
   b4488:	f000 f940 	bl	b470c <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b448c:	4b05      	ldr	r3, [pc, #20]	; (b44a4 <_GLOBAL__sub_I_SystemMode+0x28>)
    SleepResult() {}
   b448e:	4a06      	ldr	r2, [pc, #24]	; (b44a8 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4490:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4492:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4496:	2001      	movs	r0, #1
   b4498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b449c:	f000 b926 	b.w	b46ec <set_system_mode>
   b44a0:	2003e6c0 	.word	0x2003e6c0
   b44a4:	2003e6b4 	.word	0x2003e6b4
   b44a8:	ffff0000 	.word	0xffff0000

000b44ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <os_mutex_recursive_create+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030248 	.word	0x00030248

000b44bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <HAL_RNG_GetRandomNumber+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	685b      	ldr	r3, [r3, #4]
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030218 	.word	0x00030218

000b44cc <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	695b      	ldr	r3, [r3, #20]
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030218 	.word	0x00030218

000b44dc <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <hal_timer_millis+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030218 	.word	0x00030218

000b44ec <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <hal_gpio_mode+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	689b      	ldr	r3, [r3, #8]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	0003022c 	.word	0x0003022c

000b44fc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <hal_gpio_get_mode+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	68db      	ldr	r3, [r3, #12]
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	0003022c 	.word	0x0003022c

000b450c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <hal_gpio_write+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	691b      	ldr	r3, [r3, #16]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	0003022c 	.word	0x0003022c

000b451c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <hal_gpio_read+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	695b      	ldr	r3, [r3, #20]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	0003022c 	.word	0x0003022c

000b452c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <hal_i2c_write+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	6a1b      	ldr	r3, [r3, #32]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	00030228 	.word	0x00030228

000b453c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <hal_i2c_available+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	00030228 	.word	0x00030228

000b454c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <hal_i2c_read+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	00030228 	.word	0x00030228

000b455c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <hal_i2c_peek+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	00030228 	.word	0x00030228

000b456c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <hal_i2c_flush+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	00030228 	.word	0x00030228

000b457c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <hal_i2c_is_enabled+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	00030228 	.word	0x00030228

000b458c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <hal_i2c_init+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	00030228 	.word	0x00030228

000b459c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <inet_inet_ntop+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	695b      	ldr	r3, [r3, #20]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	00030264 	.word	0x00030264

000b45ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <netdb_freeaddrinfo+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	689b      	ldr	r3, [r3, #8]
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	00030268 	.word	0x00030268

000b45bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <netdb_getaddrinfo+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	68db      	ldr	r3, [r3, #12]
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	00030268 	.word	0x00030268

000b45cc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <hal_spi_init+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	69db      	ldr	r3, [r3, #28]
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	00030230 	.word	0x00030230

000b45dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b02      	ldr	r3, [pc, #8]	; (b45e8 <hal_spi_is_enabled+0xc>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	6a1b      	ldr	r3, [r3, #32]
   b45e4:	9301      	str	r3, [sp, #4]
   b45e6:	bd08      	pop	{r3, pc}
   b45e8:	00030230 	.word	0x00030230

000b45ec <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <hal_usart_write+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	68db      	ldr	r3, [r3, #12]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	0003023c 	.word	0x0003023c

000b45fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <hal_usart_available+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	691b      	ldr	r3, [r3, #16]
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	0003023c 	.word	0x0003023c

000b460c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <hal_usart_read+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	695b      	ldr	r3, [r3, #20]
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	0003023c 	.word	0x0003023c

000b461c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <hal_usart_peek+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	699b      	ldr	r3, [r3, #24]
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	0003023c 	.word	0x0003023c

000b462c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <hal_usart_flush+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	69db      	ldr	r3, [r3, #28]
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	0003023c 	.word	0x0003023c

000b463c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <hal_usart_is_enabled+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	6a1b      	ldr	r3, [r3, #32]
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	0003023c 	.word	0x0003023c

000b464c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <hal_usart_available_data_for_write+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	0003023c 	.word	0x0003023c

000b465c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <hal_usart_init_ex+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	0003023c 	.word	0x0003023c

000b466c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <HAL_USB_USART_Init+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	681b      	ldr	r3, [r3, #0]
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	0003024c 	.word	0x0003024c

000b467c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <HAL_USB_USART_Begin+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	685b      	ldr	r3, [r3, #4]
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	0003024c 	.word	0x0003024c

000b468c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <HAL_USB_USART_Available_Data+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	691b      	ldr	r3, [r3, #16]
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	0003024c 	.word	0x0003024c

000b469c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	695b      	ldr	r3, [r3, #20]
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	0003024c 	.word	0x0003024c

000b46ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <HAL_USB_USART_Receive_Data+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	699b      	ldr	r3, [r3, #24]
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	0003024c 	.word	0x0003024c

000b46bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <HAL_USB_USART_Send_Data+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	69db      	ldr	r3, [r3, #28]
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	0003024c 	.word	0x0003024c

000b46cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <HAL_USB_USART_Flush_Data+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	6a1b      	ldr	r3, [r3, #32]
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	0003024c 	.word	0x0003024c

000b46dc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <HAL_USB_USART_Is_Connected+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	0003024c 	.word	0x0003024c

000b46ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <set_system_mode+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	685b      	ldr	r3, [r3, #4]
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	00030220 	.word	0x00030220

000b46fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <system_delay_ms+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	695b      	ldr	r3, [r3, #20]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030220 	.word	0x00030220

000b470c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <system_thread_set_state+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030220 	.word	0x00030220

000b471c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <application_thread_current+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030220 	.word	0x00030220

000b472c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <application_thread_invoke+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030220 	.word	0x00030220

000b473c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b03      	ldr	r3, [pc, #12]	; (b474c <system_ctrl_set_app_request_handler+0x10>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4746:	9301      	str	r3, [sp, #4]
   b4748:	bd08      	pop	{r3, pc}
   b474a:	0000      	.short	0x0000
   b474c:	00030220 	.word	0x00030220

000b4750 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b03      	ldr	r3, [pc, #12]	; (b4760 <system_ctrl_set_result+0x10>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b475a:	9301      	str	r3, [sp, #4]
   b475c:	bd08      	pop	{r3, pc}
   b475e:	0000      	.short	0x0000
   b4760:	00030220 	.word	0x00030220

000b4764 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <spark_variable+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	681b      	ldr	r3, [r3, #0]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	00030244 	.word	0x00030244

000b4774 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <spark_process+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	689b      	ldr	r3, [r3, #8]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	00030244 	.word	0x00030244

000b4784 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <spark_cloud_flag_connected+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	695b      	ldr	r3, [r3, #20]
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	00030244 	.word	0x00030244

000b4794 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <spark_send_event+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6a1b      	ldr	r3, [r3, #32]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	00030244 	.word	0x00030244

000b47a4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <spark_subscribe+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	00030244 	.word	0x00030244

000b47b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	00030244 	.word	0x00030244

000b47c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <network_connect+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	685b      	ldr	r3, [r3, #4]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	00030240 	.word	0x00030240

000b47d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <network_connecting+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	689b      	ldr	r3, [r3, #8]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	00030240 	.word	0x00030240

000b47e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <network_disconnect+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	68db      	ldr	r3, [r3, #12]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	00030240 	.word	0x00030240

000b47f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <network_ready+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	691b      	ldr	r3, [r3, #16]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030240 	.word	0x00030240

000b4804 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <network_on+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	695b      	ldr	r3, [r3, #20]
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030240 	.word	0x00030240

000b4814 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <network_off+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	699b      	ldr	r3, [r3, #24]
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030240 	.word	0x00030240

000b4824 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <network_listen+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	69db      	ldr	r3, [r3, #28]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030240 	.word	0x00030240

000b4834 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <network_listening+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	6a1b      	ldr	r3, [r3, #32]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030240 	.word	0x00030240

000b4844 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <network_set_listen_timeout+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	00030240 	.word	0x00030240

000b4854 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <network_get_listen_timeout+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030240 	.word	0x00030240

000b4864 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <network_is_on+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030240 	.word	0x00030240

000b4874 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <network_is_off+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030240 	.word	0x00030240

000b4884 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <network_prefer+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030240 	.word	0x00030240

000b4894 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <network_is_preferred+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030240 	.word	0x00030240

000b48a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <malloc+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	681b      	ldr	r3, [r3, #0]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	0003021c 	.word	0x0003021c

000b48b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <free+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	685b      	ldr	r3, [r3, #4]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	0003021c 	.word	0x0003021c

000b48c4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <abort+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	0003021c 	.word	0x0003021c

000b48d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <_malloc_r+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	0003021c 	.word	0x0003021c

000b48e4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <__assert_func+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	0003021c 	.word	0x0003021c

000b48f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <newlib_impure_ptr_callback+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	0003021c 	.word	0x0003021c

000b4904 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4904:	2100      	movs	r1, #0
   b4906:	f7ff bef9 	b.w	b46fc <system_delay_ms>

000b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b490a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b490c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b490e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4910:	b17c      	cbz	r4, b4932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4912:	6863      	ldr	r3, [r4, #4]
   b4914:	3b01      	subs	r3, #1
   b4916:	6063      	str	r3, [r4, #4]
   b4918:	b95b      	cbnz	r3, b4932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b491a:	6823      	ldr	r3, [r4, #0]
   b491c:	4620      	mov	r0, r4
   b491e:	689b      	ldr	r3, [r3, #8]
   b4920:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4922:	68a3      	ldr	r3, [r4, #8]
   b4924:	3b01      	subs	r3, #1
   b4926:	60a3      	str	r3, [r4, #8]
   b4928:	b91b      	cbnz	r3, b4932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b492a:	6823      	ldr	r3, [r4, #0]
   b492c:	4620      	mov	r0, r4
   b492e:	68db      	ldr	r3, [r3, #12]
   b4930:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4932:	4628      	mov	r0, r5
   b4934:	bd38      	pop	{r3, r4, r5, pc}

000b4936 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4936:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4938:	6883      	ldr	r3, [r0, #8]
   b493a:	4604      	mov	r4, r0
   b493c:	b90b      	cbnz	r3, b4942 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b493e:	f001 f828 	bl	b5992 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4942:	68c3      	ldr	r3, [r0, #12]
   b4944:	4798      	blx	r3
      if (_M_manager)
   b4946:	68a3      	ldr	r3, [r4, #8]
   b4948:	b11b      	cbz	r3, b4952 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b494a:	2203      	movs	r2, #3
   b494c:	4621      	mov	r1, r4
   b494e:	4620      	mov	r0, r4
   b4950:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4952:	4620      	mov	r0, r4
   b4954:	2110      	movs	r1, #16
}
   b4956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b495a:	f7ff bba8 	b.w	b40ae <_ZdlPvj>

000b495e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b495e:	b510      	push	{r4, lr}
      if (_M_manager)
   b4960:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4962:	4604      	mov	r4, r0
      if (_M_manager)
   b4964:	b113      	cbz	r3, b496c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4966:	2203      	movs	r2, #3
   b4968:	4601      	mov	r1, r0
   b496a:	4798      	blx	r3
    }
   b496c:	4620      	mov	r0, r4
   b496e:	bd10      	pop	{r4, pc}

000b4970 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4970:	b513      	push	{r0, r1, r4, lr}
   b4972:	460b      	mov	r3, r1
   b4974:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4976:	e9d0 0100 	ldrd	r0, r1, [r0]
   b497a:	466c      	mov	r4, sp
   b497c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4980:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4984:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4988:	e894 0003 	ldmia.w	r4, {r0, r1}
   b498c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4990:	b002      	add	sp, #8
   b4992:	bd10      	pop	{r4, pc}

000b4994 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4994:	4802      	ldr	r0, [pc, #8]	; (b49a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4996:	2300      	movs	r3, #0
   b4998:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b499a:	f7ff bd87 	b.w	b44ac <os_mutex_recursive_create>
   b499e:	bf00      	nop
   b49a0:	2003e6c4 	.word	0x2003e6c4

000b49a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b49a4:	4770      	bx	lr

000b49a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b49a6:	2000      	movs	r0, #0
   b49a8:	4770      	bx	lr

000b49aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b49aa:	b510      	push	{r4, lr}
   b49ac:	2110      	movs	r1, #16
   b49ae:	4604      	mov	r4, r0
   b49b0:	f7ff fb7d 	bl	b40ae <_ZdlPvj>
   b49b4:	4620      	mov	r0, r4
   b49b6:	bd10      	pop	{r4, pc}

000b49b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b49b8:	b508      	push	{r3, lr}
      { delete this; }
   b49ba:	f7ff fff6 	bl	b49aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b49be:	bd08      	pop	{r3, pc}

000b49c0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b49c0:	b530      	push	{r4, r5, lr}
        type_(type) {
   b49c2:	2200      	movs	r2, #0
   b49c4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b49c8:	6002      	str	r2, [r0, #0]
   b49ca:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b49cc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b49ce:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b49d0:	680c      	ldr	r4, [r1, #0]
   b49d2:	8085      	strh	r5, [r0, #4]
   b49d4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b49d6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b49d8:	bd30      	pop	{r4, r5, pc}

000b49da <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b49da:	b510      	push	{r4, lr}
   b49dc:	4604      	mov	r4, r0
    free((void*)msg_);
   b49de:	6800      	ldr	r0, [r0, #0]
   b49e0:	f7ff ff68 	bl	b48b4 <free>
}
   b49e4:	4620      	mov	r0, r4
   b49e6:	bd10      	pop	{r4, pc}

000b49e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b49e8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b49ea:	68c4      	ldr	r4, [r0, #12]
   b49ec:	b1f4      	cbz	r4, b4a2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b49ee:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b49f0:	2b02      	cmp	r3, #2
   b49f2:	d103      	bne.n	b49fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b49f4:	f104 000c 	add.w	r0, r4, #12
   b49f8:	f7ff ffef 	bl	b49da <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b49fc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b49fe:	b135      	cbz	r5, b4a0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4a00:	4628      	mov	r0, r5
   b4a02:	f7ff ffac 	bl	b495e <_ZNSt14_Function_baseD1Ev>
   b4a06:	2110      	movs	r1, #16
   b4a08:	4628      	mov	r0, r5
   b4a0a:	f7ff fb50 	bl	b40ae <_ZdlPvj>
   b4a0e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4a10:	b135      	cbz	r5, b4a20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4a12:	4628      	mov	r0, r5
   b4a14:	f7ff ffa3 	bl	b495e <_ZNSt14_Function_baseD1Ev>
   b4a18:	2110      	movs	r1, #16
   b4a1a:	4628      	mov	r0, r5
   b4a1c:	f7ff fb47 	bl	b40ae <_ZdlPvj>
   b4a20:	4620      	mov	r0, r4
   b4a22:	2114      	movs	r1, #20
   b4a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a28:	f7ff bb41 	b.w	b40ae <_ZdlPvj>
   b4a2c:	bd38      	pop	{r3, r4, r5, pc}

000b4a2e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4a2e:	680b      	ldr	r3, [r1, #0]
   b4a30:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4a32:	684b      	ldr	r3, [r1, #4]
   b4a34:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4a36:	b113      	cbz	r3, b4a3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4a38:	685a      	ldr	r2, [r3, #4]
   b4a3a:	3201      	adds	r2, #1
   b4a3c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4a3e:	4770      	bx	lr

000b4a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4a42:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4a44:	4668      	mov	r0, sp
   b4a46:	460d      	mov	r5, r1
   b4a48:	f7ff fff1 	bl	b4a2e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4a4c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4a4e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4a50:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4a52:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4a54:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4a56:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4a58:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4a5a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4a5c:	f7ff ff55 	bl	b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4a60:	b135      	cbz	r5, b4a70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4a62:	1d28      	adds	r0, r5, #4
   b4a64:	f7ff ff51 	bl	b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a68:	2108      	movs	r1, #8
   b4a6a:	4628      	mov	r0, r5
   b4a6c:	f7ff fb1f 	bl	b40ae <_ZdlPvj>
        return p;
    }
   b4a70:	4620      	mov	r0, r4
   b4a72:	b003      	add	sp, #12
   b4a74:	bd30      	pop	{r4, r5, pc}

000b4a76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4a76:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4a78:	b510      	push	{r4, lr}
      if (_M_empty())
   b4a7a:	b90a      	cbnz	r2, b4a80 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4a7c:	f000 ff89 	bl	b5992 <_ZSt25__throw_bad_function_callv>
    }
   b4a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4a84:	68c3      	ldr	r3, [r0, #12]
   b4a86:	4718      	bx	r3

000b4a88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4a88:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4a8a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4a8c:	f100 0110 	add.w	r1, r0, #16
   b4a90:	f7ff fff1 	bl	b4a76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4a94:	bd08      	pop	{r3, pc}

000b4a96 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4a96:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4a98:	b510      	push	{r4, lr}
      if (_M_empty())
   b4a9a:	b90a      	cbnz	r2, b4aa0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4a9c:	f000 ff79 	bl	b5992 <_ZSt25__throw_bad_function_callv>
    }
   b4aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4aa4:	68c3      	ldr	r3, [r0, #12]
   b4aa6:	4718      	bx	r3

000b4aa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4aa8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4aaa:	6800      	ldr	r0, [r0, #0]
   b4aac:	f100 0110 	add.w	r1, r0, #16
   b4ab0:	f7ff fff1 	bl	b4a96 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4ab4:	bd08      	pop	{r3, pc}
	...

000b4ab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4ab8:	b538      	push	{r3, r4, r5, lr}
   b4aba:	2300      	movs	r3, #0
   b4abc:	4604      	mov	r4, r0
   b4abe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ac0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4ac2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ac4:	f7ff faed 	bl	b40a2 <_Znwj>
   b4ac8:	b128      	cbz	r0, b4ad6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4aca:	2301      	movs	r3, #1
   b4acc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4ad0:	4b02      	ldr	r3, [pc, #8]	; (b4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4ad2:	6003      	str	r3, [r0, #0]
   b4ad4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ad6:	6020      	str	r0, [r4, #0]
	}
   b4ad8:	4620      	mov	r0, r4
   b4ada:	bd38      	pop	{r3, r4, r5, pc}
   b4adc:	000b5ea0 	.word	0x000b5ea0

000b4ae0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4ae0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4ae2:	2300      	movs	r3, #0
   b4ae4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4ae6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4ae8:	4604      	mov	r4, r0
   b4aea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4aec:	b12b      	cbz	r3, b4afa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4aee:	2202      	movs	r2, #2
   b4af0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4af2:	68eb      	ldr	r3, [r5, #12]
   b4af4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4af6:	68ab      	ldr	r3, [r5, #8]
   b4af8:	60a3      	str	r3, [r4, #8]
    }
   b4afa:	4620      	mov	r0, r4
   b4afc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4b02:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4b04:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4b06:	4668      	mov	r0, sp
   b4b08:	f7ff ff5a 	bl	b49c0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4b0c:	f04f 0302 	mov.w	r3, #2
   b4b10:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4b14:	2a00      	cmp	r2, #0
   b4b16:	d103      	bne.n	b4b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4b18:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4b1c:	2900      	cmp	r1, #0
   b4b1e:	d1f7      	bne.n	b4b10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4b20:	d125      	bne.n	b4b6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4b22:	f104 050c 	add.w	r5, r4, #12
   b4b26:	4669      	mov	r1, sp
   b4b28:	4628      	mov	r0, r5
   b4b2a:	f7ff ff49 	bl	b49c0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4b2e:	f3bf 8f5b 	dmb	ish
   b4b32:	2301      	movs	r3, #1
   b4b34:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4b36:	2000      	movs	r0, #0
   b4b38:	f104 0308 	add.w	r3, r4, #8
   b4b3c:	f3bf 8f5b 	dmb	ish
   b4b40:	e853 6f00 	ldrex	r6, [r3]
   b4b44:	e843 0200 	strex	r2, r0, [r3]
   b4b48:	2a00      	cmp	r2, #0
   b4b4a:	d1f9      	bne.n	b4b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4b4c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4b50:	b16e      	cbz	r6, b4b6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4b52:	f7ff fde3 	bl	b471c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4b56:	b178      	cbz	r0, b4b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4b58:	4629      	mov	r1, r5
   b4b5a:	4630      	mov	r0, r6
   b4b5c:	f7ff ff8b 	bl	b4a76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4b60:	4630      	mov	r0, r6
   b4b62:	f7ff fefc 	bl	b495e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4b66:	2110      	movs	r1, #16
   b4b68:	4630      	mov	r0, r6
   b4b6a:	f7ff faa0 	bl	b40ae <_ZdlPvj>
        p_->setError(std::move(error));
   b4b6e:	4668      	mov	r0, sp
   b4b70:	f7ff ff33 	bl	b49da <_ZN8particle5ErrorD1Ev>
    }
   b4b74:	b009      	add	sp, #36	; 0x24
   b4b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4b78:	4631      	mov	r1, r6
   b4b7a:	a802      	add	r0, sp, #8
   b4b7c:	f7ff ffb0 	bl	b4ae0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4b80:	68e0      	ldr	r0, [r4, #12]
   b4b82:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4b86:	b108      	cbz	r0, b4b8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4b88:	f001 f82c 	bl	b5be4 <strdup>
        type_(type) {
   b4b8c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4b8e:	2010      	movs	r0, #16
   b4b90:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4b94:	f7ff fa85 	bl	b40a2 <_Znwj>
   b4b98:	4605      	mov	r5, r0
   b4b9a:	b1e8      	cbz	r0, b4bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4b9c:	2700      	movs	r7, #0
   b4b9e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ba0:	2018      	movs	r0, #24
   b4ba2:	f7ff fa7e 	bl	b40a2 <_Znwj>
   b4ba6:	4604      	mov	r4, r0
   b4ba8:	b188      	cbz	r0, b4bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4baa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4bac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4bae:	a802      	add	r0, sp, #8
   b4bb0:	f7ff fede 	bl	b4970 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4bb4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4bb6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4bb8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4bba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4bbc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4bbe:	a906      	add	r1, sp, #24
   b4bc0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4bc2:	60e3      	str	r3, [r4, #12]
   b4bc4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4bc8:	9205      	str	r2, [sp, #20]
   b4bca:	f7ff fef9 	bl	b49c0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4bce:	4b08      	ldr	r3, [pc, #32]	; (b4bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4bd0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4bd2:	4b08      	ldr	r3, [pc, #32]	; (b4bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4bd4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4bd6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4bd8:	a806      	add	r0, sp, #24
   b4bda:	f7ff fefe 	bl	b49da <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4bde:	a802      	add	r0, sp, #8
   b4be0:	f7ff febd 	bl	b495e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4be4:	2200      	movs	r2, #0
   b4be6:	4629      	mov	r1, r5
   b4be8:	4803      	ldr	r0, [pc, #12]	; (b4bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4bea:	f7ff fd9f 	bl	b472c <application_thread_invoke>
   b4bee:	e7b7      	b.n	b4b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4bf0:	000b4a89 	.word	0x000b4a89
   b4bf4:	000b4d0d 	.word	0x000b4d0d
   b4bf8:	000b4937 	.word	0x000b4937

000b4bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c00:	b08b      	sub	sp, #44	; 0x2c
   b4c02:	4605      	mov	r5, r0
   b4c04:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4c08:	460f      	mov	r7, r1
   b4c0a:	4690      	mov	r8, r2
   b4c0c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c0e:	f7ff fdb9 	bl	b4784 <spark_cloud_flag_connected>
   b4c12:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4c14:	4683      	mov	fp, r0
   b4c16:	bb38      	cbnz	r0, b4c68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4c18:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4c1c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4c1e:	a905      	add	r1, sp, #20
   b4c20:	4630      	mov	r0, r6
   b4c22:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4c26:	f7ff fecb 	bl	b49c0 <_ZN8particle5ErrorC1EOS0_>
   b4c2a:	2014      	movs	r0, #20
   b4c2c:	f7ff fa39 	bl	b40a2 <_Znwj>
   b4c30:	4604      	mov	r4, r0
   b4c32:	b148      	cbz	r0, b4c48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4c34:	2302      	movs	r3, #2
   b4c36:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4c38:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4c3a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4c3e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4c40:	4631      	mov	r1, r6
   b4c42:	300c      	adds	r0, #12
   b4c44:	f7ff febc 	bl	b49c0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4c48:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4c4a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4c4c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4c50:	f7ff ff32 	bl	b4ab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4c54:	4630      	mov	r0, r6
   b4c56:	f7ff fec0 	bl	b49da <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4c5a:	a805      	add	r0, sp, #20
   b4c5c:	f7ff febd 	bl	b49da <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4c60:	4628      	mov	r0, r5
   b4c62:	b00b      	add	sp, #44	; 0x2c
   b4c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4c68:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4c6a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4c6c:	2014      	movs	r0, #20
   b4c6e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4c72:	9307      	str	r3, [sp, #28]
   b4c74:	f7ff fa15 	bl	b40a2 <_Znwj>
   b4c78:	4601      	mov	r1, r0
   b4c7a:	b118      	cbz	r0, b4c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4c80:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4c82:	7044      	strb	r4, [r0, #1]
   b4c84:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4c86:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4c88:	f7ff ff16 	bl	b4ab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4c8c:	4b1e      	ldr	r3, [pc, #120]	; (b4d08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4c8e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4c90:	2008      	movs	r0, #8
   b4c92:	f7ff fa06 	bl	b40a2 <_Znwj>
   b4c96:	4604      	mov	r4, r0
   b4c98:	b110      	cbz	r0, b4ca0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4c9a:	a903      	add	r1, sp, #12
   b4c9c:	f7ff fec7 	bl	b4a2e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4ca0:	9600      	str	r6, [sp, #0]
   b4ca2:	fa5f f38a 	uxtb.w	r3, sl
   b4ca6:	464a      	mov	r2, r9
   b4ca8:	4641      	mov	r1, r8
   b4caa:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4cac:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4cae:	f7ff fd71 	bl	b4794 <spark_send_event>
   b4cb2:	b9b8      	cbnz	r0, b4ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4cb4:	9b03      	ldr	r3, [sp, #12]
   b4cb6:	785b      	ldrb	r3, [r3, #1]
   b4cb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4cbc:	b993      	cbnz	r3, b4ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4cbe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4cc2:	a905      	add	r1, sp, #20
   b4cc4:	a803      	add	r0, sp, #12
   b4cc6:	9205      	str	r2, [sp, #20]
   b4cc8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4ccc:	f7ff ff18 	bl	b4b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4cd0:	a805      	add	r0, sp, #20
   b4cd2:	f7ff fe82 	bl	b49da <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4cd6:	a805      	add	r0, sp, #20
   b4cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4cda:	f7ff feb1 	bl	b4a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4cde:	a806      	add	r0, sp, #24
   b4ce0:	f7ff fe13 	bl	b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ce4:	a903      	add	r1, sp, #12
   b4ce6:	a805      	add	r0, sp, #20
   b4ce8:	f7ff fea1 	bl	b4a2e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4cec:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4cee:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4cf0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4cf2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4cf4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4cf6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4cf8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4cfa:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4cfc:	f7ff fe05 	bl	b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4d00:	a804      	add	r0, sp, #16
   b4d02:	f7ff fe02 	bl	b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4d06:	e7ab      	b.n	b4c60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4d08:	000b4dd1 	.word	0x000b4dd1

000b4d0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4d0c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d10:	4605      	mov	r5, r0
	switch (__op)
   b4d12:	d103      	bne.n	b4d1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4d14:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4d16:	6003      	str	r3, [r0, #0]
      }
   b4d18:	2000      	movs	r0, #0
   b4d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4d1c:	2a02      	cmp	r2, #2
   b4d1e:	d010      	beq.n	b4d42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4d20:	2a03      	cmp	r2, #3
   b4d22:	d1f9      	bne.n	b4d18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4d24:	6804      	ldr	r4, [r0, #0]
   b4d26:	2c00      	cmp	r4, #0
   b4d28:	d0f6      	beq.n	b4d18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4d2a:	f104 0010 	add.w	r0, r4, #16
   b4d2e:	f7ff fe54 	bl	b49da <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4d32:	4620      	mov	r0, r4
   b4d34:	f7ff fe13 	bl	b495e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4d38:	2118      	movs	r1, #24
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	f7ff f9b7 	bl	b40ae <_ZdlPvj>
   b4d40:	e7ea      	b.n	b4d18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4d42:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4d44:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4d46:	f7ff f9ac 	bl	b40a2 <_Znwj>
   b4d4a:	4604      	mov	r4, r0
   b4d4c:	b150      	cbz	r0, b4d64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4d4e:	4631      	mov	r1, r6
   b4d50:	f7ff fec6 	bl	b4ae0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4d54:	6930      	ldr	r0, [r6, #16]
   b4d56:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4d5a:	b108      	cbz	r0, b4d60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4d5c:	f000 ff42 	bl	b5be4 <strdup>
        type_(type) {
   b4d60:	6120      	str	r0, [r4, #16]
   b4d62:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4d64:	602c      	str	r4, [r5, #0]
	}
   b4d66:	e7d7      	b.n	b4d18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4d68 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4d68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4d6a:	2300      	movs	r3, #0
   b4d6c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4d6e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4d70:	4604      	mov	r4, r0
   b4d72:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4d74:	b12b      	cbz	r3, b4d82 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4d76:	2202      	movs	r2, #2
   b4d78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4d7a:	68eb      	ldr	r3, [r5, #12]
   b4d7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4d7e:	68ab      	ldr	r3, [r5, #8]
   b4d80:	60a3      	str	r3, [r4, #8]
    }
   b4d82:	4620      	mov	r0, r4
   b4d84:	bd38      	pop	{r3, r4, r5, pc}

000b4d86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4d86:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4d88:	b570      	push	{r4, r5, r6, lr}
   b4d8a:	4604      	mov	r4, r0
	switch (__op)
   b4d8c:	d103      	bne.n	b4d96 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4d8e:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4d90:	6003      	str	r3, [r0, #0]
      }
   b4d92:	2000      	movs	r0, #0
   b4d94:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4d96:	2a02      	cmp	r2, #2
   b4d98:	d00c      	beq.n	b4db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4d9a:	2a03      	cmp	r2, #3
   b4d9c:	d1f9      	bne.n	b4d92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4d9e:	6804      	ldr	r4, [r0, #0]
   b4da0:	2c00      	cmp	r4, #0
   b4da2:	d0f6      	beq.n	b4d92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4da4:	4620      	mov	r0, r4
   b4da6:	f7ff fdda 	bl	b495e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4daa:	2114      	movs	r1, #20
   b4dac:	4620      	mov	r0, r4
   b4dae:	f7ff f97e 	bl	b40ae <_ZdlPvj>
   b4db2:	e7ee      	b.n	b4d92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4db4:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b4db6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4db8:	f7ff f973 	bl	b40a2 <_Znwj>
   b4dbc:	4605      	mov	r5, r0
   b4dbe:	b120      	cbz	r0, b4dca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b4dc0:	4631      	mov	r1, r6
   b4dc2:	f7ff ffd1 	bl	b4d68 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b4dc6:	7c33      	ldrb	r3, [r6, #16]
   b4dc8:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b4dca:	6025      	str	r5, [r4, #0]
	}
   b4dcc:	e7e1      	b.n	b4d92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b4dd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4dd2:	b089      	sub	sp, #36	; 0x24
   b4dd4:	4604      	mov	r4, r0
   b4dd6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4dd8:	a801      	add	r0, sp, #4
   b4dda:	4611      	mov	r1, r2
   b4ddc:	f7ff fe30 	bl	b4a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4de0:	b1a4      	cbz	r4, b4e0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4de2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4de4:	b11d      	cbz	r5, b4dee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4de6:	4628      	mov	r0, r5
   b4de8:	f000 fefc 	bl	b5be4 <strdup>
   b4dec:	4605      	mov	r5, r0
   b4dee:	a801      	add	r0, sp, #4
   b4df0:	a903      	add	r1, sp, #12
        type_(type) {
   b4df2:	9503      	str	r5, [sp, #12]
   b4df4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4df8:	f7ff fe82 	bl	b4b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4dfc:	a803      	add	r0, sp, #12
   b4dfe:	f7ff fdec 	bl	b49da <_ZN8particle5ErrorD1Ev>
   b4e02:	a802      	add	r0, sp, #8
   b4e04:	f7ff fd81 	bl	b490a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4e08:	b009      	add	sp, #36	; 0x24
   b4e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4e0c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4e0e:	2301      	movs	r3, #1
   b4e10:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4e14:	2a00      	cmp	r2, #0
   b4e16:	d103      	bne.n	b4e20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4e18:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4e1c:	2900      	cmp	r1, #0
   b4e1e:	d1f7      	bne.n	b4e10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4e20:	d1ef      	bne.n	b4e02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4e22:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4e24:	f3bf 8f5b 	dmb	ish
   b4e28:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4e2a:	1d2b      	adds	r3, r5, #4
   b4e2c:	f3bf 8f5b 	dmb	ish
   b4e30:	e853 6f00 	ldrex	r6, [r3]
   b4e34:	e843 4200 	strex	r2, r4, [r3]
   b4e38:	2a00      	cmp	r2, #0
   b4e3a:	d1f9      	bne.n	b4e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4e3c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4e40:	2e00      	cmp	r6, #0
   b4e42:	d0de      	beq.n	b4e02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4e44:	4620      	mov	r0, r4
   b4e46:	f7ff fc69 	bl	b471c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4e4a:	4607      	mov	r7, r0
   b4e4c:	b160      	cbz	r0, b4e68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4e4e:	f105 010c 	add.w	r1, r5, #12
   b4e52:	4630      	mov	r0, r6
   b4e54:	f7ff fe1f 	bl	b4a96 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4e58:	4630      	mov	r0, r6
   b4e5a:	f7ff fd80 	bl	b495e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4e5e:	2110      	movs	r1, #16
   b4e60:	4630      	mov	r0, r6
   b4e62:	f7ff f924 	bl	b40ae <_ZdlPvj>
   b4e66:	e7cc      	b.n	b4e02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4e68:	4631      	mov	r1, r6
   b4e6a:	a803      	add	r0, sp, #12
   b4e6c:	f7ff ff7c 	bl	b4d68 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4e70:	7b2b      	ldrb	r3, [r5, #12]
   b4e72:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4e76:	2010      	movs	r0, #16
   b4e78:	f7ff f913 	bl	b40a2 <_Znwj>
   b4e7c:	4605      	mov	r5, r0
   b4e7e:	b1d0      	cbz	r0, b4eb6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4e80:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4e82:	2014      	movs	r0, #20
   b4e84:	f7ff f90d 	bl	b40a2 <_Znwj>
   b4e88:	4604      	mov	r4, r0
   b4e8a:	b178      	cbz	r0, b4eac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4e8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4e8e:	4601      	mov	r1, r0
   b4e90:	a803      	add	r0, sp, #12
   b4e92:	f7ff fd6d 	bl	b4970 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e96:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4e98:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e9a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e9c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4e9e:	9205      	str	r2, [sp, #20]
   b4ea0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ea2:	60e3      	str	r3, [r4, #12]
   b4ea4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4ea8:	9206      	str	r2, [sp, #24]
   b4eaa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4eac:	4b06      	ldr	r3, [pc, #24]	; (b4ec8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4eae:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4eb0:	4b06      	ldr	r3, [pc, #24]	; (b4ecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4eb2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4eb4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4eb6:	a803      	add	r0, sp, #12
   b4eb8:	f7ff fd51 	bl	b495e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4ebc:	2200      	movs	r2, #0
   b4ebe:	4629      	mov	r1, r5
   b4ec0:	4803      	ldr	r0, [pc, #12]	; (b4ed0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4ec2:	f7ff fc33 	bl	b472c <application_thread_invoke>
   b4ec6:	e7c7      	b.n	b4e58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4ec8:	000b4aa9 	.word	0x000b4aa9
   b4ecc:	000b4d87 	.word	0x000b4d87
   b4ed0:	000b4937 	.word	0x000b4937

000b4ed4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ed4:	2200      	movs	r2, #0
   b4ed6:	6840      	ldr	r0, [r0, #4]
   b4ed8:	4611      	mov	r1, r2
   b4eda:	f7ff bcab 	b.w	b4834 <network_listening>

000b4ede <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ede:	2200      	movs	r2, #0
   b4ee0:	6840      	ldr	r0, [r0, #4]
   b4ee2:	4611      	mov	r1, r2
   b4ee4:	f7ff bcb6 	b.w	b4854 <network_get_listen_timeout>

000b4ee8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ee8:	6840      	ldr	r0, [r0, #4]
   b4eea:	2200      	movs	r2, #0
   b4eec:	f7ff bcaa 	b.w	b4844 <network_set_listen_timeout>

000b4ef0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ef0:	6840      	ldr	r0, [r0, #4]
   b4ef2:	2200      	movs	r2, #0
   b4ef4:	f081 0101 	eor.w	r1, r1, #1
   b4ef8:	f7ff bc94 	b.w	b4824 <network_listen>

000b4efc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4efc:	2300      	movs	r3, #0
   b4efe:	6840      	ldr	r0, [r0, #4]
   b4f00:	461a      	mov	r2, r3
   b4f02:	4619      	mov	r1, r3
   b4f04:	f7ff bc86 	b.w	b4814 <network_off>

000b4f08 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4f08:	2300      	movs	r3, #0
   b4f0a:	6840      	ldr	r0, [r0, #4]
   b4f0c:	461a      	mov	r2, r3
   b4f0e:	4619      	mov	r1, r3
   b4f10:	f7ff bc78 	b.w	b4804 <network_on>

000b4f14 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4f14:	2200      	movs	r2, #0
   b4f16:	6840      	ldr	r0, [r0, #4]
   b4f18:	4611      	mov	r1, r2
   b4f1a:	f7ff bc6b 	b.w	b47f4 <network_ready>

000b4f1e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4f1e:	2200      	movs	r2, #0
   b4f20:	6840      	ldr	r0, [r0, #4]
   b4f22:	4611      	mov	r1, r2
   b4f24:	f7ff bc56 	b.w	b47d4 <network_connecting>

000b4f28 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f28:	6840      	ldr	r0, [r0, #4]
   b4f2a:	2200      	movs	r2, #0
   b4f2c:	2102      	movs	r1, #2
   b4f2e:	f7ff bc59 	b.w	b47e4 <network_disconnect>

000b4f32 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f32:	2300      	movs	r3, #0
   b4f34:	6840      	ldr	r0, [r0, #4]
   b4f36:	461a      	mov	r2, r3
   b4f38:	f7ff bc44 	b.w	b47c4 <network_connect>

000b4f3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4f3c:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4f3e:	2203      	movs	r2, #3
   b4f40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4f42:	4a02      	ldr	r2, [pc, #8]	; (b4f4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f44:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f46:	4770      	bx	lr
   b4f48:	2003e6c8 	.word	0x2003e6c8
   b4f4c:	000b5ebc 	.word	0x000b5ebc

000b4f50 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4f50:	4770      	bx	lr

000b4f52 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f54:	4606      	mov	r6, r0
   b4f56:	4615      	mov	r5, r2
   b4f58:	460c      	mov	r4, r1
   b4f5a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4f5c:	42bc      	cmp	r4, r7
   b4f5e:	d006      	beq.n	b4f6e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4f60:	6833      	ldr	r3, [r6, #0]
   b4f62:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4f66:	689b      	ldr	r3, [r3, #8]
   b4f68:	4630      	mov	r0, r6
   b4f6a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4f6c:	e7f6      	b.n	b4f5c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4f6e:	4628      	mov	r0, r5
   b4f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f72 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4f72:	7c00      	ldrb	r0, [r0, #16]
   b4f74:	2200      	movs	r2, #0
   b4f76:	f7ff bad9 	b.w	b452c <hal_i2c_write>

000b4f7a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4f7a:	7c00      	ldrb	r0, [r0, #16]
   b4f7c:	2100      	movs	r1, #0
   b4f7e:	f7ff badd 	b.w	b453c <hal_i2c_available>

000b4f82 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4f82:	7c00      	ldrb	r0, [r0, #16]
   b4f84:	2100      	movs	r1, #0
   b4f86:	f7ff bae1 	b.w	b454c <hal_i2c_read>

000b4f8a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4f8a:	7c00      	ldrb	r0, [r0, #16]
   b4f8c:	2100      	movs	r1, #0
   b4f8e:	f7ff bae5 	b.w	b455c <hal_i2c_peek>

000b4f92 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4f92:	7c00      	ldrb	r0, [r0, #16]
   b4f94:	2100      	movs	r1, #0
   b4f96:	f7ff bae9 	b.w	b456c <hal_i2c_flush>

000b4f9a <_ZN7TwoWireD0Ev>:
   b4f9a:	b510      	push	{r4, lr}
   b4f9c:	2114      	movs	r1, #20
   b4f9e:	4604      	mov	r4, r0
   b4fa0:	f7ff f885 	bl	b40ae <_ZdlPvj>
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4fa8:	b538      	push	{r3, r4, r5, lr}
   b4faa:	4604      	mov	r4, r0
   b4fac:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fb2:	2200      	movs	r2, #0
   b4fb4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4fb8:	4b09      	ldr	r3, [pc, #36]	; (b4fe0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4fba:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4fbc:	4608      	mov	r0, r1
   b4fbe:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4fc0:	4629      	mov	r1, r5
   b4fc2:	f7ff fae3 	bl	b458c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4fc6:	30bf      	adds	r0, #191	; 0xbf
   b4fc8:	d108      	bne.n	b4fdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4fca:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4fcc:	07db      	lsls	r3, r3, #31
   b4fce:	d505      	bpl.n	b4fdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4fd0:	6868      	ldr	r0, [r5, #4]
   b4fd2:	f7ff fc6f 	bl	b48b4 <free>
    free(conf.tx_buffer);
   b4fd6:	68e8      	ldr	r0, [r5, #12]
   b4fd8:	f7ff fc6c 	bl	b48b4 <free>
}
   b4fdc:	4620      	mov	r0, r4
   b4fde:	bd38      	pop	{r3, r4, r5, pc}
   b4fe0:	000b5f00 	.word	0x000b5f00

000b4fe4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4fe4:	4770      	bx	lr

000b4fe6 <_ZN9IPAddressD0Ev>:
   b4fe6:	b510      	push	{r4, lr}
   b4fe8:	2118      	movs	r1, #24
   b4fea:	4604      	mov	r4, r0
   b4fec:	f7ff f85f 	bl	b40ae <_ZdlPvj>
   b4ff0:	4620      	mov	r0, r4
   b4ff2:	bd10      	pop	{r4, pc}

000b4ff4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4ff6:	7d03      	ldrb	r3, [r0, #20]
   b4ff8:	2b06      	cmp	r3, #6
{
   b4ffa:	b08d      	sub	sp, #52	; 0x34
   b4ffc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ffe:	f100 0704 	add.w	r7, r0, #4
   b5002:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5006:	d012      	beq.n	b502e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5008:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b500c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5010:	220a      	movs	r2, #10
   b5012:	4630      	mov	r0, r6
   b5014:	f000 f973 	bl	b52fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5018:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b501a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b501c:	d019      	beq.n	b5052 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b501e:	2c00      	cmp	r4, #0
   b5020:	d0f4      	beq.n	b500c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5022:	212e      	movs	r1, #46	; 0x2e
   b5024:	4630      	mov	r0, r6
   b5026:	f000 f951 	bl	b52cc <_ZN5Print5printEc>
   b502a:	4404      	add	r4, r0
   b502c:	e7ee      	b.n	b500c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b502e:	232f      	movs	r3, #47	; 0x2f
   b5030:	466a      	mov	r2, sp
   b5032:	4639      	mov	r1, r7
   b5034:	200a      	movs	r0, #10
		buf[0] = 0;
   b5036:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b503a:	f7ff faaf 	bl	b459c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b503e:	4668      	mov	r0, sp
   b5040:	f7fe ffec 	bl	b401c <strlen>
   b5044:	6833      	ldr	r3, [r6, #0]
   b5046:	4602      	mov	r2, r0
   b5048:	68db      	ldr	r3, [r3, #12]
   b504a:	4669      	mov	r1, sp
   b504c:	4630      	mov	r0, r6
   b504e:	4798      	blx	r3
   b5050:	4604      	mov	r4, r0
    }
    return n;
}
   b5052:	4620      	mov	r0, r4
   b5054:	b00d      	add	sp, #52	; 0x34
   b5056:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5058 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5058:	b510      	push	{r4, lr}
   b505a:	4b05      	ldr	r3, [pc, #20]	; (b5070 <_ZN9IPAddressC1Ev+0x18>)
   b505c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b505e:	2211      	movs	r2, #17
   b5060:	f840 3b04 	str.w	r3, [r0], #4
   b5064:	2100      	movs	r1, #0
   b5066:	f000 fd7e 	bl	b5b66 <memset>
}
   b506a:	4620      	mov	r0, r4
   b506c:	bd10      	pop	{r4, pc}
   b506e:	bf00      	nop
   b5070:	000b5f2c 	.word	0x000b5f2c

000b5074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5074:	4603      	mov	r3, r0
   b5076:	4a07      	ldr	r2, [pc, #28]	; (b5094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5078:	b510      	push	{r4, lr}
   b507a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b507e:	f101 0210 	add.w	r2, r1, #16
   b5082:	f851 4b04 	ldr.w	r4, [r1], #4
   b5086:	f843 4b04 	str.w	r4, [r3], #4
   b508a:	4291      	cmp	r1, r2
   b508c:	d1f9      	bne.n	b5082 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b508e:	780a      	ldrb	r2, [r1, #0]
   b5090:	701a      	strb	r2, [r3, #0]
}
   b5092:	bd10      	pop	{r4, pc}
   b5094:	000b5f2c 	.word	0x000b5f2c

000b5098 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5098:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b509a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b509e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b50a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b50a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b50aa:	2304      	movs	r3, #4
   b50ac:	6041      	str	r1, [r0, #4]
   b50ae:	7503      	strb	r3, [r0, #20]
}
   b50b0:	bd10      	pop	{r4, pc}
	...

000b50b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b50b4:	b507      	push	{r0, r1, r2, lr}
   b50b6:	4b06      	ldr	r3, [pc, #24]	; (b50d0 <_ZN9IPAddressC1EPKh+0x1c>)
   b50b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b50ba:	78cb      	ldrb	r3, [r1, #3]
   b50bc:	9300      	str	r3, [sp, #0]
   b50be:	788b      	ldrb	r3, [r1, #2]
   b50c0:	784a      	ldrb	r2, [r1, #1]
   b50c2:	7809      	ldrb	r1, [r1, #0]
   b50c4:	f7ff ffe8 	bl	b5098 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b50c8:	b003      	add	sp, #12
   b50ca:	f85d fb04 	ldr.w	pc, [sp], #4
   b50ce:	bf00      	nop
   b50d0:	000b5f2c 	.word	0x000b5f2c

000b50d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b50d4:	4b01      	ldr	r3, [pc, #4]	; (b50dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b50d6:	4a02      	ldr	r2, [pc, #8]	; (b50e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b50d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b50da:	4770      	bx	lr
   b50dc:	2003e6d0 	.word	0x2003e6d0
   b50e0:	000b5f38 	.word	0x000b5f38

000b50e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b50e4:	2300      	movs	r3, #0
   b50e6:	6840      	ldr	r0, [r0, #4]
   b50e8:	461a      	mov	r2, r3
   b50ea:	f7ff bb6b 	b.w	b47c4 <network_connect>

000b50ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b50ee:	6840      	ldr	r0, [r0, #4]
   b50f0:	2200      	movs	r2, #0
   b50f2:	2102      	movs	r1, #2
   b50f4:	f7ff bb76 	b.w	b47e4 <network_disconnect>

000b50f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b50f8:	2200      	movs	r2, #0
   b50fa:	6840      	ldr	r0, [r0, #4]
   b50fc:	4611      	mov	r1, r2
   b50fe:	f7ff bb69 	b.w	b47d4 <network_connecting>

000b5102 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5102:	2200      	movs	r2, #0
   b5104:	6840      	ldr	r0, [r0, #4]
   b5106:	4611      	mov	r1, r2
   b5108:	f7ff bb74 	b.w	b47f4 <network_ready>

000b510c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b510c:	2300      	movs	r3, #0
   b510e:	6840      	ldr	r0, [r0, #4]
   b5110:	461a      	mov	r2, r3
   b5112:	4619      	mov	r1, r3
   b5114:	f7ff bb76 	b.w	b4804 <network_on>

000b5118 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5118:	2300      	movs	r3, #0
   b511a:	6840      	ldr	r0, [r0, #4]
   b511c:	461a      	mov	r2, r3
   b511e:	4619      	mov	r1, r3
   b5120:	f7ff bb78 	b.w	b4814 <network_off>

000b5124 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5124:	6840      	ldr	r0, [r0, #4]
   b5126:	2100      	movs	r1, #0
   b5128:	f7ff bb9c 	b.w	b4864 <network_is_on>

000b512c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b512c:	6840      	ldr	r0, [r0, #4]
   b512e:	2100      	movs	r1, #0
   b5130:	f7ff bba0 	b.w	b4874 <network_is_off>

000b5134 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5134:	6840      	ldr	r0, [r0, #4]
   b5136:	2200      	movs	r2, #0
   b5138:	f081 0101 	eor.w	r1, r1, #1
   b513c:	f7ff bb72 	b.w	b4824 <network_listen>

000b5140 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5140:	6840      	ldr	r0, [r0, #4]
   b5142:	2200      	movs	r2, #0
   b5144:	f7ff bb7e 	b.w	b4844 <network_set_listen_timeout>

000b5148 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5148:	2200      	movs	r2, #0
   b514a:	6840      	ldr	r0, [r0, #4]
   b514c:	4611      	mov	r1, r2
   b514e:	f7ff bb81 	b.w	b4854 <network_get_listen_timeout>

000b5152 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5152:	2200      	movs	r2, #0
   b5154:	6840      	ldr	r0, [r0, #4]
   b5156:	4611      	mov	r1, r2
   b5158:	f7ff bb6c 	b.w	b4834 <network_listening>

000b515c <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b515c:	6840      	ldr	r0, [r0, #4]
   b515e:	2100      	movs	r1, #0
   b5160:	f7ff bb98 	b.w	b4894 <network_is_preferred>

000b5164 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5168:	b095      	sub	sp, #84	; 0x54
   b516a:	4614      	mov	r4, r2
   b516c:	460d      	mov	r5, r1
   b516e:	4607      	mov	r7, r0
    IPAddress addr;
   b5170:	f7ff ff72 	bl	b5058 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5174:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5176:	221c      	movs	r2, #28
   b5178:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b517a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b517c:	f000 fcf3 	bl	b5b66 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5180:	2340      	movs	r3, #64	; 0x40
   b5182:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5184:	4620      	mov	r0, r4
   b5186:	466b      	mov	r3, sp
   b5188:	aa0c      	add	r2, sp, #48	; 0x30
   b518a:	2100      	movs	r1, #0
   b518c:	f7ff fa16 	bl	b45bc <netdb_getaddrinfo>
    if (!r) {
   b5190:	4604      	mov	r4, r0
   b5192:	2800      	cmp	r0, #0
   b5194:	d14b      	bne.n	b522e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5196:	4602      	mov	r2, r0
   b5198:	2101      	movs	r1, #1
   b519a:	6868      	ldr	r0, [r5, #4]
   b519c:	f7ff fb2a 	bl	b47f4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b51a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51a4:	4622      	mov	r2, r4
   b51a6:	6868      	ldr	r0, [r5, #4]
   b51a8:	f7ff fb24 	bl	b47f4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51ae:	4681      	mov	r9, r0
        bool ok = false;
   b51b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51b2:	2e00      	cmp	r6, #0
   b51b4:	d03b      	beq.n	b522e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b51b6:	2900      	cmp	r1, #0
   b51b8:	d139      	bne.n	b522e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b51ba:	6873      	ldr	r3, [r6, #4]
   b51bc:	2b02      	cmp	r3, #2
   b51be:	d003      	beq.n	b51c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b51c0:	2b0a      	cmp	r3, #10
   b51c2:	d011      	beq.n	b51e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51c4:	69f6      	ldr	r6, [r6, #28]
   b51c6:	e7f4      	b.n	b51b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b51c8:	f1b8 0f00 	cmp.w	r8, #0
   b51cc:	d0fa      	beq.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b51ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b51d0:	a806      	add	r0, sp, #24
   b51d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b51d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b51d6:	f7ff ff6d 	bl	b50b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b51da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51dc:	1d3c      	adds	r4, r7, #4
   b51de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51e0:	682b      	ldr	r3, [r5, #0]
   b51e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b51e6:	e7ed      	b.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b51e8:	f1b9 0f00 	cmp.w	r9, #0
   b51ec:	d0ea      	beq.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b51ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b51f0:	2210      	movs	r2, #16
   b51f2:	a801      	add	r0, sp, #4
   b51f4:	f000 fcb7 	bl	b5b66 <memset>
                    a.v = 6;
   b51f8:	2306      	movs	r3, #6
   b51fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51fe:	ad01      	add	r5, sp, #4
   b5200:	f104 0308 	add.w	r3, r4, #8
   b5204:	3418      	adds	r4, #24
   b5206:	6818      	ldr	r0, [r3, #0]
   b5208:	6859      	ldr	r1, [r3, #4]
   b520a:	462a      	mov	r2, r5
   b520c:	c203      	stmia	r2!, {r0, r1}
   b520e:	3308      	adds	r3, #8
   b5210:	42a3      	cmp	r3, r4
   b5212:	4615      	mov	r5, r2
   b5214:	d1f7      	bne.n	b5206 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5216:	a901      	add	r1, sp, #4
   b5218:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b521a:	ad07      	add	r5, sp, #28
   b521c:	f7ff ff2a 	bl	b5074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5222:	1d3c      	adds	r4, r7, #4
   b5224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5226:	682b      	ldr	r3, [r5, #0]
   b5228:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b522a:	4649      	mov	r1, r9
   b522c:	e7ca      	b.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b522e:	9800      	ldr	r0, [sp, #0]
   b5230:	f7ff f9bc 	bl	b45ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5234:	4638      	mov	r0, r7
   b5236:	b015      	add	sp, #84	; 0x54
   b5238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b523c <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b523c:	3803      	subs	r0, #3
   b523e:	2802      	cmp	r0, #2
   b5240:	bf9a      	itte	ls
   b5242:	4b02      	ldrls	r3, [pc, #8]	; (b524c <_ZN5spark12NetworkClass4fromEm+0x10>)
   b5244:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5248:	4801      	ldrhi	r0, [pc, #4]	; (b5250 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b524a:	4770      	bx	lr
   b524c:	000b5f3c 	.word	0x000b5f3c
   b5250:	2003e6d4 	.word	0x2003e6d4

000b5254 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5254:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5256:	2200      	movs	r2, #0
   b5258:	6840      	ldr	r0, [r0, #4]
   b525a:	f7ff fb13 	bl	b4884 <network_prefer>
}
   b525e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b5262:	f7ff bfeb 	b.w	b523c <_ZN5spark12NetworkClass4fromEm>
	...

000b5268 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5268:	4b02      	ldr	r3, [pc, #8]	; (b5274 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b526a:	4a03      	ldr	r2, [pc, #12]	; (b5278 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b526c:	601a      	str	r2, [r3, #0]
   b526e:	2200      	movs	r2, #0
   b5270:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5272:	4770      	bx	lr
   b5274:	2003e6d4 	.word	0x2003e6d4
   b5278:	000b5f50 	.word	0x000b5f50

000b527c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b527e:	4606      	mov	r6, r0
   b5280:	460d      	mov	r5, r1
  size_t n = 0;
   b5282:	188f      	adds	r7, r1, r2
   b5284:	2400      	movs	r4, #0
  while (size--) {
   b5286:	42bd      	cmp	r5, r7
   b5288:	d00c      	beq.n	b52a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b528a:	6833      	ldr	r3, [r6, #0]
   b528c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5290:	689b      	ldr	r3, [r3, #8]
   b5292:	4630      	mov	r0, r6
   b5294:	4798      	blx	r3
     if (chunk>=0)
   b5296:	1e03      	subs	r3, r0, #0
   b5298:	db01      	blt.n	b529e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b529a:	441c      	add	r4, r3
  while (size--) {
   b529c:	e7f3      	b.n	b5286 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b529e:	2c00      	cmp	r4, #0
   b52a0:	bf08      	it	eq
   b52a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b52a4:	4620      	mov	r0, r4
   b52a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b52a8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b52a8:	b513      	push	{r0, r1, r4, lr}
   b52aa:	4604      	mov	r4, r0
    }
   b52ac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b52ae:	b159      	cbz	r1, b52c8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b52b0:	9101      	str	r1, [sp, #4]
   b52b2:	f7fe feb3 	bl	b401c <strlen>
   b52b6:	6823      	ldr	r3, [r4, #0]
   b52b8:	9901      	ldr	r1, [sp, #4]
   b52ba:	68db      	ldr	r3, [r3, #12]
   b52bc:	4602      	mov	r2, r0
   b52be:	4620      	mov	r0, r4
    }
   b52c0:	b002      	add	sp, #8
   b52c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b52c6:	4718      	bx	r3
    }
   b52c8:	b002      	add	sp, #8
   b52ca:	bd10      	pop	{r4, pc}

000b52cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b52cc:	6803      	ldr	r3, [r0, #0]
   b52ce:	689b      	ldr	r3, [r3, #8]
   b52d0:	4718      	bx	r3

000b52d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b52d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b52d4:	210d      	movs	r1, #13
{
   b52d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b52d8:	f7ff fff8 	bl	b52cc <_ZN5Print5printEc>
  n += print('\n');
   b52dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b52de:	4604      	mov	r4, r0
  n += print('\n');
   b52e0:	4628      	mov	r0, r5
   b52e2:	f7ff fff3 	bl	b52cc <_ZN5Print5printEc>
  return n;
}
   b52e6:	4420      	add	r0, r4
   b52e8:	bd38      	pop	{r3, r4, r5, pc}

000b52ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b52ea:	b538      	push	{r3, r4, r5, lr}
   b52ec:	4605      	mov	r5, r0
  return write(str);
   b52ee:	f7ff ffdb 	bl	b52a8 <_ZN5Print5writeEPKc>
   b52f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b52f4:	4628      	mov	r0, r5
   b52f6:	f7ff ffec 	bl	b52d2 <_ZN5Print7printlnEv>
  return n;
}
   b52fa:	4420      	add	r0, r4
   b52fc:	bd38      	pop	{r3, r4, r5, pc}

000b52fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b52fe:	b530      	push	{r4, r5, lr}
   b5300:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5302:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5304:	2a01      	cmp	r2, #1
  *str = '\0';
   b5306:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b530a:	bf98      	it	ls
   b530c:	220a      	movls	r2, #10
   b530e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5310:	460d      	mov	r5, r1
   b5312:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5316:	fb01 5312 	mls	r3, r1, r2, r5
   b531a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b531e:	2b09      	cmp	r3, #9
   b5320:	bf94      	ite	ls
   b5322:	3330      	addls	r3, #48	; 0x30
   b5324:	3337      	addhi	r3, #55	; 0x37
   b5326:	b2db      	uxtb	r3, r3
  } while(n);
   b5328:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b532a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b532e:	d9ef      	bls.n	b5310 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5330:	4621      	mov	r1, r4
   b5332:	f7ff ffb9 	bl	b52a8 <_ZN5Print5writeEPKc>
}
   b5336:	b00b      	add	sp, #44	; 0x2c
   b5338:	bd30      	pop	{r4, r5, pc}
	...

000b533c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b533c:	4b01      	ldr	r3, [pc, #4]	; (b5344 <_GLOBAL__sub_I_RGB+0x8>)
   b533e:	2200      	movs	r2, #0
   b5340:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5342:	4770      	bx	lr
   b5344:	2003e6dc 	.word	0x2003e6dc

000b5348 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5348:	b510      	push	{r4, lr}
   b534a:	4604      	mov	r4, r0
   b534c:	4608      	mov	r0, r1
{
    _spi = spi;
   b534e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5350:	f7ff f93c 	bl	b45cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5354:	2300      	movs	r3, #0
   b5356:	6063      	str	r3, [r4, #4]
}
   b5358:	4620      	mov	r0, r4
   b535a:	bd10      	pop	{r4, pc}

000b535c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b535c:	b510      	push	{r4, lr}
   b535e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5360:	f7ff f8b4 	bl	b44cc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5364:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5366:	6823      	ldr	r3, [r4, #0]
   b5368:	4620      	mov	r0, r4
   b536a:	695b      	ldr	r3, [r3, #20]
   b536c:	4798      	blx	r3
    if (c >= 0) return c;
   b536e:	2800      	cmp	r0, #0
   b5370:	da08      	bge.n	b5384 <_ZN6Stream9timedReadEv+0x28>
   b5372:	f7ff f8ab 	bl	b44cc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5376:	68e3      	ldr	r3, [r4, #12]
   b5378:	1ac0      	subs	r0, r0, r3
   b537a:	68a3      	ldr	r3, [r4, #8]
   b537c:	4298      	cmp	r0, r3
   b537e:	d3f2      	bcc.n	b5366 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5384:	bd10      	pop	{r4, pc}

000b5386 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b538a:	4607      	mov	r7, r0
   b538c:	460c      	mov	r4, r1
   b538e:	188e      	adds	r6, r1, r2
   b5390:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5392:	42b5      	cmp	r5, r6
   b5394:	eba5 0804 	sub.w	r8, r5, r4
   b5398:	d007      	beq.n	b53aa <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b539a:	4638      	mov	r0, r7
   b539c:	f7ff ffde 	bl	b535c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b53a0:	1e03      	subs	r3, r0, #0
   b53a2:	db02      	blt.n	b53aa <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b53a4:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b53a8:	e7f3      	b.n	b5392 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b53aa:	4640      	mov	r0, r8
   b53ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b53b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b53b0:	4b05      	ldr	r3, [pc, #20]	; (b53c8 <_GLOBAL__sub_I_System+0x18>)
   b53b2:	2202      	movs	r2, #2
   b53b4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b53b6:	4b05      	ldr	r3, [pc, #20]	; (b53cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b53b8:	4a05      	ldr	r2, [pc, #20]	; (b53d0 <_GLOBAL__sub_I_System+0x20>)
   b53ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b53bc:	2000      	movs	r0, #0
   b53be:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b53c2:	f7ff b993 	b.w	b46ec <set_system_mode>
   b53c6:	bf00      	nop
   b53c8:	2003e6f8 	.word	0x2003e6f8
   b53cc:	2003e6ec 	.word	0x2003e6ec
   b53d0:	ffff0000 	.word	0xffff0000

000b53d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b53d4:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b53d6:	681a      	ldr	r2, [r3, #0]
   b53d8:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b53da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b53dc:	4770      	bx	lr
   b53de:	bf00      	nop
   b53e0:	2003e648 	.word	0x2003e648
   b53e4:	2003e6fc 	.word	0x2003e6fc

000b53e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b53e8:	4770      	bx	lr

000b53ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b53ea:	7441      	strb	r1, [r0, #17]
}
   b53ec:	4770      	bx	lr

000b53ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b53ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b53f0:	7c00      	ldrb	r0, [r0, #16]
   b53f2:	f7ff f92b 	bl	b464c <hal_usart_available_data_for_write>
}
   b53f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b53fa:	bd08      	pop	{r3, pc}

000b53fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b53fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b53fe:	7c00      	ldrb	r0, [r0, #16]
   b5400:	f7ff f8fc 	bl	b45fc <hal_usart_available>
}
   b5404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5408:	bd08      	pop	{r3, pc}

000b540a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b540a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b540c:	7c00      	ldrb	r0, [r0, #16]
   b540e:	f7ff f905 	bl	b461c <hal_usart_peek>
}
   b5412:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5416:	bd08      	pop	{r3, pc}

000b5418 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5418:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b541a:	7c00      	ldrb	r0, [r0, #16]
   b541c:	f7ff f8f6 	bl	b460c <hal_usart_read>
}
   b5420:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5424:	bd08      	pop	{r3, pc}

000b5426 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5426:	7c00      	ldrb	r0, [r0, #16]
   b5428:	f7ff b900 	b.w	b462c <hal_usart_flush>

000b542c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b542e:	7c45      	ldrb	r5, [r0, #17]
{
   b5430:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5432:	b12d      	cbz	r5, b5440 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5434:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5436:	b003      	add	sp, #12
   b5438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b543c:	f7ff b8d6 	b.w	b45ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5440:	7c00      	ldrb	r0, [r0, #16]
   b5442:	9101      	str	r1, [sp, #4]
   b5444:	f7ff f902 	bl	b464c <hal_usart_available_data_for_write>
   b5448:	2800      	cmp	r0, #0
   b544a:	9901      	ldr	r1, [sp, #4]
   b544c:	dcf2      	bgt.n	b5434 <_ZN11USARTSerial5writeEh+0x8>
}
   b544e:	4628      	mov	r0, r5
   b5450:	b003      	add	sp, #12
   b5452:	bd30      	pop	{r4, r5, pc}

000b5454 <_ZN11USARTSerialD0Ev>:
   b5454:	b510      	push	{r4, lr}
   b5456:	2114      	movs	r1, #20
   b5458:	4604      	mov	r4, r0
   b545a:	f7fe fe28 	bl	b40ae <_ZdlPvj>
   b545e:	4620      	mov	r0, r4
   b5460:	bd10      	pop	{r4, pc}
	...

000b5464 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5464:	b510      	push	{r4, lr}
   b5466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b546a:	4604      	mov	r4, r0
   b546c:	4608      	mov	r0, r1
   b546e:	4611      	mov	r1, r2
   b5470:	2200      	movs	r2, #0
   b5472:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5476:	4b04      	ldr	r3, [pc, #16]	; (b5488 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5478:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b547a:	2301      	movs	r3, #1
  _serial = serial;
   b547c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b547e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5480:	f7ff f8ec 	bl	b465c <hal_usart_init_ex>
}
   b5484:	4620      	mov	r0, r4
   b5486:	bd10      	pop	{r4, pc}
   b5488:	000b5fb0 	.word	0x000b5fb0

000b548c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b548c:	7441      	strb	r1, [r0, #17]
}
   b548e:	4770      	bx	lr

000b5490 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5490:	4770      	bx	lr

000b5492 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5492:	4770      	bx	lr

000b5494 <_ZN9USBSerial4readEv>:
{
   b5494:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5496:	2100      	movs	r1, #0
   b5498:	7c00      	ldrb	r0, [r0, #16]
   b549a:	f7ff f907 	bl	b46ac <HAL_USB_USART_Receive_Data>
}
   b549e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54a2:	bd08      	pop	{r3, pc}

000b54a4 <_ZN9USBSerial4peekEv>:
{
   b54a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b54a6:	2101      	movs	r1, #1
   b54a8:	7c00      	ldrb	r0, [r0, #16]
   b54aa:	f7ff f8ff 	bl	b46ac <HAL_USB_USART_Receive_Data>
}
   b54ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54b2:	bd08      	pop	{r3, pc}

000b54b4 <_ZN9USBSerial17availableForWriteEv>:
{
   b54b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b54b6:	7c00      	ldrb	r0, [r0, #16]
   b54b8:	f7ff f8f0 	bl	b469c <HAL_USB_USART_Available_Data_For_Write>
}
   b54bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54c0:	bd08      	pop	{r3, pc}

000b54c2 <_ZN9USBSerial9availableEv>:
{
   b54c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b54c4:	7c00      	ldrb	r0, [r0, #16]
   b54c6:	f7ff f8e1 	bl	b468c <HAL_USB_USART_Available_Data>
}
   b54ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54ce:	bd08      	pop	{r3, pc}

000b54d0 <_ZN9USBSerial5writeEh>:
{
   b54d0:	b513      	push	{r0, r1, r4, lr}
   b54d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54d4:	7c00      	ldrb	r0, [r0, #16]
{
   b54d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54d8:	f7ff f8e0 	bl	b469c <HAL_USB_USART_Available_Data_For_Write>
   b54dc:	2800      	cmp	r0, #0
   b54de:	9901      	ldr	r1, [sp, #4]
   b54e0:	dc01      	bgt.n	b54e6 <_ZN9USBSerial5writeEh+0x16>
   b54e2:	7c60      	ldrb	r0, [r4, #17]
   b54e4:	b120      	cbz	r0, b54f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b54e6:	7c20      	ldrb	r0, [r4, #16]
   b54e8:	f7ff f8e8 	bl	b46bc <HAL_USB_USART_Send_Data>
   b54ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b54f0:	b002      	add	sp, #8
   b54f2:	bd10      	pop	{r4, pc}

000b54f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b54f4:	7c00      	ldrb	r0, [r0, #16]
   b54f6:	f7ff b8e9 	b.w	b46cc <HAL_USB_USART_Flush_Data>

000b54fa <_ZN9USBSerialD0Ev>:
   b54fa:	b510      	push	{r4, lr}
   b54fc:	2114      	movs	r1, #20
   b54fe:	4604      	mov	r4, r0
   b5500:	f7fe fdd5 	bl	b40ae <_ZdlPvj>
   b5504:	4620      	mov	r0, r4
   b5506:	bd10      	pop	{r4, pc}

000b5508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5508:	b510      	push	{r4, lr}
   b550a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b550e:	4604      	mov	r4, r0
   b5510:	4608      	mov	r0, r1
   b5512:	2100      	movs	r1, #0
   b5514:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5518:	4b04      	ldr	r3, [pc, #16]	; (b552c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b551a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b551c:	2301      	movs	r3, #1
  _serial = serial;
   b551e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5520:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5522:	4611      	mov	r1, r2
   b5524:	f7ff f8a2 	bl	b466c <HAL_USB_USART_Init>
}
   b5528:	4620      	mov	r0, r4
   b552a:	bd10      	pop	{r4, pc}
   b552c:	000b5fe4 	.word	0x000b5fe4

000b5530 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5530:	7c00      	ldrb	r0, [r0, #16]
   b5532:	2200      	movs	r2, #0
   b5534:	f7ff b8a2 	b.w	b467c <HAL_USB_USART_Begin>

000b5538 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5538:	7c00      	ldrb	r0, [r0, #16]
   b553a:	f7ff b8cf 	b.w	b46dc <HAL_USB_USART_Is_Connected>

000b553e <_Z19acquireSerialBufferv>:
{
   b553e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5540:	2214      	movs	r2, #20
{
   b5542:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5544:	2100      	movs	r1, #0
   b5546:	f000 fb0e 	bl	b5b66 <memset>
}
   b554a:	4620      	mov	r0, r4
   b554c:	bd10      	pop	{r4, pc}
	...

000b5550 <_Z16_fetch_usbserialv>:
{
   b5550:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5552:	4c0f      	ldr	r4, [pc, #60]	; (b5590 <_Z16_fetch_usbserialv+0x40>)
{
   b5554:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5556:	a803      	add	r0, sp, #12
   b5558:	f7ff fff1 	bl	b553e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b555c:	7821      	ldrb	r1, [r4, #0]
   b555e:	f3bf 8f5b 	dmb	ish
   b5562:	f011 0101 	ands.w	r1, r1, #1
   b5566:	d10f      	bne.n	b5588 <_Z16_fetch_usbserialv+0x38>
   b5568:	4620      	mov	r0, r4
   b556a:	9101      	str	r1, [sp, #4]
   b556c:	f7fe fda1 	bl	b40b2 <__cxa_guard_acquire>
   b5570:	9901      	ldr	r1, [sp, #4]
   b5572:	b148      	cbz	r0, b5588 <_Z16_fetch_usbserialv+0x38>
   b5574:	aa03      	add	r2, sp, #12
   b5576:	4807      	ldr	r0, [pc, #28]	; (b5594 <_Z16_fetch_usbserialv+0x44>)
   b5578:	f7ff ffc6 	bl	b5508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b557c:	4620      	mov	r0, r4
   b557e:	f7fe fd9d 	bl	b40bc <__cxa_guard_release>
   b5582:	4805      	ldr	r0, [pc, #20]	; (b5598 <_Z16_fetch_usbserialv+0x48>)
   b5584:	f000 fadb 	bl	b5b3e <atexit>
	return _usbserial;
}
   b5588:	4802      	ldr	r0, [pc, #8]	; (b5594 <_Z16_fetch_usbserialv+0x44>)
   b558a:	b008      	add	sp, #32
   b558c:	bd10      	pop	{r4, pc}
   b558e:	bf00      	nop
   b5590:	2003e700 	.word	0x2003e700
   b5594:	2003e704 	.word	0x2003e704
   b5598:	000b5491 	.word	0x000b5491

000b559c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b559c:	2200      	movs	r2, #0
   b559e:	6840      	ldr	r0, [r0, #4]
   b55a0:	4611      	mov	r1, r2
   b55a2:	f7ff b927 	b.w	b47f4 <network_ready>

000b55a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b55a6:	2200      	movs	r2, #0
   b55a8:	6840      	ldr	r0, [r0, #4]
   b55aa:	4611      	mov	r1, r2
   b55ac:	f7ff b942 	b.w	b4834 <network_listening>

000b55b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b55b0:	2200      	movs	r2, #0
   b55b2:	6840      	ldr	r0, [r0, #4]
   b55b4:	4611      	mov	r1, r2
   b55b6:	f7ff b94d 	b.w	b4854 <network_get_listen_timeout>

000b55ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b55ba:	6840      	ldr	r0, [r0, #4]
   b55bc:	2200      	movs	r2, #0
   b55be:	f7ff b941 	b.w	b4844 <network_set_listen_timeout>

000b55c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b55c2:	6840      	ldr	r0, [r0, #4]
   b55c4:	2200      	movs	r2, #0
   b55c6:	f081 0101 	eor.w	r1, r1, #1
   b55ca:	f7ff b92b 	b.w	b4824 <network_listen>

000b55ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b55ce:	2300      	movs	r3, #0
   b55d0:	6840      	ldr	r0, [r0, #4]
   b55d2:	461a      	mov	r2, r3
   b55d4:	4619      	mov	r1, r3
   b55d6:	f7ff b91d 	b.w	b4814 <network_off>

000b55da <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b55da:	2300      	movs	r3, #0
   b55dc:	6840      	ldr	r0, [r0, #4]
   b55de:	461a      	mov	r2, r3
   b55e0:	4619      	mov	r1, r3
   b55e2:	f7ff b90f 	b.w	b4804 <network_on>

000b55e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b55e6:	2200      	movs	r2, #0
   b55e8:	6840      	ldr	r0, [r0, #4]
   b55ea:	4611      	mov	r1, r2
   b55ec:	f7ff b8f2 	b.w	b47d4 <network_connecting>

000b55f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b55f0:	6840      	ldr	r0, [r0, #4]
   b55f2:	2200      	movs	r2, #0
   b55f4:	2102      	movs	r1, #2
   b55f6:	f7ff b8f5 	b.w	b47e4 <network_disconnect>

000b55fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b55fa:	2300      	movs	r3, #0
   b55fc:	6840      	ldr	r0, [r0, #4]
   b55fe:	461a      	mov	r2, r3
   b5600:	f7ff b8e0 	b.w	b47c4 <network_connect>

000b5604 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5604:	4b02      	ldr	r3, [pc, #8]	; (b5610 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5606:	2204      	movs	r2, #4
   b5608:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b560a:	4a02      	ldr	r2, [pc, #8]	; (b5614 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b560c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b560e:	4770      	bx	lr
   b5610:	2003e718 	.word	0x2003e718
   b5614:	000b6018 	.word	0x000b6018

000b5618 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5618:	4b01      	ldr	r3, [pc, #4]	; (b5620 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b561a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b561c:	4770      	bx	lr
   b561e:	bf00      	nop
   b5620:	2003e64c 	.word	0x2003e64c

000b5624 <serialEventRun>:
{
   b5624:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5626:	4b0b      	ldr	r3, [pc, #44]	; (b5654 <serialEventRun+0x30>)
   b5628:	b143      	cbz	r3, b563c <serialEventRun+0x18>
   b562a:	f7ff ff91 	bl	b5550 <_Z16_fetch_usbserialv>
   b562e:	6803      	ldr	r3, [r0, #0]
   b5630:	691b      	ldr	r3, [r3, #16]
   b5632:	4798      	blx	r3
   b5634:	2800      	cmp	r0, #0
   b5636:	dd01      	ble.n	b563c <serialEventRun+0x18>
        serialEvent();
   b5638:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b563c:	4b06      	ldr	r3, [pc, #24]	; (b5658 <serialEventRun+0x34>)
   b563e:	b143      	cbz	r3, b5652 <serialEventRun+0x2e>
   b5640:	f000 f95c 	bl	b58fc <_Z22__fetch_global_Serial1v>
   b5644:	6803      	ldr	r3, [r0, #0]
   b5646:	691b      	ldr	r3, [r3, #16]
   b5648:	4798      	blx	r3
   b564a:	2800      	cmp	r0, #0
   b564c:	dd01      	ble.n	b5652 <serialEventRun+0x2e>
        serialEvent1();
   b564e:	f3af 8000 	nop.w
}
   b5652:	bd08      	pop	{r3, pc}
	...

000b565c <_post_loop>:
{
   b565c:	b508      	push	{r3, lr}
	serialEventRun();
   b565e:	f7ff ffe1 	bl	b5624 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5662:	f7fe ff33 	bl	b44cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5666:	4b01      	ldr	r3, [pc, #4]	; (b566c <_post_loop+0x10>)
   b5668:	6018      	str	r0, [r3, #0]
}
   b566a:	bd08      	pop	{r3, pc}
   b566c:	2003e734 	.word	0x2003e734

000b5670 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5670:	4805      	ldr	r0, [pc, #20]	; (b5688 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5672:	4a06      	ldr	r2, [pc, #24]	; (b568c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5674:	4906      	ldr	r1, [pc, #24]	; (b5690 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5676:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5678:	1a12      	subs	r2, r2, r0
   b567a:	f000 fa66 	bl	b5b4a <memcpy>
    __backup_sram_signature = signature;
   b567e:	4b05      	ldr	r3, [pc, #20]	; (b5694 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5680:	4a05      	ldr	r2, [pc, #20]	; (b5698 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5682:	601a      	str	r2, [r3, #0]
}
   b5684:	bd08      	pop	{r3, pc}
   b5686:	bf00      	nop
   b5688:	2003f400 	.word	0x2003f400
   b568c:	2003f404 	.word	0x2003f404
   b5690:	000b6260 	.word	0x000b6260
   b5694:	2003f400 	.word	0x2003f400
   b5698:	9a271c1e 	.word	0x9a271c1e

000b569c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b569c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b569e:	2300      	movs	r3, #0
   b56a0:	9300      	str	r3, [sp, #0]
   b56a2:	461a      	mov	r2, r3
   b56a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b56a8:	f7ff f852 	bl	b4750 <system_ctrl_set_result>
}
   b56ac:	b003      	add	sp, #12
   b56ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b56b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b56b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b56b6:	8843      	ldrh	r3, [r0, #2]
   b56b8:	2b0a      	cmp	r3, #10
   b56ba:	d008      	beq.n	b56ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b56bc:	2b50      	cmp	r3, #80	; 0x50
   b56be:	d10b      	bne.n	b56d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b56c0:	4b09      	ldr	r3, [pc, #36]	; (b56e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b56c2:	681b      	ldr	r3, [r3, #0]
   b56c4:	b14b      	cbz	r3, b56da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b56c6:	b003      	add	sp, #12
   b56c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b56cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b56ce:	f7ff ffe5 	bl	b569c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b56d2:	b003      	add	sp, #12
   b56d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b56d8:	2300      	movs	r3, #0
   b56da:	9300      	str	r3, [sp, #0]
   b56dc:	461a      	mov	r2, r3
   b56de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b56e2:	f7ff f835 	bl	b4750 <system_ctrl_set_result>
}
   b56e6:	e7f4      	b.n	b56d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b56e8:	2003e724 	.word	0x2003e724

000b56ec <module_user_init_hook>:
{
   b56ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b56ee:	4812      	ldr	r0, [pc, #72]	; (b5738 <module_user_init_hook+0x4c>)
   b56f0:	2100      	movs	r1, #0
   b56f2:	f7ff f8ff 	bl	b48f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b56f6:	4b11      	ldr	r3, [pc, #68]	; (b573c <module_user_init_hook+0x50>)
   b56f8:	681a      	ldr	r2, [r3, #0]
   b56fa:	4b11      	ldr	r3, [pc, #68]	; (b5740 <module_user_init_hook+0x54>)
   b56fc:	429a      	cmp	r2, r3
   b56fe:	4b11      	ldr	r3, [pc, #68]	; (b5744 <module_user_init_hook+0x58>)
   b5700:	bf0c      	ite	eq
   b5702:	2201      	moveq	r2, #1
   b5704:	2200      	movne	r2, #0
   b5706:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5708:	d001      	beq.n	b570e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b570a:	f7ff ffb1 	bl	b5670 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b570e:	f7fe fed5 	bl	b44bc <HAL_RNG_GetRandomNumber>
   b5712:	4604      	mov	r4, r0
    srand(seed);
   b5714:	f000 fa30 	bl	b5b78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5718:	4b0b      	ldr	r3, [pc, #44]	; (b5748 <module_user_init_hook+0x5c>)
   b571a:	b113      	cbz	r3, b5722 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b571c:	4620      	mov	r0, r4
   b571e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5722:	2100      	movs	r1, #0
   b5724:	4808      	ldr	r0, [pc, #32]	; (b5748 <module_user_init_hook+0x5c>)
   b5726:	f7ff f845 	bl	b47b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b572a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b572e:	4807      	ldr	r0, [pc, #28]	; (b574c <module_user_init_hook+0x60>)
   b5730:	2100      	movs	r1, #0
   b5732:	f7ff b803 	b.w	b473c <system_ctrl_set_app_request_handler>
   b5736:	bf00      	nop
   b5738:	000b5619 	.word	0x000b5619
   b573c:	2003f400 	.word	0x2003f400
   b5740:	9a271c1e 	.word	0x9a271c1e
   b5744:	2003e720 	.word	0x2003e720
   b5748:	00000000 	.word	0x00000000
   b574c:	000b56b5 	.word	0x000b56b5

000b5750 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5750:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5752:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5754:	d902      	bls.n	b575c <pinAvailable+0xc>
    return false;
   b5756:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5758:	b002      	add	sp, #8
   b575a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b575c:	f1a0 030b 	sub.w	r3, r0, #11
   b5760:	2b02      	cmp	r3, #2
   b5762:	d81a      	bhi.n	b579a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5764:	4c17      	ldr	r4, [pc, #92]	; (b57c4 <pinAvailable+0x74>)
   b5766:	7821      	ldrb	r1, [r4, #0]
   b5768:	f3bf 8f5b 	dmb	ish
   b576c:	f011 0101 	ands.w	r1, r1, #1
   b5770:	d10b      	bne.n	b578a <pinAvailable+0x3a>
   b5772:	4620      	mov	r0, r4
   b5774:	9101      	str	r1, [sp, #4]
   b5776:	f7fe fc9c 	bl	b40b2 <__cxa_guard_acquire>
   b577a:	9901      	ldr	r1, [sp, #4]
   b577c:	b128      	cbz	r0, b578a <pinAvailable+0x3a>
   b577e:	4812      	ldr	r0, [pc, #72]	; (b57c8 <pinAvailable+0x78>)
   b5780:	f7ff fde2 	bl	b5348 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5784:	4620      	mov	r0, r4
   b5786:	f7fe fc99 	bl	b40bc <__cxa_guard_release>
   b578a:	4b0f      	ldr	r3, [pc, #60]	; (b57c8 <pinAvailable+0x78>)
   b578c:	7818      	ldrb	r0, [r3, #0]
   b578e:	f7fe ff25 	bl	b45dc <hal_spi_is_enabled>
   b5792:	2800      	cmp	r0, #0
   b5794:	d1df      	bne.n	b5756 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5796:	2001      	movs	r0, #1
   b5798:	e7de      	b.n	b5758 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b579a:	2801      	cmp	r0, #1
   b579c:	d809      	bhi.n	b57b2 <pinAvailable+0x62>
   b579e:	f000 f86d 	bl	b587c <_Z19__fetch_global_Wirev>
   b57a2:	2100      	movs	r1, #0
   b57a4:	7c00      	ldrb	r0, [r0, #16]
   b57a6:	f7fe fee9 	bl	b457c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b57aa:	f080 0001 	eor.w	r0, r0, #1
   b57ae:	b2c0      	uxtb	r0, r0
   b57b0:	e7d2      	b.n	b5758 <pinAvailable+0x8>
   b57b2:	3809      	subs	r0, #9
   b57b4:	2801      	cmp	r0, #1
   b57b6:	d8ee      	bhi.n	b5796 <pinAvailable+0x46>
   b57b8:	f000 f8a0 	bl	b58fc <_Z22__fetch_global_Serial1v>
   b57bc:	7c00      	ldrb	r0, [r0, #16]
   b57be:	f7fe ff3d 	bl	b463c <hal_usart_is_enabled>
   b57c2:	e7f2      	b.n	b57aa <pinAvailable+0x5a>
   b57c4:	2003e728 	.word	0x2003e728
   b57c8:	2003e72c 	.word	0x2003e72c

000b57cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b57cc:	2823      	cmp	r0, #35	; 0x23
{
   b57ce:	b538      	push	{r3, r4, r5, lr}
   b57d0:	4604      	mov	r4, r0
   b57d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b57d4:	d80a      	bhi.n	b57ec <pinMode+0x20>
   b57d6:	29ff      	cmp	r1, #255	; 0xff
   b57d8:	d008      	beq.n	b57ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b57da:	f7ff ffb9 	bl	b5750 <pinAvailable>
   b57de:	b128      	cbz	r0, b57ec <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b57e0:	4629      	mov	r1, r5
   b57e2:	4620      	mov	r0, r4
}
   b57e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b57e8:	f7fe be80 	b.w	b44ec <hal_gpio_mode>
}
   b57ec:	bd38      	pop	{r3, r4, r5, pc}

000b57ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b57ee:	b538      	push	{r3, r4, r5, lr}
   b57f0:	4604      	mov	r4, r0
   b57f2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b57f4:	f7fe fe82 	bl	b44fc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b57f8:	28ff      	cmp	r0, #255	; 0xff
   b57fa:	d010      	beq.n	b581e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b57fc:	2806      	cmp	r0, #6
   b57fe:	d804      	bhi.n	b580a <digitalWrite+0x1c>
   b5800:	234d      	movs	r3, #77	; 0x4d
   b5802:	fa23 f000 	lsr.w	r0, r3, r0
   b5806:	07c3      	lsls	r3, r0, #31
   b5808:	d409      	bmi.n	b581e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b580a:	4620      	mov	r0, r4
   b580c:	f7ff ffa0 	bl	b5750 <pinAvailable>
   b5810:	b128      	cbz	r0, b581e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5812:	4629      	mov	r1, r5
   b5814:	4620      	mov	r0, r4
}
   b5816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b581a:	f7fe be77 	b.w	b450c <hal_gpio_write>
}
   b581e:	bd38      	pop	{r3, r4, r5, pc}

000b5820 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b5820:	b510      	push	{r4, lr}
   b5822:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5824:	f7fe fe6a 	bl	b44fc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5828:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b582a:	b2db      	uxtb	r3, r3
   b582c:	2b01      	cmp	r3, #1
   b582e:	d908      	bls.n	b5842 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5830:	4620      	mov	r0, r4
   b5832:	f7ff ff8d 	bl	b5750 <pinAvailable>
   b5836:	b120      	cbz	r0, b5842 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b5838:	4620      	mov	r0, r4
}
   b583a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b583e:	f7fe be6d 	b.w	b451c <hal_gpio_read>
}
   b5842:	2000      	movs	r0, #0
   b5844:	bd10      	pop	{r4, pc}

000b5846 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5846:	4770      	bx	lr

000b5848 <_Z17acquireWireBufferv>:
{
   b5848:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b584a:	4b0a      	ldr	r3, [pc, #40]	; (b5874 <_Z17acquireWireBufferv+0x2c>)
   b584c:	6003      	str	r3, [r0, #0]
   b584e:	2301      	movs	r3, #1
{
   b5850:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5852:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5854:	4908      	ldr	r1, [pc, #32]	; (b5878 <_Z17acquireWireBufferv+0x30>)
   b5856:	2020      	movs	r0, #32
   b5858:	f000 f874 	bl	b5944 <_ZnajRKSt9nothrow_t>
	};
   b585c:	2520      	movs	r5, #32
   b585e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5860:	4905      	ldr	r1, [pc, #20]	; (b5878 <_Z17acquireWireBufferv+0x30>)
	};
   b5862:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5864:	4628      	mov	r0, r5
   b5866:	f000 f86d 	bl	b5944 <_ZnajRKSt9nothrow_t>
	};
   b586a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b586e:	4620      	mov	r0, r4
   b5870:	bd38      	pop	{r3, r4, r5, pc}
   b5872:	bf00      	nop
   b5874:	00010018 	.word	0x00010018
   b5878:	000b6054 	.word	0x000b6054

000b587c <_Z19__fetch_global_Wirev>:
{
   b587c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b587e:	4d0e      	ldr	r5, [pc, #56]	; (b58b8 <_Z19__fetch_global_Wirev+0x3c>)
   b5880:	7829      	ldrb	r1, [r5, #0]
   b5882:	f3bf 8f5b 	dmb	ish
   b5886:	f011 0401 	ands.w	r4, r1, #1
{
   b588a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b588c:	d111      	bne.n	b58b2 <_Z19__fetch_global_Wirev+0x36>
   b588e:	4628      	mov	r0, r5
   b5890:	f7fe fc0f 	bl	b40b2 <__cxa_guard_acquire>
   b5894:	b168      	cbz	r0, b58b2 <_Z19__fetch_global_Wirev+0x36>
   b5896:	4668      	mov	r0, sp
   b5898:	f7ff ffd6 	bl	b5848 <_Z17acquireWireBufferv>
   b589c:	466a      	mov	r2, sp
   b589e:	4621      	mov	r1, r4
   b58a0:	4806      	ldr	r0, [pc, #24]	; (b58bc <_Z19__fetch_global_Wirev+0x40>)
   b58a2:	f7ff fb81 	bl	b4fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b58a6:	4628      	mov	r0, r5
   b58a8:	f7fe fc08 	bl	b40bc <__cxa_guard_release>
   b58ac:	4804      	ldr	r0, [pc, #16]	; (b58c0 <_Z19__fetch_global_Wirev+0x44>)
   b58ae:	f000 f946 	bl	b5b3e <atexit>
	return wire;
}
   b58b2:	4802      	ldr	r0, [pc, #8]	; (b58bc <_Z19__fetch_global_Wirev+0x40>)
   b58b4:	b007      	add	sp, #28
   b58b6:	bd30      	pop	{r4, r5, pc}
   b58b8:	2003e738 	.word	0x2003e738
   b58bc:	2003e73c 	.word	0x2003e73c
   b58c0:	000b5847 	.word	0x000b5847

000b58c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58c4:	4770      	bx	lr
	...

000b58c8 <_Z20acquireSerial1Bufferv>:
{
   b58c8:	b538      	push	{r3, r4, r5, lr}
   b58ca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b58cc:	2514      	movs	r5, #20
   b58ce:	462a      	mov	r2, r5
   b58d0:	2100      	movs	r1, #0
   b58d2:	f000 f948 	bl	b5b66 <memset>
   b58d6:	8025      	strh	r5, [r4, #0]
   b58d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58da:	4907      	ldr	r1, [pc, #28]	; (b58f8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b58dc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58de:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b58e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58e2:	f000 f82f 	bl	b5944 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58e6:	4904      	ldr	r1, [pc, #16]	; (b58f8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b58e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58ea:	4628      	mov	r0, r5
   b58ec:	f000 f82a 	bl	b5944 <_ZnajRKSt9nothrow_t>
    };
   b58f0:	60e0      	str	r0, [r4, #12]
}
   b58f2:	4620      	mov	r0, r4
   b58f4:	bd38      	pop	{r3, r4, r5, pc}
   b58f6:	bf00      	nop
   b58f8:	000b6054 	.word	0x000b6054

000b58fc <_Z22__fetch_global_Serial1v>:
{
   b58fc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58fe:	4d0e      	ldr	r5, [pc, #56]	; (b5938 <_Z22__fetch_global_Serial1v+0x3c>)
   b5900:	7829      	ldrb	r1, [r5, #0]
   b5902:	f3bf 8f5b 	dmb	ish
   b5906:	f011 0401 	ands.w	r4, r1, #1
{
   b590a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b590c:	d111      	bne.n	b5932 <_Z22__fetch_global_Serial1v+0x36>
   b590e:	4628      	mov	r0, r5
   b5910:	f7fe fbcf 	bl	b40b2 <__cxa_guard_acquire>
   b5914:	b168      	cbz	r0, b5932 <_Z22__fetch_global_Serial1v+0x36>
   b5916:	a801      	add	r0, sp, #4
   b5918:	f7ff ffd6 	bl	b58c8 <_Z20acquireSerial1Bufferv>
   b591c:	aa01      	add	r2, sp, #4
   b591e:	4621      	mov	r1, r4
   b5920:	4806      	ldr	r0, [pc, #24]	; (b593c <_Z22__fetch_global_Serial1v+0x40>)
   b5922:	f7ff fd9f 	bl	b5464 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5926:	4628      	mov	r0, r5
   b5928:	f7fe fbc8 	bl	b40bc <__cxa_guard_release>
   b592c:	4804      	ldr	r0, [pc, #16]	; (b5940 <_Z22__fetch_global_Serial1v+0x44>)
   b592e:	f000 f906 	bl	b5b3e <atexit>
    return serial1;
}
   b5932:	4802      	ldr	r0, [pc, #8]	; (b593c <_Z22__fetch_global_Serial1v+0x40>)
   b5934:	b007      	add	sp, #28
   b5936:	bd30      	pop	{r4, r5, pc}
   b5938:	2003e750 	.word	0x2003e750
   b593c:	2003e754 	.word	0x2003e754
   b5940:	000b58c5 	.word	0x000b58c5

000b5944 <_ZnajRKSt9nothrow_t>:
   b5944:	f7fe bbaf 	b.w	b40a6 <_Znaj>

000b5948 <_ZSt17__throw_bad_allocv>:
   b5948:	b508      	push	{r3, lr}
   b594a:	f7fe ffbb 	bl	b48c4 <abort>

000b594e <_ZSt19__throw_logic_errorPKc>:
   b594e:	b508      	push	{r3, lr}
   b5950:	f7fe ffb8 	bl	b48c4 <abort>

000b5954 <_ZSt20__throw_length_errorPKc>:
   b5954:	b508      	push	{r3, lr}
   b5956:	f7fe ffb5 	bl	b48c4 <abort>

000b595a <_ZSt24__throw_out_of_range_fmtPKcz>:
   b595a:	b40f      	push	{r0, r1, r2, r3}
   b595c:	b580      	push	{r7, lr}
   b595e:	b084      	sub	sp, #16
   b5960:	af00      	add	r7, sp, #0
   b5962:	f107 0418 	add.w	r4, r7, #24
   b5966:	f854 2b04 	ldr.w	r2, [r4], #4
   b596a:	607a      	str	r2, [r7, #4]
   b596c:	4610      	mov	r0, r2
   b596e:	f7fe fb55 	bl	b401c <strlen>
   b5972:	f200 2307 	addw	r3, r0, #519	; 0x207
   b5976:	f023 0307 	bic.w	r3, r3, #7
   b597a:	ebad 0d03 	sub.w	sp, sp, r3
   b597e:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b5982:	687a      	ldr	r2, [r7, #4]
   b5984:	60fc      	str	r4, [r7, #12]
   b5986:	4623      	mov	r3, r4
   b5988:	4668      	mov	r0, sp
   b598a:	f000 f857 	bl	b5a3c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b598e:	f7fe ff99 	bl	b48c4 <abort>

000b5992 <_ZSt25__throw_bad_function_callv>:
   b5992:	b508      	push	{r3, lr}
   b5994:	f7fe ff96 	bl	b48c4 <abort>

000b5998 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b5998:	b580      	push	{r7, lr}
   b599a:	b09c      	sub	sp, #112	; 0x70
   b599c:	4606      	mov	r6, r0
   b599e:	af00      	add	r7, sp, #0
   b59a0:	460c      	mov	r4, r1
   b59a2:	1ba4      	subs	r4, r4, r6
   b59a4:	490e      	ldr	r1, [pc, #56]	; (b59e0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b59a6:	2269      	movs	r2, #105	; 0x69
   b59a8:	1d38      	adds	r0, r7, #4
   b59aa:	f000 f8ce 	bl	b5b4a <memcpy>
   b59ae:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b59b2:	f023 0307 	bic.w	r3, r3, #7
   b59b6:	ebad 0d03 	sub.w	sp, sp, r3
   b59ba:	466d      	mov	r5, sp
   b59bc:	2268      	movs	r2, #104	; 0x68
   b59be:	1d39      	adds	r1, r7, #4
   b59c0:	4628      	mov	r0, r5
   b59c2:	f000 f8c2 	bl	b5b4a <memcpy>
   b59c6:	4622      	mov	r2, r4
   b59c8:	4631      	mov	r1, r6
   b59ca:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b59ce:	442c      	add	r4, r5
   b59d0:	f000 f8bb 	bl	b5b4a <memcpy>
   b59d4:	2300      	movs	r3, #0
   b59d6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b59da:	4628      	mov	r0, r5
   b59dc:	f7ff ffb7 	bl	b594e <_ZSt19__throw_logic_errorPKc>
   b59e0:	000b6055 	.word	0x000b6055

000b59e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b59e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b59e8:	af00      	add	r7, sp, #0
   b59ea:	b084      	sub	sp, #16
   b59ec:	466d      	mov	r5, sp
   b59ee:	f105 040c 	add.w	r4, r5, #12
   b59f2:	f8df 8044 	ldr.w	r8, [pc, #68]	; b5a38 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b59f6:	4623      	mov	r3, r4
   b59f8:	f04f 0c0a 	mov.w	ip, #10
   b59fc:	fbb2 f6fc 	udiv	r6, r2, ip
   b5a00:	fb0c 2e16 	mls	lr, ip, r6, r2
   b5a04:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b5a08:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b5a0c:	4696      	mov	lr, r2
   b5a0e:	f1be 0f09 	cmp.w	lr, #9
   b5a12:	4632      	mov	r2, r6
   b5a14:	d8f2      	bhi.n	b59fc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b5a16:	1ae4      	subs	r4, r4, r3
   b5a18:	428c      	cmp	r4, r1
   b5a1a:	d809      	bhi.n	b5a30 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b5a1c:	f1c4 030c 	rsb	r3, r4, #12
   b5a20:	4622      	mov	r2, r4
   b5a22:	18e9      	adds	r1, r5, r3
   b5a24:	f000 f891 	bl	b5b4a <memcpy>
   b5a28:	4620      	mov	r0, r4
   b5a2a:	46bd      	mov	sp, r7
   b5a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5a34:	e7f8      	b.n	b5a28 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b5a36:	bf00      	nop
   b5a38:	000b60be 	.word	0x000b60be

000b5a3c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b5a3c:	3901      	subs	r1, #1
   b5a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a42:	4607      	mov	r7, r0
   b5a44:	4615      	mov	r5, r2
   b5a46:	eb00 0801 	add.w	r8, r0, r1
   b5a4a:	4604      	mov	r4, r0
   b5a4c:	782a      	ldrb	r2, [r5, #0]
   b5a4e:	b392      	cbz	r2, b5ab6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b5a50:	4544      	cmp	r4, r8
   b5a52:	d22a      	bcs.n	b5aaa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b5a54:	2a25      	cmp	r2, #37	; 0x25
   b5a56:	d107      	bne.n	b5a68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b5a58:	786a      	ldrb	r2, [r5, #1]
   b5a5a:	2a73      	cmp	r2, #115	; 0x73
   b5a5c:	d009      	beq.n	b5a72 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b5a5e:	2a7a      	cmp	r2, #122	; 0x7a
   b5a60:	d012      	beq.n	b5a88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b5a62:	2a25      	cmp	r2, #37	; 0x25
   b5a64:	d100      	bne.n	b5a68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b5a66:	3501      	adds	r5, #1
   b5a68:	f815 2b01 	ldrb.w	r2, [r5], #1
   b5a6c:	f804 2b01 	strb.w	r2, [r4], #1
   b5a70:	e7ec      	b.n	b5a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b5a72:	f853 2b04 	ldr.w	r2, [r3], #4
   b5a76:	3a01      	subs	r2, #1
   b5a78:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b5a7c:	b1c9      	cbz	r1, b5ab2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b5a7e:	4544      	cmp	r4, r8
   b5a80:	d013      	beq.n	b5aaa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b5a82:	f804 1b01 	strb.w	r1, [r4], #1
   b5a86:	e7f7      	b.n	b5a78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b5a88:	78aa      	ldrb	r2, [r5, #2]
   b5a8a:	2a75      	cmp	r2, #117	; 0x75
   b5a8c:	d1ec      	bne.n	b5a68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b5a8e:	461e      	mov	r6, r3
   b5a90:	eba8 0104 	sub.w	r1, r8, r4
   b5a94:	f856 2b04 	ldr.w	r2, [r6], #4
   b5a98:	4620      	mov	r0, r4
   b5a9a:	f7ff ffa3 	bl	b59e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b5a9e:	2800      	cmp	r0, #0
   b5aa0:	dd03      	ble.n	b5aaa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b5aa2:	4404      	add	r4, r0
   b5aa4:	3503      	adds	r5, #3
   b5aa6:	4633      	mov	r3, r6
   b5aa8:	e7d0      	b.n	b5a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b5aaa:	4621      	mov	r1, r4
   b5aac:	4638      	mov	r0, r7
   b5aae:	f7ff ff73 	bl	b5998 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b5ab2:	3502      	adds	r5, #2
   b5ab4:	e7ca      	b.n	b5a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b5ab6:	7022      	strb	r2, [r4, #0]
   b5ab8:	1be0      	subs	r0, r4, r7
   b5aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5abe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b5abe:	b10a      	cbz	r2, b5ac4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b5ac0:	f000 b843 	b.w	b5b4a <memcpy>
   b5ac4:	4770      	bx	lr
	...

000b5ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b5ac8:	b508      	push	{r3, lr}
   b5aca:	680b      	ldr	r3, [r1, #0]
   b5acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b5ad0:	d302      	bcc.n	b5ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b5ad2:	480d      	ldr	r0, [pc, #52]	; (b5b08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b5ad4:	f7ff ff3e 	bl	b5954 <_ZSt20__throw_length_errorPKc>
   b5ad8:	4293      	cmp	r3, r2
   b5ada:	d90b      	bls.n	b5af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b5adc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b5ae0:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b5ae4:	d206      	bcs.n	b5af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b5ae6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b5aea:	bf2a      	itet	cs
   b5aec:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b5af0:	6008      	strcc	r0, [r1, #0]
   b5af2:	600b      	strcs	r3, [r1, #0]
   b5af4:	6808      	ldr	r0, [r1, #0]
   b5af6:	3001      	adds	r0, #1
   b5af8:	d501      	bpl.n	b5afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b5afa:	f7ff ff25 	bl	b5948 <_ZSt17__throw_bad_allocv>
   b5afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5b02:	f7fe bace 	b.w	b40a2 <_Znwj>
   b5b06:	bf00      	nop
   b5b08:	000b60c9 	.word	0x000b60c9

000b5b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b5b0c:	f850 3b08 	ldr.w	r3, [r0], #8
   b5b10:	4283      	cmp	r3, r0
   b5b12:	d002      	beq.n	b5b1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b5b14:	4618      	mov	r0, r3
   b5b16:	f7fe bac8 	b.w	b40aa <_ZdlPv>
   b5b1a:	4770      	bx	lr

000b5b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b5b1c:	2a01      	cmp	r2, #1
   b5b1e:	b410      	push	{r4}
   b5b20:	d104      	bne.n	b5b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b5b22:	780a      	ldrb	r2, [r1, #0]
   b5b24:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5b28:	7002      	strb	r2, [r0, #0]
   b5b2a:	4770      	bx	lr
   b5b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5b30:	f7ff bfc5 	b.w	b5abe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b5b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b5b34:	b508      	push	{r3, lr}
   b5b36:	1a52      	subs	r2, r2, r1
   b5b38:	f7ff fff0 	bl	b5b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b5b3c:	bd08      	pop	{r3, pc}

000b5b3e <atexit>:
   b5b3e:	2300      	movs	r3, #0
   b5b40:	4601      	mov	r1, r0
   b5b42:	461a      	mov	r2, r3
   b5b44:	4618      	mov	r0, r3
   b5b46:	f000 b8c7 	b.w	b5cd8 <__register_exitproc>

000b5b4a <memcpy>:
   b5b4a:	440a      	add	r2, r1
   b5b4c:	4291      	cmp	r1, r2
   b5b4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5b52:	d100      	bne.n	b5b56 <memcpy+0xc>
   b5b54:	4770      	bx	lr
   b5b56:	b510      	push	{r4, lr}
   b5b58:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5b60:	4291      	cmp	r1, r2
   b5b62:	d1f9      	bne.n	b5b58 <memcpy+0xe>
   b5b64:	bd10      	pop	{r4, pc}

000b5b66 <memset>:
   b5b66:	4402      	add	r2, r0
   b5b68:	4603      	mov	r3, r0
   b5b6a:	4293      	cmp	r3, r2
   b5b6c:	d100      	bne.n	b5b70 <memset+0xa>
   b5b6e:	4770      	bx	lr
   b5b70:	f803 1b01 	strb.w	r1, [r3], #1
   b5b74:	e7f9      	b.n	b5b6a <memset+0x4>
	...

000b5b78 <srand>:
   b5b78:	b538      	push	{r3, r4, r5, lr}
   b5b7a:	4b10      	ldr	r3, [pc, #64]	; (b5bbc <srand+0x44>)
   b5b7c:	681d      	ldr	r5, [r3, #0]
   b5b7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b80:	4604      	mov	r4, r0
   b5b82:	b9b3      	cbnz	r3, b5bb2 <srand+0x3a>
   b5b84:	2018      	movs	r0, #24
   b5b86:	f7fe fe8d 	bl	b48a4 <malloc>
   b5b8a:	4602      	mov	r2, r0
   b5b8c:	63a8      	str	r0, [r5, #56]	; 0x38
   b5b8e:	b920      	cbnz	r0, b5b9a <srand+0x22>
   b5b90:	4b0b      	ldr	r3, [pc, #44]	; (b5bc0 <srand+0x48>)
   b5b92:	480c      	ldr	r0, [pc, #48]	; (b5bc4 <srand+0x4c>)
   b5b94:	2142      	movs	r1, #66	; 0x42
   b5b96:	f7fe fea5 	bl	b48e4 <__assert_func>
   b5b9a:	490b      	ldr	r1, [pc, #44]	; (b5bc8 <srand+0x50>)
   b5b9c:	4b0b      	ldr	r3, [pc, #44]	; (b5bcc <srand+0x54>)
   b5b9e:	e9c0 1300 	strd	r1, r3, [r0]
   b5ba2:	4b0b      	ldr	r3, [pc, #44]	; (b5bd0 <srand+0x58>)
   b5ba4:	6083      	str	r3, [r0, #8]
   b5ba6:	230b      	movs	r3, #11
   b5ba8:	8183      	strh	r3, [r0, #12]
   b5baa:	2100      	movs	r1, #0
   b5bac:	2001      	movs	r0, #1
   b5bae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5bb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5bb4:	2200      	movs	r2, #0
   b5bb6:	611c      	str	r4, [r3, #16]
   b5bb8:	615a      	str	r2, [r3, #20]
   b5bba:	bd38      	pop	{r3, r4, r5, pc}
   b5bbc:	2003e64c 	.word	0x2003e64c
   b5bc0:	000b60e1 	.word	0x000b60e1
   b5bc4:	000b60f8 	.word	0x000b60f8
   b5bc8:	abcd330e 	.word	0xabcd330e
   b5bcc:	e66d1234 	.word	0xe66d1234
   b5bd0:	0005deec 	.word	0x0005deec

000b5bd4 <strcpy>:
   b5bd4:	4603      	mov	r3, r0
   b5bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5bda:	f803 2b01 	strb.w	r2, [r3], #1
   b5bde:	2a00      	cmp	r2, #0
   b5be0:	d1f9      	bne.n	b5bd6 <strcpy+0x2>
   b5be2:	4770      	bx	lr

000b5be4 <strdup>:
   b5be4:	4b02      	ldr	r3, [pc, #8]	; (b5bf0 <strdup+0xc>)
   b5be6:	4601      	mov	r1, r0
   b5be8:	6818      	ldr	r0, [r3, #0]
   b5bea:	f000 b803 	b.w	b5bf4 <_strdup_r>
   b5bee:	bf00      	nop
   b5bf0:	2003e64c 	.word	0x2003e64c

000b5bf4 <_strdup_r>:
   b5bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5bf6:	4604      	mov	r4, r0
   b5bf8:	4608      	mov	r0, r1
   b5bfa:	460d      	mov	r5, r1
   b5bfc:	f7fe fa0e 	bl	b401c <strlen>
   b5c00:	1c42      	adds	r2, r0, #1
   b5c02:	4611      	mov	r1, r2
   b5c04:	4620      	mov	r0, r4
   b5c06:	9201      	str	r2, [sp, #4]
   b5c08:	f7fe fe64 	bl	b48d4 <_malloc_r>
   b5c0c:	4604      	mov	r4, r0
   b5c0e:	b118      	cbz	r0, b5c18 <_strdup_r+0x24>
   b5c10:	9a01      	ldr	r2, [sp, #4]
   b5c12:	4629      	mov	r1, r5
   b5c14:	f7ff ff99 	bl	b5b4a <memcpy>
   b5c18:	4620      	mov	r0, r4
   b5c1a:	b003      	add	sp, #12
   b5c1c:	bd30      	pop	{r4, r5, pc}
	...

000b5c20 <strtok>:
   b5c20:	4b16      	ldr	r3, [pc, #88]	; (b5c7c <strtok+0x5c>)
   b5c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c24:	681e      	ldr	r6, [r3, #0]
   b5c26:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b5c28:	4605      	mov	r5, r0
   b5c2a:	b9fc      	cbnz	r4, b5c6c <strtok+0x4c>
   b5c2c:	2050      	movs	r0, #80	; 0x50
   b5c2e:	9101      	str	r1, [sp, #4]
   b5c30:	f7fe fe38 	bl	b48a4 <malloc>
   b5c34:	9901      	ldr	r1, [sp, #4]
   b5c36:	65b0      	str	r0, [r6, #88]	; 0x58
   b5c38:	4602      	mov	r2, r0
   b5c3a:	b920      	cbnz	r0, b5c46 <strtok+0x26>
   b5c3c:	4b10      	ldr	r3, [pc, #64]	; (b5c80 <strtok+0x60>)
   b5c3e:	4811      	ldr	r0, [pc, #68]	; (b5c84 <strtok+0x64>)
   b5c40:	2157      	movs	r1, #87	; 0x57
   b5c42:	f7fe fe4f 	bl	b48e4 <__assert_func>
   b5c46:	e9c0 4400 	strd	r4, r4, [r0]
   b5c4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b5c4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b5c52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b5c56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b5c5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b5c5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b5c62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b5c66:	6184      	str	r4, [r0, #24]
   b5c68:	7704      	strb	r4, [r0, #28]
   b5c6a:	6244      	str	r4, [r0, #36]	; 0x24
   b5c6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b5c6e:	2301      	movs	r3, #1
   b5c70:	4628      	mov	r0, r5
   b5c72:	b002      	add	sp, #8
   b5c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5c78:	f000 b806 	b.w	b5c88 <__strtok_r>
   b5c7c:	2003e64c 	.word	0x2003e64c
   b5c80:	000b60e1 	.word	0x000b60e1
   b5c84:	000b6151 	.word	0x000b6151

000b5c88 <__strtok_r>:
   b5c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c8a:	b908      	cbnz	r0, b5c90 <__strtok_r+0x8>
   b5c8c:	6810      	ldr	r0, [r2, #0]
   b5c8e:	b188      	cbz	r0, b5cb4 <__strtok_r+0x2c>
   b5c90:	4604      	mov	r4, r0
   b5c92:	4620      	mov	r0, r4
   b5c94:	f814 5b01 	ldrb.w	r5, [r4], #1
   b5c98:	460f      	mov	r7, r1
   b5c9a:	f817 6b01 	ldrb.w	r6, [r7], #1
   b5c9e:	b91e      	cbnz	r6, b5ca8 <__strtok_r+0x20>
   b5ca0:	b965      	cbnz	r5, b5cbc <__strtok_r+0x34>
   b5ca2:	6015      	str	r5, [r2, #0]
   b5ca4:	4628      	mov	r0, r5
   b5ca6:	e005      	b.n	b5cb4 <__strtok_r+0x2c>
   b5ca8:	42b5      	cmp	r5, r6
   b5caa:	d1f6      	bne.n	b5c9a <__strtok_r+0x12>
   b5cac:	2b00      	cmp	r3, #0
   b5cae:	d1f0      	bne.n	b5c92 <__strtok_r+0xa>
   b5cb0:	6014      	str	r4, [r2, #0]
   b5cb2:	7003      	strb	r3, [r0, #0]
   b5cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5cb6:	461c      	mov	r4, r3
   b5cb8:	e00c      	b.n	b5cd4 <__strtok_r+0x4c>
   b5cba:	b915      	cbnz	r5, b5cc2 <__strtok_r+0x3a>
   b5cbc:	f814 3b01 	ldrb.w	r3, [r4], #1
   b5cc0:	460e      	mov	r6, r1
   b5cc2:	f816 5b01 	ldrb.w	r5, [r6], #1
   b5cc6:	42ab      	cmp	r3, r5
   b5cc8:	d1f7      	bne.n	b5cba <__strtok_r+0x32>
   b5cca:	2b00      	cmp	r3, #0
   b5ccc:	d0f3      	beq.n	b5cb6 <__strtok_r+0x2e>
   b5cce:	2300      	movs	r3, #0
   b5cd0:	f804 3c01 	strb.w	r3, [r4, #-1]
   b5cd4:	6014      	str	r4, [r2, #0]
   b5cd6:	e7ed      	b.n	b5cb4 <__strtok_r+0x2c>

000b5cd8 <__register_exitproc>:
   b5cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5cdc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5d98 <__register_exitproc+0xc0>
   b5ce0:	4606      	mov	r6, r0
   b5ce2:	f8d8 0000 	ldr.w	r0, [r8]
   b5ce6:	461f      	mov	r7, r3
   b5ce8:	460d      	mov	r5, r1
   b5cea:	4691      	mov	r9, r2
   b5cec:	f000 f856 	bl	b5d9c <__retarget_lock_acquire_recursive>
   b5cf0:	4b25      	ldr	r3, [pc, #148]	; (b5d88 <__register_exitproc+0xb0>)
   b5cf2:	681c      	ldr	r4, [r3, #0]
   b5cf4:	b934      	cbnz	r4, b5d04 <__register_exitproc+0x2c>
   b5cf6:	4c25      	ldr	r4, [pc, #148]	; (b5d8c <__register_exitproc+0xb4>)
   b5cf8:	601c      	str	r4, [r3, #0]
   b5cfa:	4b25      	ldr	r3, [pc, #148]	; (b5d90 <__register_exitproc+0xb8>)
   b5cfc:	b113      	cbz	r3, b5d04 <__register_exitproc+0x2c>
   b5cfe:	681b      	ldr	r3, [r3, #0]
   b5d00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5d04:	6863      	ldr	r3, [r4, #4]
   b5d06:	2b1f      	cmp	r3, #31
   b5d08:	dd07      	ble.n	b5d1a <__register_exitproc+0x42>
   b5d0a:	f8d8 0000 	ldr.w	r0, [r8]
   b5d0e:	f000 f847 	bl	b5da0 <__retarget_lock_release_recursive>
   b5d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5d1a:	b34e      	cbz	r6, b5d70 <__register_exitproc+0x98>
   b5d1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5d20:	b988      	cbnz	r0, b5d46 <__register_exitproc+0x6e>
   b5d22:	4b1c      	ldr	r3, [pc, #112]	; (b5d94 <__register_exitproc+0xbc>)
   b5d24:	b923      	cbnz	r3, b5d30 <__register_exitproc+0x58>
   b5d26:	f8d8 0000 	ldr.w	r0, [r8]
   b5d2a:	f000 f838 	bl	b5d9e <__retarget_lock_release>
   b5d2e:	e7f0      	b.n	b5d12 <__register_exitproc+0x3a>
   b5d30:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5d34:	f7fe fdb6 	bl	b48a4 <malloc>
   b5d38:	2800      	cmp	r0, #0
   b5d3a:	d0f4      	beq.n	b5d26 <__register_exitproc+0x4e>
   b5d3c:	2300      	movs	r3, #0
   b5d3e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5d42:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5d46:	6863      	ldr	r3, [r4, #4]
   b5d48:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5d4c:	2201      	movs	r2, #1
   b5d4e:	409a      	lsls	r2, r3
   b5d50:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5d54:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5d58:	4313      	orrs	r3, r2
   b5d5a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5d5e:	2e02      	cmp	r6, #2
   b5d60:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5d64:	bf02      	ittt	eq
   b5d66:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5d6a:	4313      	orreq	r3, r2
   b5d6c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5d70:	6863      	ldr	r3, [r4, #4]
   b5d72:	f8d8 0000 	ldr.w	r0, [r8]
   b5d76:	1c5a      	adds	r2, r3, #1
   b5d78:	3302      	adds	r3, #2
   b5d7a:	6062      	str	r2, [r4, #4]
   b5d7c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5d80:	f000 f80e 	bl	b5da0 <__retarget_lock_release_recursive>
   b5d84:	2000      	movs	r0, #0
   b5d86:	e7c6      	b.n	b5d16 <__register_exitproc+0x3e>
   b5d88:	2003e7f4 	.word	0x2003e7f4
   b5d8c:	2003e768 	.word	0x2003e768
   b5d90:	00000000 	.word	0x00000000
   b5d94:	000b48a5 	.word	0x000b48a5
   b5d98:	2003e6b0 	.word	0x2003e6b0

000b5d9c <__retarget_lock_acquire_recursive>:
   b5d9c:	4770      	bx	lr

000b5d9e <__retarget_lock_release>:
   b5d9e:	4770      	bx	lr

000b5da0 <__retarget_lock_release_recursive>:
   b5da0:	4770      	bx	lr

000b5da2 <link_code_end>:
	...

000b5da4 <dynalib_user>:
   b5da4:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b5db4:	0000 0000 454d 4020 4d20 4c54 6c00 636f     ....ME @ MTL.loc
   b5dc4:	7461 6f69 006e 6572 6566 7472 6d6f 0065     ation.refertome.
   b5dd4:	6f43 706d 656c 6574 2064 6f76 6469 7320     Completed void s
   b5de4:	7465 7075 3400 2e35 3734 3638 3832 2c38     etup.45.4786288,
   b5df4:	372d 2e33 3136 3037 3432 342c 2e35 3934     -73.617024,45.49
   b5e04:	3335 3836 2c38 372d 2e33 3735 3937 3639     53688,-73.577996
   b5e14:	3034 3030 3030 3230 7000 6275 696c 6873     40000002.publish
   b5e24:	6465 7600 6365 6f74 3a72 5f3a 5f4d 6572     ed.vector::_M_re
   b5e34:	6c61 6f6c 5f63 6e69 6573 7472 2c00 7600     alloc_insert.,.v
   b5e44:	6365 6f74 3a72 5f3a 5f4d 6172 676e 5f65     ector::_M_range_
   b5e54:	6863 6365 3a6b 5f20 6e5f 2820 6877 6369     check: __n (whic
   b5e64:	2068 7369 2520 757a 2029 3d3e 7420 6968     h is %zu) >= thi
   b5e74:	2d73 733e 7a69 2865 2029 7728 6968 6863     s->size() (which
   b5e84:	6920 2073 7a25 2975 7200 6365 6965 6576      is %zu).receive
   b5e94:	0064 0000                                   d...

000b5e98 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5ea0:	49a5 000b 49ab 000b 49e9 000b 49b9 000b     .I...I...I...I..
   b5eb0:	49a7 000b                                   .I..

000b5eb4 <_ZTVN5spark13EthernetClassE>:
	...
   b5ebc:	4f33 000b 4f29 000b 4f1f 000b 4f15 000b     3O..)O...O...O..
   b5ecc:	4f09 000b 4efd 000b 5125 000b 512d 000b     .O...N..%Q..-Q..
   b5edc:	4ef1 000b 4ee9 000b 4edf 000b 4ed5 000b     .N...N...N...N..
   b5eec:	5255 000b 515d 000b 5165 000b               UR..]Q..eQ..

000b5ef8 <_ZTV7TwoWire>:
	...
   b5f00:	4f51 000b 4f9b 000b 4f73 000b 4f53 000b     QO...O..sO..SO..
   b5f10:	4f7b 000b 4f83 000b 4f8b 000b 4f93 000b     {O...O...O...O..
   b5f20:	5387 000b                                   .S..

000b5f24 <_ZTV9IPAddress>:
	...
   b5f2c:	4ff5 000b 4fe5 000b 4fe7 000b 7061 0070     .O...O...O..app.

000b5f3c <CSWTCH.109>:
   b5f3c:	e6c8 2003 e718 2003 e6d4 2003               ... ... ... 

000b5f48 <_ZTVN5spark12NetworkClassE>:
	...
   b5f50:	50e5 000b 50ef 000b 50f9 000b 5103 000b     .P...P...P...Q..
   b5f60:	510d 000b 5119 000b 5125 000b 512d 000b     .Q...Q..%Q..-Q..
   b5f70:	5135 000b 5141 000b 5149 000b 5153 000b     5Q..AQ..IQ..SQ..
   b5f80:	5255 000b 515d 000b 5165 000b 5925 252d     UR..]Q..eQ..%Y-%
   b5f90:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b5fa0:	7361 7463 6d69 0065                         asctime.

000b5fa8 <_ZTV11USARTSerial>:
	...
   b5fb0:	53e9 000b 5455 000b 542d 000b 527d 000b     .S..UT..-T..}R..
   b5fc0:	53fd 000b 5419 000b 540b 000b 5427 000b     .S...T...T..'T..
   b5fd0:	5387 000b 53eb 000b 53ef 000b               .S...S...S..

000b5fdc <_ZTV9USBSerial>:
	...
   b5fe4:	5493 000b 54fb 000b 54d1 000b 527d 000b     .T...T...T..}R..
   b5ff4:	54c3 000b 5495 000b 54a5 000b 54f5 000b     .T...T...T...T..
   b6004:	5387 000b 54b5 000b 548d 000b               .S...T...T..

000b6010 <_ZTVN5spark9WiFiClassE>:
	...
   b6018:	55fb 000b 55f1 000b 55e7 000b 559d 000b     .U...U...U...U..
   b6028:	55db 000b 55cf 000b 5125 000b 512d 000b     .U...U..%Q..-Q..
   b6038:	55c3 000b 55bb 000b 55b1 000b 55a7 000b     .U...U...U...U..
   b6048:	5255 000b 515d 000b 5165 000b               UR..]Q..eQ..

000b6054 <_ZSt7nothrow>:
   b6054:	6e00 746f 6520 6f6e 6775 2068 7073 6361     .not enough spac
   b6064:	2065 6f66 2072 6f66 6d72 7461 6520 7078     e for format exp
   b6074:	6e61 6973 6e6f 2820 6c50 6165 6573 7320     ansion (Please s
   b6084:	6275 696d 2074 7566 6c6c 6220 6775 7220     ubmit full bug r
   b6094:	7065 726f 2074 7461 6820 7474 7370 2f3a     eport at https:/
   b60a4:	672f 6363 672e 756e 6f2e 6772 622f 6775     /gcc.gnu.org/bug
   b60b4:	2f73 3a29 200a 2020 0020 3130 3332 3534     s/):.    .012345
   b60c4:	3736 3938 6200 7361 6369 735f 7274 6e69     6789.basic_strin
   b60d4:	3a67 5f3a 5f4d 7263 6165 6574 5200 4545     g::_M_create.REE
   b60e4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b60f4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b6104:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b6114:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b6124:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b6134:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b6144:	6474 696c 2f62 6172 646e 632e 2f00 6d74     tdlib/rand.c./tm
   b6154:	2f70 656a 6b6e 6e69 2d73 4347 2d43 3031     p/jenkins-GCC-10
   b6164:	702d 7069 6c65 6e69 2d65 3834 325f 3230     -pipeline-48_202
   b6174:	3130 3231 5f34 3631 3630 3831 3630 3933     01124_1606180639
   b6184:	732f 6372 6e2f 7765 696c 2f62 656e 6c77     /src/newlib/newl
   b6194:	6269 6c2f 6269 2f63 7473 6972 676e 732f     ib/libc/string/s
   b61a4:	7274 6f74 2e6b 0063                         trtok.c.

000b61ac <link_const_data_end>:
   b61ac:	000b447d 	.word	0x000b447d
   b61b0:	000b4995 	.word	0x000b4995
   b61b4:	000b4f3d 	.word	0x000b4f3d
   b61b8:	000b50d5 	.word	0x000b50d5
   b61bc:	000b5269 	.word	0x000b5269
   b61c0:	000b533d 	.word	0x000b533d
   b61c4:	000b53b1 	.word	0x000b53b1
   b61c8:	000b53d5 	.word	0x000b53d5
   b61cc:	000b5605 	.word	0x000b5605
